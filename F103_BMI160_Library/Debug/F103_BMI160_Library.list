
F103_BMI160_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080099f0  080099f0  0000a9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f30  08009f30  0000b1f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009f30  08009f30  0000af30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f38  08009f38  0000b1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f38  08009f38  0000af38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f3c  08009f3c  0000af3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08009f40  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001f8  0800a138  0000b1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  0800a138  0000b468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e51e  00000000  00000000  0000b221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c31  00000000  00000000  0001973f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001b370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b13  00000000  00000000  0001c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e2a  00000000  00000000  0001cc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe01  00000000  00000000  00035ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c760  00000000  00000000  000458c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2026  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000539c  00000000  00000000  000d206c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d7408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	080099d8 	.word	0x080099d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	080099d8 	.word	0x080099d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	2200      	movs	r2, #0
 8001140:	2300      	movs	r3, #0
 8001142:	4604      	mov	r4, r0
 8001144:	460d      	mov	r5, r1
 8001146:	f7ff fc39 	bl	80009bc <__aeabi_dcmplt>
 800114a:	b928      	cbnz	r0, 8001158 <__aeabi_d2lz+0x1c>
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001154:	f000 b80a 	b.w	800116c <__aeabi_d2ulz>
 8001158:	4620      	mov	r0, r4
 800115a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800115e:	f000 f805 	bl	800116c <__aeabi_d2ulz>
 8001162:	4240      	negs	r0, r0
 8001164:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001168:	bd38      	pop	{r3, r4, r5, pc}
 800116a:	bf00      	nop

0800116c <__aeabi_d2ulz>:
 800116c:	b5d0      	push	{r4, r6, r7, lr}
 800116e:	2200      	movs	r2, #0
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <__aeabi_d2ulz+0x34>)
 8001172:	4606      	mov	r6, r0
 8001174:	460f      	mov	r7, r1
 8001176:	f7ff f9af 	bl	80004d8 <__aeabi_dmul>
 800117a:	f7ff fc85 	bl	8000a88 <__aeabi_d2uiz>
 800117e:	4604      	mov	r4, r0
 8001180:	f7ff f930 	bl	80003e4 <__aeabi_ui2d>
 8001184:	2200      	movs	r2, #0
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <__aeabi_d2ulz+0x38>)
 8001188:	f7ff f9a6 	bl	80004d8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4630      	mov	r0, r6
 8001192:	4639      	mov	r1, r7
 8001194:	f7fe ffe8 	bl	8000168 <__aeabi_dsub>
 8001198:	f7ff fc76 	bl	8000a88 <__aeabi_d2uiz>
 800119c:	4621      	mov	r1, r4
 800119e:	bdd0      	pop	{r4, r6, r7, pc}
 80011a0:	3df00000 	.word	0x3df00000
 80011a4:	41f00000 	.word	0x41f00000

080011a8 <bmi160_write>:
#include "bmi160_port.h"

extern I2C_HandleTypeDef hi2c1;

int8_t bmi160_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *read_data, uint16_t len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	603a      	str	r2, [r7, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	460b      	mov	r3, r1
 80011b8:	71bb      	strb	r3, [r7, #6]
 80011ba:	4613      	mov	r3, r2
 80011bc:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x0U);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	b299      	uxth	r1, r3
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	4803      	ldr	r0, [pc, #12]	@ (80011ec <bmi160_write+0x44>)
 80011de:	f002 f8b5 	bl	800334c <HAL_I2C_Mem_Write>
	return 0U;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000214 	.word	0x20000214

080011f0 <bmi160_read>:
int8_t bmi160_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af04      	add	r7, sp, #16
 80011f6:	603a      	str	r2, [r7, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	460b      	mov	r3, r1
 8001200:	71bb      	strb	r3, [r7, #6]
 8001202:	4613      	mov	r3, r2
 8001204:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x1U);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, 1U, data, len, HAL_MAX_DELAY);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	b299      	uxth	r1, r3
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	b29a      	uxth	r2, r3
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	4804      	ldr	r0, [pc, #16]	@ (800123c <bmi160_read+0x4c>)
 800122c:	f002 f988 	bl	8003540 <HAL_I2C_Mem_Read>
	return 0U;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000214 	.word	0x20000214

08001240 <delay_ms>:
void delay_ms(uint32_t period)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f001 fc97 	bl	8002b7c <HAL_Delay>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8001256:	b590      	push	{r4, r7, lr}
 8001258:	b087      	sub	sp, #28
 800125a:	af00      	add	r7, sp, #0
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4603      	mov	r3, r0
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	4613      	mov	r3, r2
 8001266:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <bmi160_get_regs+0x24>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 800127a:	23ff      	movs	r3, #255	@ 0xff
 800127c:	75fb      	strb	r3, [r7, #23]
 800127e:	e017      	b.n	80012b0 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8001286:	23f4      	movs	r3, #244	@ 0xf4
 8001288:	75fb      	strb	r3, [r7, #23]
 800128a:	e011      	b.n	80012b0 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	789b      	ldrb	r3, [r3, #2]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d103      	bne.n	800129c <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800129a:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69dc      	ldr	r4, [r3, #28]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7858      	ldrb	r0, [r3, #1]
 80012a4:	89bb      	ldrh	r3, [r7, #12]
 80012a6:	7bf9      	ldrb	r1, [r7, #15]
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	47a0      	blx	r4
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}

080012bc <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	4613      	mov	r3, r2
 80012cc:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <bmi160_set_regs+0x28>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 80012e4:	23ff      	movs	r3, #255	@ 0xff
 80012e6:	75fb      	strb	r3, [r7, #23]
 80012e8:	e045      	b.n	8001376 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 80012ea:	89bb      	ldrh	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 80012f0:	23f4      	movs	r3, #244	@ 0xf4
 80012f2:	75fb      	strb	r3, [r7, #23]
 80012f4:	e03f      	b.n	8001376 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	789b      	ldrb	r3, [r3, #2]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d103      	bne.n	8001306 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001304:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7a1b      	ldrb	r3, [r3, #8]
 800130a:	2b11      	cmp	r3, #17
 800130c:	d003      	beq.n	8001316 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8001312:	2b15      	cmp	r3, #21
 8001314:	d124      	bne.n	8001360 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1c      	ldr	r4, [r3, #32]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7858      	ldrb	r0, [r3, #1]
 800131e:	89bb      	ldrh	r3, [r7, #12]
 8001320:	7bf9      	ldrb	r1, [r7, #15]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	47a0      	blx	r4
 8001326:	4603      	mov	r3, r0
 8001328:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132e:	2001      	movs	r0, #1
 8001330:	4798      	blx	r3
 8001332:	e01a      	b.n	800136a <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1c      	ldr	r4, [r3, #32]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7858      	ldrb	r0, [r3, #1]
 800133c:	7dbb      	ldrb	r3, [r7, #22]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	441a      	add	r2, r3
 8001342:	7bf9      	ldrb	r1, [r7, #15]
 8001344:	2301      	movs	r3, #1
 8001346:	47a0      	blx	r4
 8001348:	4603      	mov	r3, r0
 800134a:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	3301      	adds	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001356:	2001      	movs	r0, #1
 8001358:	4798      	blx	r3
            for (; count < len; count++)
 800135a:	7dbb      	ldrb	r3, [r7, #22]
 800135c:	3301      	adds	r3, #1
 800135e:	75bb      	strb	r3, [r7, #22]
 8001360:	7dbb      	ldrb	r3, [r7, #22]
 8001362:	b29b      	uxth	r3, r3
 8001364:	89ba      	ldrh	r2, [r7, #12]
 8001366:	429a      	cmp	r2, r3
 8001368:	d8e4      	bhi.n	8001334 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 800136a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8001372:	23fe      	movs	r3, #254	@ 0xfe
 8001374:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800137a:	4618      	mov	r0, r3
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}

08001382 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 800138a:	2303      	movs	r3, #3
 800138c:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f90b 	bl	80015aa <null_ptr_check>
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8001398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10c      	bne.n	80013ba <bmi160_init+0x38>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	789b      	ldrb	r3, [r3, #2]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d108      	bne.n	80013ba <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80013a8:	f107 010d 	add.w	r1, r7, #13
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	207f      	movs	r0, #127	@ 0x7f
 80013b2:	f7ff ff50 	bl	8001256 <bmi160_get_regs>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d127      	bne.n	8001412 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80013c8:	e007      	b.n	80013da <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ff40 	bl	8001256 <bmi160_get_regs>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	73ba      	strb	r2, [r7, #14]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <bmi160_init+0x6a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2bd1      	cmp	r3, #209	@ 0xd1
 80013ea:	d1ee      	bne.n	80013ca <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 80013ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10c      	bne.n	800140e <bmi160_init+0x8c>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2bd1      	cmp	r3, #209	@ 0xd1
 80013fa:	d108      	bne.n	800140e <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	22ff      	movs	r2, #255	@ 0xff
 8001400:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f80b 	bl	800141e <bmi160_soft_reset>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e001      	b.n	8001412 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 800140e:	23fd      	movs	r3, #253	@ 0xfd
 8001410:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8001426:	23b6      	movs	r3, #182	@ 0xb6
 8001428:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <bmi160_soft_reset+0x1a>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8001438:	23ff      	movs	r3, #255	@ 0xff
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e024      	b.n	8001488 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 800143e:	f107 010e 	add.w	r1, r7, #14
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	207e      	movs	r0, #126	@ 0x7e
 8001448:	f7ff ff38 	bl	80012bc <bmi160_set_regs>
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	2001      	movs	r0, #1
 8001456:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8001458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10c      	bne.n	800147a <bmi160_soft_reset+0x5c>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	789b      	ldrb	r3, [r3, #2]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d108      	bne.n	800147a <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8001468:	f107 010e 	add.w	r1, r7, #14
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	207f      	movs	r0, #127	@ 0x7f
 8001472:	f7ff fef0 	bl	8001256 <bmi160_get_regs>
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f8b0 	bl	80015e8 <default_param_settg>
        }
    }

    return rslt;
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <bmi160_set_power_mode+0x1a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80014ae:	23ff      	movs	r3, #255	@ 0xff
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e00d      	b.n	80014d0 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f8c0 	bl	800163a <set_accel_pwr>
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d104      	bne.n	80014d0 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f94e 	bl	8001768 <set_gyro_pwr>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80014d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 80014fc:	7d7b      	ldrb	r3, [r7, #21]
 80014fe:	109b      	asrs	r3, r3, #2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8001510:	7d3b      	ldrb	r3, [r7, #20]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8001516:	2303      	movs	r3, #3
 8001518:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d03c      	beq.n	800159a <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8001520:	7d7b      	ldrb	r3, [r7, #21]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d024      	beq.n	8001570 <bmi160_get_sensor_data+0x94>
 8001526:	2b03      	cmp	r3, #3
 8001528:	dc34      	bgt.n	8001594 <bmi160_get_sensor_data+0xb8>
 800152a:	2b01      	cmp	r3, #1
 800152c:	d002      	beq.n	8001534 <bmi160_get_sensor_data+0x58>
 800152e:	2b02      	cmp	r3, #2
 8001530:	d00f      	beq.n	8001552 <bmi160_get_sensor_data+0x76>
 8001532:	e02f      	b.n	8001594 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 800153a:	23ff      	movs	r3, #255	@ 0xff
 800153c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 800153e:	e02e      	b.n	800159e <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8001540:	7dbb      	ldrb	r3, [r7, #22]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f952 	bl	80017f0 <get_accel_data>
 800154c:	4603      	mov	r3, r0
 800154e:	75fb      	strb	r3, [r7, #23]
                break;
 8001550:	e025      	b.n	800159e <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8001558:	23ff      	movs	r3, #255	@ 0xff
 800155a:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 800155c:	e01f      	b.n	800159e <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 800155e:	7dbb      	ldrb	r3, [r7, #22]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fa0d 	bl	8001984 <get_gyro_data>
 800156a:	4603      	mov	r3, r0
 800156c:	75fb      	strb	r3, [r7, #23]
                break;
 800156e:	e016      	b.n	800159e <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <bmi160_get_sensor_data+0xa0>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 800157c:	23ff      	movs	r3, #255	@ 0xff
 800157e:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8001580:	e00d      	b.n	800159e <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8001582:	7db8      	ldrb	r0, [r7, #22]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	f000 fb44 	bl	8001c16 <get_accel_gyro_data>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]
                break;
 8001592:	e004      	b.n	800159e <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8001594:	23fb      	movs	r3, #251	@ 0xfb
 8001596:	75fb      	strb	r3, [r7, #23]
                break;
 8001598:	e001      	b.n	800159e <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 800159a:	23ff      	movs	r3, #255	@ 0xff
 800159c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800159e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00b      	beq.n	80015d0 <null_ptr_check+0x26>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <null_ptr_check+0x26>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <null_ptr_check+0x26>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 80015d0:	23ff      	movs	r3, #255	@ 0xff
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e001      	b.n	80015da <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2208      	movs	r2, #8
 80015fa:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2210      	movs	r2, #16
 8001600:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2208      	movs	r2, #8
 8001612:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2214      	movs	r2, #20
 8001618:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6852      	ldr	r2, [r2, #4]
 8001626:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68d2      	ldr	r2, [r2, #12]
 800162e:	611a      	str	r2, [r3, #16]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	791b      	ldrb	r3, [r3, #4]
 800164e:	2b0f      	cmp	r3, #15
 8001650:	d92b      	bls.n	80016aa <set_accel_pwr+0x70>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	791b      	ldrb	r3, [r3, #4]
 8001656:	2b12      	cmp	r3, #18
 8001658:	d827      	bhi.n	80016aa <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	791a      	ldrb	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7a1b      	ldrb	r3, [r3, #8]
 8001662:	429a      	cmp	r2, r3
 8001664:	d024      	beq.n	80016b0 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8001666:	f107 030e 	add.w	r3, r7, #14
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f826 	bl	80016be <process_under_sampling>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d118      	bne.n	80016b0 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	1d19      	adds	r1, r3, #4
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	207e      	movs	r0, #126	@ 0x7e
 8001688:	f7ff fe18 	bl	80012bc <bmi160_set_regs>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7a1b      	ldrb	r3, [r3, #8]
 8001694:	2b10      	cmp	r3, #16
 8001696:	d103      	bne.n	80016a0 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169c:	2005      	movs	r0, #5
 800169e:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	791a      	ldrb	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80016a8:	e002      	b.n	80016b0 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80016aa:	23f3      	movs	r3, #243	@ 0xf3
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e000      	b.n	80016b2 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80016b0:	bf00      	nop
    }

    return rslt;
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 80016cc:	2300      	movs	r3, #0
 80016ce:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2201      	movs	r2, #1
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	2040      	movs	r0, #64	@ 0x40
 80016d8:	f7ff fdbd 	bl	8001256 <bmi160_get_regs>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80016e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d139      	bne.n	800175c <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	791b      	ldrb	r3, [r3, #4]
 80016ec:	2b12      	cmp	r3, #18
 80016ee:	d120      	bne.n	8001732 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016f8:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001700:	b2da      	uxtb	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	2040      	movs	r0, #64	@ 0x40
 800170e:	f7ff fdd5 	bl	80012bc <bmi160_set_regs>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d11e      	bne.n	800175c <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 800171e:	f107 010c 	add.w	r1, r7, #12
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2202      	movs	r2, #2
 8001726:	2058      	movs	r0, #88	@ 0x58
 8001728:	f7ff fdc8 	bl	80012bc <bmi160_set_regs>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e014      	b.n	800175c <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b25b      	sxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	da0f      	bge.n	800175c <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001744:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7bba      	ldrb	r2, [r7, #14]
 800174a:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	2040      	movs	r0, #64	@ 0x40
 8001754:	f7ff fdb2 	bl	80012bc <bmi160_set_regs>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7b1b      	ldrb	r3, [r3, #12]
 8001778:	2b14      	cmp	r3, #20
 800177a:	d007      	beq.n	800178c <set_gyro_pwr+0x24>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7b1b      	ldrb	r3, [r3, #12]
 8001780:	2b15      	cmp	r3, #21
 8001782:	d003      	beq.n	800178c <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001788:	2b17      	cmp	r3, #23
 800178a:	d129      	bne.n	80017e0 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7b1a      	ldrb	r2, [r3, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7c1b      	ldrb	r3, [r3, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d025      	beq.n	80017e4 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f103 010c 	add.w	r1, r3, #12
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	207e      	movs	r0, #126	@ 0x7e
 80017a4:	f7ff fd8a 	bl	80012bc <bmi160_set_regs>
 80017a8:	4603      	mov	r3, r0
 80017aa:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7c1b      	ldrb	r3, [r3, #16]
 80017b0:	2b14      	cmp	r3, #20
 80017b2:	d104      	bne.n	80017be <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	2050      	movs	r0, #80	@ 0x50
 80017ba:	4798      	blx	r3
 80017bc:	e00b      	b.n	80017d6 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7c1b      	ldrb	r3, [r3, #16]
 80017c2:	2b17      	cmp	r3, #23
 80017c4:	d107      	bne.n	80017d6 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80017ca:	2b15      	cmp	r3, #21
 80017cc:	d103      	bne.n	80017d6 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	200a      	movs	r0, #10
 80017d4:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7b1a      	ldrb	r2, [r3, #12]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80017de:	e001      	b.n	80017e4 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80017e0:	23f3      	movs	r3, #243	@ 0xf3
 80017e2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	@ 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	b29b      	uxth	r3, r3
 8001824:	3306      	adds	r3, #6
 8001826:	b29a      	uxth	r2, r3
 8001828:	f107 0114 	add.w	r1, r7, #20
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2012      	movs	r0, #18
 8001830:	f7ff fd11 	bl	8001256 <bmi160_get_regs>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800183a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 8097 	bne.w	8001972 <get_accel_data+0x182>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8001844:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800184e:	3330      	adds	r3, #48	@ 0x30
 8001850:	443b      	add	r3, r7
 8001852:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800185a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001864:	3330      	adds	r3, #48	@ 0x30
 8001866:	443b      	add	r3, r7
 8001868:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800186c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001870:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21a      	sxth	r2, r3
 8001878:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800187c:	b21b      	sxth	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	8c3a      	ldrh	r2, [r7, #32]
 8001886:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8001888:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001892:	3330      	adds	r3, #48	@ 0x30
 8001894:	443b      	add	r3, r7
 8001896:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800189a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800189e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80018a8:	3330      	adds	r3, #48	@ 0x30
 80018aa:	443b      	add	r3, r7
 80018ac:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80018b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80018b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80018b8:	021b      	lsls	r3, r3, #8
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	8c3a      	ldrh	r2, [r7, #32]
 80018ca:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80018cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80018d6:	3330      	adds	r3, #48	@ 0x30
 80018d8:	443b      	add	r3, r7
 80018da:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80018de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80018e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80018ec:	3330      	adds	r3, #48	@ 0x30
 80018ee:	443b      	add	r3, r7
 80018f0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80018f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80018f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	b21a      	sxth	r2, r3
 8001900:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001904:	b21b      	sxth	r3, r3
 8001906:	4313      	orrs	r3, r2
 8001908:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	8c3a      	ldrh	r2, [r7, #32]
 800190e:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d129      	bne.n	800196a <get_accel_data+0x17a>
        {
            time_0 = data_array[idx++];
 8001916:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001920:	3330      	adds	r3, #48	@ 0x30
 8001922:	443b      	add	r3, r7
 8001924:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001928:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800192c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001936:	3330      	adds	r3, #48	@ 0x30
 8001938:	443b      	add	r3, r7
 800193a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8001942:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800194c:	3330      	adds	r3, #48	@ 0x30
 800194e:	443b      	add	r3, r7
 8001950:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8001958:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	431a      	orrs	r2, r3
 800195e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001962:	431a      	orrs	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	e006      	b.n	8001978 <get_accel_data+0x188>
        }
        else
        {
            accel->sensortime = 0;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	e002      	b.n	8001978 <get_accel_data+0x188>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8001972:	23fe      	movs	r3, #254	@ 0xfe
 8001974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8001978:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800197c:	4618      	mov	r0, r3
 800197e:	3730      	adds	r7, #48	@ 0x30
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	@ 0x30
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d17b      	bne.n	8001ab6 <get_gyro_data+0x132>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 80019be:	f107 0110 	add.w	r1, r7, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2206      	movs	r2, #6
 80019c6:	200c      	movs	r0, #12
 80019c8:	f7ff fc45 	bl	8001256 <bmi160_get_regs>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80019d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d169      	bne.n	8001aae <get_gyro_data+0x12a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80019da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80019e4:	3330      	adds	r3, #48	@ 0x30
 80019e6:	443b      	add	r3, r7
 80019e8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80019ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80019f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80019fa:	3330      	adds	r3, #48	@ 0x30
 80019fc:	443b      	add	r3, r7
 80019fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001a02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001a06:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	b21a      	sxth	r2, r3
 8001a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	8c3a      	ldrh	r2, [r7, #32]
 8001a1c:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8001a1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001a28:	3330      	adds	r3, #48	@ 0x30
 8001a2a:	443b      	add	r3, r7
 8001a2c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001a30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8001a34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001a3e:	3330      	adds	r3, #48	@ 0x30
 8001a40:	443b      	add	r3, r7
 8001a42:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001a46:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001a4a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	8c3a      	ldrh	r2, [r7, #32]
 8001a60:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8001a62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001a6c:	3330      	adds	r3, #48	@ 0x30
 8001a6e:	443b      	add	r3, r7
 8001a70:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8001a78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001a82:	3330      	adds	r3, #48	@ 0x30
 8001a84:	443b      	add	r3, r7
 8001a86:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001a8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001a8e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	8c3a      	ldrh	r2, [r7, #32]
 8001aa4:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	e0ad      	b.n	8001c0a <get_gyro_data+0x286>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8001aae:	23fe      	movs	r3, #254	@ 0xfe
 8001ab0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001ab4:	e0a9      	b.n	8001c0a <get_gyro_data+0x286>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	330c      	adds	r3, #12
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	f107 0110 	add.w	r1, r7, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	200c      	movs	r0, #12
 8001ac6:	f7ff fbc6 	bl	8001256 <bmi160_get_regs>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 8001ad0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 8095 	bne.w	8001c04 <get_gyro_data+0x280>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8001ada:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001ae4:	3330      	adds	r3, #48	@ 0x30
 8001ae6:	443b      	add	r3, r7
 8001ae8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001aec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8001af0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001afa:	3330      	adds	r3, #48	@ 0x30
 8001afc:	443b      	add	r3, r7
 8001afe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001b06:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	8c3a      	ldrh	r2, [r7, #32]
 8001b1c:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8001b1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001b28:	3330      	adds	r3, #48	@ 0x30
 8001b2a:	443b      	add	r3, r7
 8001b2c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8001b34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001b3e:	3330      	adds	r3, #48	@ 0x30
 8001b40:	443b      	add	r3, r7
 8001b42:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b46:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001b4a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b21a      	sxth	r2, r3
 8001b52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	8c3a      	ldrh	r2, [r7, #32]
 8001b60:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8001b62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001b6c:	3330      	adds	r3, #48	@ 0x30
 8001b6e:	443b      	add	r3, r7
 8001b70:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8001b78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001b82:	3330      	adds	r3, #48	@ 0x30
 8001b84:	443b      	add	r3, r7
 8001b86:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001b8e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	8c3a      	ldrh	r2, [r7, #32]
 8001ba4:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 8001ba6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001baa:	3306      	adds	r3, #6
 8001bac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 8001bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001bba:	3330      	adds	r3, #48	@ 0x30
 8001bbc:	443b      	add	r3, r7
 8001bbe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001bc2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8001bc6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001bd0:	3330      	adds	r3, #48	@ 0x30
 8001bd2:	443b      	add	r3, r7
 8001bd4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8001bdc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001be6:	3330      	adds	r3, #48	@ 0x30
 8001be8:	443b      	add	r3, r7
 8001bea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8001bf2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	e002      	b.n	8001c0a <get_gyro_data+0x286>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8001c04:	23fe      	movs	r3, #254	@ 0xfe
 8001c06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 8001c0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3730      	adds	r7, #48	@ 0x30
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b08c      	sub	sp, #48	@ 0x30
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	330c      	adds	r3, #12
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f107 0110 	add.w	r1, r7, #16
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	200c      	movs	r0, #12
 8001c5c:	f7ff fafb 	bl	8001256 <bmi160_get_regs>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8001c66:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 8108 	bne.w	8001e80 <get_accel_gyro_data+0x26a>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8001c70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001c7a:	3330      	adds	r3, #48	@ 0x30
 8001c7c:	443b      	add	r3, r7
 8001c7e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001c86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001c90:	3330      	adds	r3, #48	@ 0x30
 8001c92:	443b      	add	r3, r7
 8001c94:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001c98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001c9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	4313      	orrs	r3, r2
 8001cac:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	8c3a      	ldrh	r2, [r7, #32]
 8001cb2:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8001cb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001cbe:	3330      	adds	r3, #48	@ 0x30
 8001cc0:	443b      	add	r3, r7
 8001cc2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001cca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001cd4:	3330      	adds	r3, #48	@ 0x30
 8001cd6:	443b      	add	r3, r7
 8001cd8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001cdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001ce0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	8c3a      	ldrh	r2, [r7, #32]
 8001cf6:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8001cf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001d02:	3330      	adds	r3, #48	@ 0x30
 8001d04:	443b      	add	r3, r7
 8001d06:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001d0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001d18:	3330      	adds	r3, #48	@ 0x30
 8001d1a:	443b      	add	r3, r7
 8001d1c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001d24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	4313      	orrs	r3, r2
 8001d34:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	8c3a      	ldrh	r2, [r7, #32]
 8001d3a:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 8001d3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001d46:	3330      	adds	r3, #48	@ 0x30
 8001d48:	443b      	add	r3, r7
 8001d4a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001d52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001d5c:	3330      	adds	r3, #48	@ 0x30
 8001d5e:	443b      	add	r3, r7
 8001d60:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001d68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	8c3a      	ldrh	r2, [r7, #32]
 8001d7e:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8001d80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001d8a:	3330      	adds	r3, #48	@ 0x30
 8001d8c:	443b      	add	r3, r7
 8001d8e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001d96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001da0:	3330      	adds	r3, #48	@ 0x30
 8001da2:	443b      	add	r3, r7
 8001da4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001da8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001dac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	8c3a      	ldrh	r2, [r7, #32]
 8001dc2:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8001dc4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001dce:	3330      	adds	r3, #48	@ 0x30
 8001dd0:	443b      	add	r3, r7
 8001dd2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001dda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001de4:	3330      	adds	r3, #48	@ 0x30
 8001de6:	443b      	add	r3, r7
 8001de8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001dec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001df0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	8c3a      	ldrh	r2, [r7, #32]
 8001e06:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d131      	bne.n	8001e72 <get_accel_gyro_data+0x25c>
        {
            time_0 = data_array[idx++];
 8001e0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001e18:	3330      	adds	r3, #48	@ 0x30
 8001e1a:	443b      	add	r3, r7
 8001e1c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001e20:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8001e24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001e2e:	3330      	adds	r3, #48	@ 0x30
 8001e30:	443b      	add	r3, r7
 8001e32:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8001e3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001e44:	3330      	adds	r3, #48	@ 0x30
 8001e46:	443b      	add	r3, r7
 8001e48:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8001e50:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	431a      	orrs	r2, r3
 8001e56:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8001e60:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	431a      	orrs	r2, r3
 8001e66:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e009      	b.n	8001e86 <get_accel_gyro_data+0x270>
        }
        else
        {
            accel->sensortime = 0;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	e002      	b.n	8001e86 <get_accel_gyro_data+0x270>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8001e80:	23fe      	movs	r3, #254	@ 0xfe
 8001e82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8001e86:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3730      	adds	r7, #48	@ 0x30
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <kalman_filter>:
// Low-Pass Filtre için kesim frekansı
#define FC 1.0f  // Kesim frekansı (Hz) - 1 Hz seçildi
#define ALPHA (DT / (DT + (1.0f / (2.0f * M_PI * FC))))  // Filtre katsayısı

// Kalman Filtre Fonksiyonu
float kalman_filter(float angle, float rate, float accel_angle, float *bias, float P[2][2]) {
 8001e94:	b5b0      	push	{r4, r5, r7, lr}
 8001e96:	b08a      	sub	sp, #40	@ 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
    rate -= *bias;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	68b8      	ldr	r0, [r7, #8]
 8001eaa:	f7fe fe61 	bl	8000b70 <__aeabi_fsub>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	60bb      	str	r3, [r7, #8]
    angle += rate * DT;
 8001eb2:	4982      	ldr	r1, [pc, #520]	@ (80020bc <kalman_filter+0x228>)
 8001eb4:	68b8      	ldr	r0, [r7, #8]
 8001eb6:	f7fe ff65 	bl	8000d84 <__aeabi_fmul>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7fe fe58 	bl	8000b74 <__addsf3>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60fb      	str	r3, [r7, #12]

    P[0][0] += DT * (DT * P[1][1] - P[0][1] - P[1][0] + Q_angle);
 8001ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001eca:	681c      	ldr	r4, [r3, #0]
 8001ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ece:	3308      	adds	r3, #8
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	497a      	ldr	r1, [pc, #488]	@ (80020bc <kalman_filter+0x228>)
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe ff55 	bl	8000d84 <__aeabi_fmul>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	f7fe fe43 	bl	8000b70 <__aeabi_fsub>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ef0:	3308      	adds	r3, #8
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	f7fe fe3a 	bl	8000b70 <__aeabi_fsub>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b6f      	ldr	r3, [pc, #444]	@ (80020c0 <kalman_filter+0x22c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f7fe fe34 	bl	8000b74 <__addsf3>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	496b      	ldr	r1, [pc, #428]	@ (80020bc <kalman_filter+0x228>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe ff37 	bl	8000d84 <__aeabi_fmul>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe fe2a 	bl	8000b74 <__addsf3>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f26:	601a      	str	r2, [r3, #0]
    P[0][1] -= DT * P[1][1];
 8001f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f2a:	685c      	ldr	r4, [r3, #4]
 8001f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f2e:	3308      	adds	r3, #8
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4962      	ldr	r1, [pc, #392]	@ (80020bc <kalman_filter+0x228>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe ff25 	bl	8000d84 <__aeabi_fmul>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7fe fe16 	bl	8000b70 <__aeabi_fsub>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f4a:	605a      	str	r2, [r3, #4]
    P[1][0] -= DT * P[1][1];
 8001f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f4e:	3308      	adds	r3, #8
 8001f50:	681d      	ldr	r5, [r3, #0]
 8001f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f54:	3308      	adds	r3, #8
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4958      	ldr	r1, [pc, #352]	@ (80020bc <kalman_filter+0x228>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe ff12 	bl	8000d84 <__aeabi_fmul>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f66:	f103 0408 	add.w	r4, r3, #8
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f7fe fdff 	bl	8000b70 <__aeabi_fsub>
 8001f72:	4603      	mov	r3, r0
 8001f74:	6023      	str	r3, [r4, #0]
    P[1][1] += Q_bias * DT;
 8001f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f78:	3308      	adds	r3, #8
 8001f7a:	685d      	ldr	r5, [r3, #4]
 8001f7c:	4b51      	ldr	r3, [pc, #324]	@ (80020c4 <kalman_filter+0x230>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	494e      	ldr	r1, [pc, #312]	@ (80020bc <kalman_filter+0x228>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fefe 	bl	8000d84 <__aeabi_fmul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f8e:	f103 0408 	add.w	r4, r3, #8
 8001f92:	4611      	mov	r1, r2
 8001f94:	4628      	mov	r0, r5
 8001f96:	f7fe fded 	bl	8000b74 <__addsf3>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6063      	str	r3, [r4, #4]

    float S = P[0][0] + R_measure;
 8001f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a49      	ldr	r2, [pc, #292]	@ (80020c8 <kalman_filter+0x234>)
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fde3 	bl	8000b74 <__addsf3>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    float K[2] = { P[0][0] / S, P[1][0] / S };
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe ff97 	bl	8000eec <__aeabi_fdiv>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe ff8e 	bl	8000eec <__aeabi_fdiv>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	617b      	str	r3, [r7, #20]

    float y = accel_angle - angle;
 8001fd4:	68f9      	ldr	r1, [r7, #12]
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fdca 	bl	8000b70 <__aeabi_fsub>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	623b      	str	r3, [r7, #32]
    angle += K[0] * y;
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	6a39      	ldr	r1, [r7, #32]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fecd 	bl	8000d84 <__aeabi_fmul>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4619      	mov	r1, r3
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7fe fdc0 	bl	8000b74 <__addsf3>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60fb      	str	r3, [r7, #12]
    *bias += K[1] * y;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681c      	ldr	r4, [r3, #0]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	6a39      	ldr	r1, [r7, #32]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe febf 	bl	8000d84 <__aeabi_fmul>
 8002006:	4603      	mov	r3, r0
 8002008:	4619      	mov	r1, r3
 800200a:	4620      	mov	r0, r4
 800200c:	f7fe fdb2 	bl	8000b74 <__addsf3>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	601a      	str	r2, [r3, #0]

    float P00_temp = P[0][0], P01_temp = P[0][1];
 8002018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
    P[0][0] -= K[0] * P00_temp;
 8002024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002026:	681c      	ldr	r4, [r3, #0]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	69f9      	ldr	r1, [r7, #28]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fea9 	bl	8000d84 <__aeabi_fmul>
 8002032:	4603      	mov	r3, r0
 8002034:	4619      	mov	r1, r3
 8002036:	4620      	mov	r0, r4
 8002038:	f7fe fd9a 	bl	8000b70 <__aeabi_fsub>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002042:	601a      	str	r2, [r3, #0]
    P[0][1] -= K[0] * P01_temp;
 8002044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002046:	685c      	ldr	r4, [r3, #4]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fe99 	bl	8000d84 <__aeabi_fmul>
 8002052:	4603      	mov	r3, r0
 8002054:	4619      	mov	r1, r3
 8002056:	4620      	mov	r0, r4
 8002058:	f7fe fd8a 	bl	8000b70 <__aeabi_fsub>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002062:	605a      	str	r2, [r3, #4]
    P[1][0] -= K[1] * P00_temp;
 8002064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002066:	3308      	adds	r3, #8
 8002068:	681d      	ldr	r5, [r3, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	69f9      	ldr	r1, [r7, #28]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fe88 	bl	8000d84 <__aeabi_fmul>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207a:	f103 0408 	add.w	r4, r3, #8
 800207e:	4611      	mov	r1, r2
 8002080:	4628      	mov	r0, r5
 8002082:	f7fe fd75 	bl	8000b70 <__aeabi_fsub>
 8002086:	4603      	mov	r3, r0
 8002088:	6023      	str	r3, [r4, #0]
    P[1][1] -= K[1] * P01_temp;
 800208a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208c:	3308      	adds	r3, #8
 800208e:	685d      	ldr	r5, [r3, #4]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	69b9      	ldr	r1, [r7, #24]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fe75 	bl	8000d84 <__aeabi_fmul>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a0:	f103 0408 	add.w	r4, r3, #8
 80020a4:	4611      	mov	r1, r2
 80020a6:	4628      	mov	r0, r5
 80020a8:	f7fe fd62 	bl	8000b70 <__aeabi_fsub>
 80020ac:	4603      	mov	r3, r0
 80020ae:	6063      	str	r3, [r4, #4]

    return angle;
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3728      	adds	r7, #40	@ 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ba:	bf00      	nop
 80020bc:	3d4ccccd 	.word	0x3d4ccccd
 80020c0:	20000010 	.word	0x20000010
 80020c4:	20000014 	.word	0x20000014
 80020c8:	20000018 	.word	0x20000018
 80020cc:	00000000 	.word	0x00000000

080020d0 <update_euler_angles>:

// Euler Açılarının Hesaplanması
void update_euler_angles(int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz) {
 80020d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020d4:	b088      	sub	sp, #32
 80020d6:	af04      	add	r7, sp, #16
 80020d8:	4604      	mov	r4, r0
 80020da:	4608      	mov	r0, r1
 80020dc:	4611      	mov	r1, r2
 80020de:	461a      	mov	r2, r3
 80020e0:	4623      	mov	r3, r4
 80020e2:	80fb      	strh	r3, [r7, #6]
 80020e4:	4603      	mov	r3, r0
 80020e6:	80bb      	strh	r3, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
 80020ec:	4613      	mov	r3, r2
 80020ee:	803b      	strh	r3, [r7, #0]
    // İvmeölçerden eğim açılarını hesapla
    float accel_roll  = atan2f(ay, az) * 180.0f / M_PI;
 80020f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fdf1 	bl	8000cdc <__aeabi_i2f>
 80020fa:	4604      	mov	r4, r0
 80020fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fdeb 	bl	8000cdc <__aeabi_i2f>
 8002106:	4603      	mov	r3, r0
 8002108:	4619      	mov	r1, r3
 800210a:	4620      	mov	r0, r4
 800210c:	f007 fa40 	bl	8009590 <atan2f>
 8002110:	4603      	mov	r3, r0
 8002112:	499f      	ldr	r1, [pc, #636]	@ (8002390 <update_euler_angles+0x2c0>)
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fe35 	bl	8000d84 <__aeabi_fmul>
 800211a:	4603      	mov	r3, r0
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f983 	bl	8000428 <__aeabi_f2d>
 8002122:	a395      	add	r3, pc, #596	@ (adr r3, 8002378 <update_euler_angles+0x2a8>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fb00 	bl	800072c <__aeabi_ddiv>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f7fe fcc8 	bl	8000ac8 <__aeabi_d2f>
 8002138:	4603      	mov	r3, r0
 800213a:	60fb      	str	r3, [r7, #12]
    float accel_pitch = atan2f(-ax, sqrtf(ay * ay + az * az)) * 180.0f / M_PI;
 800213c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002140:	425b      	negs	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fdca 	bl	8000cdc <__aeabi_i2f>
 8002148:	4604      	mov	r4, r0
 800214a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800214e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002152:	fb03 f202 	mul.w	r2, r3, r2
 8002156:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800215a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fdb9 	bl	8000cdc <__aeabi_i2f>
 800216a:	4603      	mov	r3, r0
 800216c:	4618      	mov	r0, r3
 800216e:	f007 fa11 	bl	8009594 <sqrtf>
 8002172:	4603      	mov	r3, r0
 8002174:	4619      	mov	r1, r3
 8002176:	4620      	mov	r0, r4
 8002178:	f007 fa0a 	bl	8009590 <atan2f>
 800217c:	4603      	mov	r3, r0
 800217e:	4984      	ldr	r1, [pc, #528]	@ (8002390 <update_euler_angles+0x2c0>)
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fdff 	bl	8000d84 <__aeabi_fmul>
 8002186:	4603      	mov	r3, r0
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f94d 	bl	8000428 <__aeabi_f2d>
 800218e:	a37a      	add	r3, pc, #488	@ (adr r3, 8002378 <update_euler_angles+0x2a8>)
 8002190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002194:	f7fe faca 	bl	800072c <__aeabi_ddiv>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe fc92 	bl	8000ac8 <__aeabi_d2f>
 80021a4:	4603      	mov	r3, r0
 80021a6:	60bb      	str	r3, [r7, #8]

    // Jiroskop verisini derece/saniyeye çevir
    rate_roll  = gx / GYRO_SENSITIVITY;
 80021a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fd95 	bl	8000cdc <__aeabi_i2f>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4977      	ldr	r1, [pc, #476]	@ (8002394 <update_euler_angles+0x2c4>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fe98 	bl	8000eec <__aeabi_fdiv>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	4b75      	ldr	r3, [pc, #468]	@ (8002398 <update_euler_angles+0x2c8>)
 80021c2:	601a      	str	r2, [r3, #0]
    rate_pitch = gy / GYRO_SENSITIVITY;
 80021c4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fd87 	bl	8000cdc <__aeabi_i2f>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4970      	ldr	r1, [pc, #448]	@ (8002394 <update_euler_angles+0x2c4>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fe8a 	bl	8000eec <__aeabi_fdiv>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	4b6f      	ldr	r3, [pc, #444]	@ (800239c <update_euler_angles+0x2cc>)
 80021de:	601a      	str	r2, [r3, #0]
    rate_yaw   = gz / GYRO_SENSITIVITY;
 80021e0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fd79 	bl	8000cdc <__aeabi_i2f>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4969      	ldr	r1, [pc, #420]	@ (8002394 <update_euler_angles+0x2c4>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fe7c 	bl	8000eec <__aeabi_fdiv>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b69      	ldr	r3, [pc, #420]	@ (80023a0 <update_euler_angles+0x2d0>)
 80021fa:	601a      	str	r2, [r3, #0]

    // 🔥 **Kalman Filtre ile Roll ve Pitch Güncelle**
    roll  = kalman_filter(roll, rate_roll, accel_roll, &bias_roll, P);
 80021fc:	4b69      	ldr	r3, [pc, #420]	@ (80023a4 <update_euler_angles+0x2d4>)
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	4b65      	ldr	r3, [pc, #404]	@ (8002398 <update_euler_angles+0x2c8>)
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	4b68      	ldr	r3, [pc, #416]	@ (80023a8 <update_euler_angles+0x2d8>)
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4b68      	ldr	r3, [pc, #416]	@ (80023ac <update_euler_angles+0x2dc>)
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	f7ff fe42 	bl	8001e94 <kalman_filter>
 8002210:	4603      	mov	r3, r0
 8002212:	4a64      	ldr	r2, [pc, #400]	@ (80023a4 <update_euler_angles+0x2d4>)
 8002214:	6013      	str	r3, [r2, #0]
    pitch = kalman_filter(pitch, rate_pitch, accel_pitch, &bias_pitch, P);
 8002216:	4b66      	ldr	r3, [pc, #408]	@ (80023b0 <update_euler_angles+0x2e0>)
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	4b60      	ldr	r3, [pc, #384]	@ (800239c <update_euler_angles+0x2cc>)
 800221c:	6819      	ldr	r1, [r3, #0]
 800221e:	4b62      	ldr	r3, [pc, #392]	@ (80023a8 <update_euler_angles+0x2d8>)
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4b64      	ldr	r3, [pc, #400]	@ (80023b4 <update_euler_angles+0x2e4>)
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	f7ff fe35 	bl	8001e94 <kalman_filter>
 800222a:	4603      	mov	r3, r0
 800222c:	4a60      	ldr	r2, [pc, #384]	@ (80023b0 <update_euler_angles+0x2e0>)
 800222e:	6013      	str	r3, [r2, #0]

    // 🔥 **Roll, Pitch ve Yaw için Low-Pass Filtre Eklendi!**
    roll  = ALPHA * roll  + (1 - ALPHA) * accel_roll;
 8002230:	4b5c      	ldr	r3, [pc, #368]	@ (80023a4 <update_euler_angles+0x2d4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f8f7 	bl	8000428 <__aeabi_f2d>
 800223a:	a351      	add	r3, pc, #324	@ (adr r3, 8002380 <update_euler_angles+0x2b0>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe f94a 	bl	80004d8 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4614      	mov	r4, r2
 800224a:	461d      	mov	r5, r3
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7fe f8eb 	bl	8000428 <__aeabi_f2d>
 8002252:	a34d      	add	r3, pc, #308	@ (adr r3, 8002388 <update_euler_angles+0x2b8>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	f7fe f93e 	bl	80004d8 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fd ff82 	bl	800016c <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f7fe fc2a 	bl	8000ac8 <__aeabi_d2f>
 8002274:	4603      	mov	r3, r0
 8002276:	4a4b      	ldr	r2, [pc, #300]	@ (80023a4 <update_euler_angles+0x2d4>)
 8002278:	6013      	str	r3, [r2, #0]
    pitch = ALPHA * pitch + (1 - ALPHA) * accel_pitch;
 800227a:	4b4d      	ldr	r3, [pc, #308]	@ (80023b0 <update_euler_angles+0x2e0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f8d2 	bl	8000428 <__aeabi_f2d>
 8002284:	a33e      	add	r3, pc, #248	@ (adr r3, 8002380 <update_euler_angles+0x2b0>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe f925 	bl	80004d8 <__aeabi_dmul>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4614      	mov	r4, r2
 8002294:	461d      	mov	r5, r3
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7fe f8c6 	bl	8000428 <__aeabi_f2d>
 800229c:	a33a      	add	r3, pc, #232	@ (adr r3, 8002388 <update_euler_angles+0x2b8>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	f7fe f919 	bl	80004d8 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4620      	mov	r0, r4
 80022ac:	4629      	mov	r1, r5
 80022ae:	f7fd ff5d 	bl	800016c <__adddf3>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe fc05 	bl	8000ac8 <__aeabi_d2f>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a3b      	ldr	r2, [pc, #236]	@ (80023b0 <update_euler_angles+0x2e0>)
 80022c2:	6013      	str	r3, [r2, #0]
    yaw   = ALPHA * (yaw + rate_yaw * DT) + (1 - ALPHA) * yaw;
 80022c4:	4b36      	ldr	r3, [pc, #216]	@ (80023a0 <update_euler_angles+0x2d0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	493b      	ldr	r1, [pc, #236]	@ (80023b8 <update_euler_angles+0x2e8>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fd5a 	bl	8000d84 <__aeabi_fmul>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b39      	ldr	r3, [pc, #228]	@ (80023bc <update_euler_angles+0x2ec>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f7fe fc4a 	bl	8000b74 <__addsf3>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f8a0 	bl	8000428 <__aeabi_f2d>
 80022e8:	a325      	add	r3, pc, #148	@ (adr r3, 8002380 <update_euler_angles+0x2b0>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fe f8f3 	bl	80004d8 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4614      	mov	r4, r2
 80022f8:	461d      	mov	r5, r3
 80022fa:	4b30      	ldr	r3, [pc, #192]	@ (80023bc <update_euler_angles+0x2ec>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f892 	bl	8000428 <__aeabi_f2d>
 8002304:	a320      	add	r3, pc, #128	@ (adr r3, 8002388 <update_euler_angles+0x2b8>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f8e5 	bl	80004d8 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4620      	mov	r0, r4
 8002314:	4629      	mov	r1, r5
 8002316:	f7fd ff29 	bl	800016c <__adddf3>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f7fe fbd1 	bl	8000ac8 <__aeabi_d2f>
 8002326:	4603      	mov	r3, r0
 8002328:	4a24      	ldr	r2, [pc, #144]	@ (80023bc <update_euler_angles+0x2ec>)
 800232a:	6013      	str	r3, [r2, #0]

    printf("Roll: %.2f\tPitch: %.2f\tYaw: %.2f\n", roll, pitch, yaw);
 800232c:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <update_euler_angles+0x2d4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f879 	bl	8000428 <__aeabi_f2d>
 8002336:	4680      	mov	r8, r0
 8002338:	4689      	mov	r9, r1
 800233a:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <update_euler_angles+0x2e0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f872 	bl	8000428 <__aeabi_f2d>
 8002344:	4604      	mov	r4, r0
 8002346:	460d      	mov	r5, r1
 8002348:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <update_euler_angles+0x2ec>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f86b 	bl	8000428 <__aeabi_f2d>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800235a:	e9cd 4500 	strd	r4, r5, [sp]
 800235e:	4642      	mov	r2, r8
 8002360:	464b      	mov	r3, r9
 8002362:	4817      	ldr	r0, [pc, #92]	@ (80023c0 <update_euler_angles+0x2f0>)
 8002364:	f003 fc76 	bl	8005c54 <iprintf>
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002372:	bf00      	nop
 8002374:	f3af 8000 	nop.w
 8002378:	54442d18 	.word	0x54442d18
 800237c:	400921fb 	.word	0x400921fb
 8002380:	5c7618d3 	.word	0x5c7618d3
 8002384:	3fce996d 	.word	0x3fce996d
 8002388:	a8e279cb 	.word	0xa8e279cb
 800238c:	3fe859a4 	.word	0x3fe859a4
 8002390:	43340000 	.word	0x43340000
 8002394:	41833333 	.word	0x41833333
 8002398:	200002c4 	.word	0x200002c4
 800239c:	200002c8 	.word	0x200002c8
 80023a0:	200002cc 	.word	0x200002cc
 80023a4:	200002b0 	.word	0x200002b0
 80023a8:	20000000 	.word	0x20000000
 80023ac:	200002bc 	.word	0x200002bc
 80023b0:	200002b4 	.word	0x200002b4
 80023b4:	200002c0 	.word	0x200002c0
 80023b8:	3d4ccccd 	.word	0x3d4ccccd
 80023bc:	200002b8 	.word	0x200002b8
 80023c0:	080099f0 	.word	0x080099f0

080023c4 <_write>:

/*! @brief variable to hold the bmi160 gyro data */
struct bmi160_sensor_data bmi160_gyro;

int _write(int file, char *ptr, int len)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t*)ptr,len,HAL_MAX_DELAY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	4804      	ldr	r0, [pc, #16]	@ (80023ec <_write+0x28>)
 80023dc:	f002 fb38 	bl	8004a50 <HAL_UART_Transmit>
  return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000268 	.word	0x20000268

080023f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f0:	b5b0      	push	{r4, r5, r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023f6:	f000 fb5f 	bl	8002ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023fa:	f000 f89f 	bl	800253c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023fe:	f000 f93b 	bl	8002678 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002402:	f000 f8e1 	bl	80025c8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002406:	f000 f90d 	bl	8002624 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  int8_t rslt;

  bmi160_soft_reset(&bmi160);
 800240a:	4840      	ldr	r0, [pc, #256]	@ (800250c <main+0x11c>)
 800240c:	f7ff f807 	bl	800141e <bmi160_soft_reset>

  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1U);
 8002410:	2201      	movs	r2, #1
 8002412:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002416:	483e      	ldr	r0, [pc, #248]	@ (8002510 <main+0x120>)
 8002418:	f000 fe3c 	bl	8003094 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800241c:	20c8      	movs	r0, #200	@ 0xc8
 800241e:	f000 fbad 	bl	8002b7c <HAL_Delay>

  bmi160.id = 0x68U;
 8002422:	4b3a      	ldr	r3, [pc, #232]	@ (800250c <main+0x11c>)
 8002424:	2268      	movs	r2, #104	@ 0x68
 8002426:	705a      	strb	r2, [r3, #1]
  bmi160.intf = BMI160_I2C_INTF;
 8002428:	4b38      	ldr	r3, [pc, #224]	@ (800250c <main+0x11c>)
 800242a:	2200      	movs	r2, #0
 800242c:	709a      	strb	r2, [r3, #2]
  bmi160.read = bmi160_read;
 800242e:	4b37      	ldr	r3, [pc, #220]	@ (800250c <main+0x11c>)
 8002430:	4a38      	ldr	r2, [pc, #224]	@ (8002514 <main+0x124>)
 8002432:	61da      	str	r2, [r3, #28]
  bmi160.write = bmi160_write;
 8002434:	4b35      	ldr	r3, [pc, #212]	@ (800250c <main+0x11c>)
 8002436:	4a38      	ldr	r2, [pc, #224]	@ (8002518 <main+0x128>)
 8002438:	621a      	str	r2, [r3, #32]
  bmi160.delay_ms = delay_ms;
 800243a:	4b34      	ldr	r3, [pc, #208]	@ (800250c <main+0x11c>)
 800243c:	4a37      	ldr	r2, [pc, #220]	@ (800251c <main+0x12c>)
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24

  rslt = bmi160_init(&bmi160);
 8002440:	4832      	ldr	r0, [pc, #200]	@ (800250c <main+0x11c>)
 8002442:	f7fe ff9e 	bl	8001382 <bmi160_init>
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]

  if (rslt == BMI160_OK)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <main+0x76>
  {
      printf("BMI160 initialization success !\n");
 8002452:	4833      	ldr	r0, [pc, #204]	@ (8002520 <main+0x130>)
 8002454:	f003 fc66 	bl	8005d24 <puts>
      printf("Chip ID 0x%X\n", bmi160.chip_id);
 8002458:	4b2c      	ldr	r3, [pc, #176]	@ (800250c <main+0x11c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	4831      	ldr	r0, [pc, #196]	@ (8002524 <main+0x134>)
 8002460:	f003 fbf8 	bl	8005c54 <iprintf>
 8002464:	e002      	b.n	800246c <main+0x7c>
  }
  else
  {
      printf("BMI160 initialization failure !\n");
 8002466:	4830      	ldr	r0, [pc, #192]	@ (8002528 <main+0x138>)
 8002468:	f003 fc5c 	bl	8005d24 <puts>
  }

  /* Select the Output data rate, range of accelerometer sensor */
  bmi160.accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <main+0x11c>)
 800246e:	220c      	movs	r2, #12
 8002470:	715a      	strb	r2, [r3, #5]
  bmi160.accel_cfg.range = BMI160_ACCEL_RANGE_16G;
 8002472:	4b26      	ldr	r3, [pc, #152]	@ (800250c <main+0x11c>)
 8002474:	220c      	movs	r2, #12
 8002476:	719a      	strb	r2, [r3, #6]
  bmi160.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <main+0x11c>)
 800247a:	2202      	movs	r2, #2
 800247c:	71da      	strb	r2, [r3, #7]

  /* Select the power mode of accelerometer sensor */
  bmi160.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 800247e:	4b23      	ldr	r3, [pc, #140]	@ (800250c <main+0x11c>)
 8002480:	2211      	movs	r2, #17
 8002482:	711a      	strb	r2, [r3, #4]

  /* Select the Output data rate, range of Gyroscope sensor */
  bmi160.gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
 8002484:	4b21      	ldr	r3, [pc, #132]	@ (800250c <main+0x11c>)
 8002486:	220d      	movs	r2, #13
 8002488:	735a      	strb	r2, [r3, #13]
  bmi160.gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <main+0x11c>)
 800248c:	2200      	movs	r2, #0
 800248e:	739a      	strb	r2, [r3, #14]
  bmi160.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8002490:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <main+0x11c>)
 8002492:	2202      	movs	r2, #2
 8002494:	73da      	strb	r2, [r3, #15]

  /* Select the power mode of Gyroscope sensor */
  bmi160.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8002496:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <main+0x11c>)
 8002498:	2215      	movs	r2, #21
 800249a:	731a      	strb	r2, [r3, #12]

  /* Set the sensor configuration */
  rslt = bmi160_set_power_mode(&bmi160);
 800249c:	481b      	ldr	r0, [pc, #108]	@ (800250c <main+0x11c>)
 800249e:	f7fe fff9 	bl	8001494 <bmi160_set_power_mode>
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]

  if(rslt == BMI160_OK)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <main+0xc6>
  {
	  printf("BMI160 set sens OK\n");
 80024ae:	481f      	ldr	r0, [pc, #124]	@ (800252c <main+0x13c>)
 80024b0:	f003 fc38 	bl	8005d24 <puts>
 80024b4:	e002      	b.n	80024bc <main+0xcc>
  }
  else
  {
      printf("BMI160 set sens ERROR\n");
 80024b6:	481e      	ldr	r0, [pc, #120]	@ (8002530 <main+0x140>)
 80024b8:	f003 fc34 	bl	8005d24 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      /* To read both Accel and Gyro data */
	  rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &bmi160_accel, &bmi160_gyro, &bmi160);
 80024bc:	4b13      	ldr	r3, [pc, #76]	@ (800250c <main+0x11c>)
 80024be:	4a1d      	ldr	r2, [pc, #116]	@ (8002534 <main+0x144>)
 80024c0:	491d      	ldr	r1, [pc, #116]	@ (8002538 <main+0x148>)
 80024c2:	2003      	movs	r0, #3
 80024c4:	f7ff f80a 	bl	80014dc <bmi160_get_sensor_data>
 80024c8:	4603      	mov	r3, r0
 80024ca:	71fb      	strb	r3, [r7, #7]

	  if(rslt == BMI160_OK)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d117      	bne.n	8002504 <main+0x114>
	  {
		  update_euler_angles(bmi160_accel.x, bmi160_accel.y, bmi160_accel.z,\
 80024d4:	4b18      	ldr	r3, [pc, #96]	@ (8002538 <main+0x148>)
 80024d6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80024da:	4b17      	ldr	r3, [pc, #92]	@ (8002538 <main+0x148>)
 80024dc:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80024e0:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <main+0x148>)
 80024e2:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80024e6:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <main+0x144>)
 80024e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <main+0x144>)
 80024ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024f2:	4a10      	ldr	r2, [pc, #64]	@ (8002534 <main+0x144>)
 80024f4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80024f8:	9201      	str	r2, [sp, #4]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	462b      	mov	r3, r5
 80024fe:	4622      	mov	r2, r4
 8002500:	f7ff fde6 	bl	80020d0 <update_euler_angles>
				  bmi160_gyro.x, bmi160_gyro.y, bmi160_gyro.z);

	  }
      HAL_Delay(50);
 8002504:	2032      	movs	r0, #50	@ 0x32
 8002506:	f000 fb39 	bl	8002b7c <HAL_Delay>
	  rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &bmi160_accel, &bmi160_gyro, &bmi160);
 800250a:	e7d7      	b.n	80024bc <main+0xcc>
 800250c:	200002d0 	.word	0x200002d0
 8002510:	40011000 	.word	0x40011000
 8002514:	080011f1 	.word	0x080011f1
 8002518:	080011a9 	.word	0x080011a9
 800251c:	08001241 	.word	0x08001241
 8002520:	08009a14 	.word	0x08009a14
 8002524:	08009a34 	.word	0x08009a34
 8002528:	08009a44 	.word	0x08009a44
 800252c:	08009a64 	.word	0x08009a64
 8002530:	08009a78 	.word	0x08009a78
 8002534:	20000308 	.word	0x20000308
 8002538:	200002fc 	.word	0x200002fc

0800253c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b090      	sub	sp, #64	@ 0x40
 8002540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002542:	f107 0318 	add.w	r3, r7, #24
 8002546:	2228      	movs	r2, #40	@ 0x28
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fcea 	bl	8005f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800256c:	2301      	movs	r3, #1
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002570:	2302      	movs	r3, #2
 8002572:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002578:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800257a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002580:	f107 0318 	add.w	r3, r7, #24
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fe03 	bl	8004190 <HAL_RCC_OscConfig>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002590:	f000 f8ca 	bl	8002728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002594:	230f      	movs	r3, #15
 8002596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002598:	2302      	movs	r3, #2
 800259a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f870 	bl	8004694 <HAL_RCC_ClockConfig>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80025ba:	f000 f8b5 	bl	8002728 <Error_Handler>
  }
}
 80025be:	bf00      	nop
 80025c0:	3740      	adds	r7, #64	@ 0x40
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025cc:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025ce:	4a13      	ldr	r2, [pc, #76]	@ (800261c <MX_I2C1_Init+0x54>)
 80025d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025d4:	4a12      	ldr	r2, [pc, #72]	@ (8002620 <MX_I2C1_Init+0x58>)
 80025d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f8:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <MX_I2C1_Init+0x50>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <MX_I2C1_Init+0x50>)
 8002600:	2200      	movs	r2, #0
 8002602:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002604:	4804      	ldr	r0, [pc, #16]	@ (8002618 <MX_I2C1_Init+0x50>)
 8002606:	f000 fd5d 	bl	80030c4 <HAL_I2C_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002610:	f000 f88a 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000214 	.word	0x20000214
 800261c:	40005400 	.word	0x40005400
 8002620:	000186a0 	.word	0x000186a0

08002624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 800262a:	4a12      	ldr	r2, [pc, #72]	@ (8002674 <MX_USART2_UART_Init+0x50>)
 800262c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 8002630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002636:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800263c:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	@ (8002670 <MX_USART2_UART_Init+0x4c>)
 800265c:	f002 f9a8 	bl	80049b0 <HAL_UART_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002666:	f000 f85f 	bl	8002728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000268 	.word	0x20000268
 8002674:	40004400 	.word	0x40004400

08002678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268c:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <MX_GPIO_Init+0xa8>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a23      	ldr	r2, [pc, #140]	@ (8002720 <MX_GPIO_Init+0xa8>)
 8002692:	f043 0310 	orr.w	r3, r3, #16
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b21      	ldr	r3, [pc, #132]	@ (8002720 <MX_GPIO_Init+0xa8>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002720 <MX_GPIO_Init+0xa8>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002720 <MX_GPIO_Init+0xa8>)
 80026aa:	f043 0320 	orr.w	r3, r3, #32
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <MX_GPIO_Init+0xa8>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026bc:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <MX_GPIO_Init+0xa8>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a17      	ldr	r2, [pc, #92]	@ (8002720 <MX_GPIO_Init+0xa8>)
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <MX_GPIO_Init+0xa8>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d4:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <MX_GPIO_Init+0xa8>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a11      	ldr	r2, [pc, #68]	@ (8002720 <MX_GPIO_Init+0xa8>)
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <MX_GPIO_Init+0xa8>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80026ec:	2201      	movs	r2, #1
 80026ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026f2:	480c      	ldr	r0, [pc, #48]	@ (8002724 <MX_GPIO_Init+0xac>)
 80026f4:	f000 fcce 	bl	8003094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80026f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fe:	2301      	movs	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2302      	movs	r3, #2
 8002708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	4619      	mov	r1, r3
 8002710:	4804      	ldr	r0, [pc, #16]	@ (8002724 <MX_GPIO_Init+0xac>)
 8002712:	f000 fb3b 	bl	8002d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002716:	bf00      	nop
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	40011000 	.word	0x40011000

08002728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800272c:	b672      	cpsid	i
}
 800272e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error handler\n");
 8002730:	4804      	ldr	r0, [pc, #16]	@ (8002744 <Error_Handler+0x1c>)
 8002732:	f003 faf7 	bl	8005d24 <puts>
	  HAL_Delay(1000);
 8002736:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800273a:	f000 fa1f 	bl	8002b7c <HAL_Delay>
	  printf("error handler\n");
 800273e:	bf00      	nop
 8002740:	e7f6      	b.n	8002730 <Error_Handler+0x8>
 8002742:	bf00      	nop
 8002744:	08009a90 	.word	0x08009a90

08002748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <HAL_MspInit+0x5c>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4a14      	ldr	r2, [pc, #80]	@ (80027a4 <HAL_MspInit+0x5c>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6193      	str	r3, [r2, #24]
 800275a:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_MspInit+0x5c>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <HAL_MspInit+0x5c>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4a0e      	ldr	r2, [pc, #56]	@ (80027a4 <HAL_MspInit+0x5c>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002770:	61d3      	str	r3, [r2, #28]
 8002772:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <HAL_MspInit+0x5c>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800277e:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <HAL_MspInit+0x60>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <HAL_MspInit+0x60>)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010000 	.word	0x40010000

080027ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0310 	add.w	r3, r7, #16
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a15      	ldr	r2, [pc, #84]	@ (800281c <HAL_I2C_MspInit+0x70>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d123      	bne.n	8002814 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027cc:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <HAL_I2C_MspInit+0x74>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <HAL_I2C_MspInit+0x74>)
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_I2C_MspInit+0x74>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BMI160_SCL_Pin|BMI160_SDA_Pin;
 80027e4:	23c0      	movs	r3, #192	@ 0xc0
 80027e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e8:	2312      	movs	r3, #18
 80027ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	4619      	mov	r1, r3
 80027f6:	480b      	ldr	r0, [pc, #44]	@ (8002824 <HAL_I2C_MspInit+0x78>)
 80027f8:	f000 fac8 	bl	8002d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_I2C_MspInit+0x74>)
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	4a07      	ldr	r2, [pc, #28]	@ (8002820 <HAL_I2C_MspInit+0x74>)
 8002802:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002806:	61d3      	str	r3, [r2, #28]
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <HAL_I2C_MspInit+0x74>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002814:	bf00      	nop
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40005400 	.word	0x40005400
 8002820:	40021000 	.word	0x40021000
 8002824:	40010c00 	.word	0x40010c00

08002828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <HAL_UART_MspInit+0x88>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d12f      	bne.n	80028a8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002848:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <HAL_UART_MspInit+0x8c>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_UART_MspInit+0x8c>)
 800284e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002852:	61d3      	str	r3, [r2, #28]
 8002854:	4b17      	ldr	r3, [pc, #92]	@ (80028b4 <HAL_UART_MspInit+0x8c>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002860:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <HAL_UART_MspInit+0x8c>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <HAL_UART_MspInit+0x8c>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	6193      	str	r3, [r2, #24]
 800286c:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <HAL_UART_MspInit+0x8c>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002878:	2304      	movs	r3, #4
 800287a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	4619      	mov	r1, r3
 800288a:	480b      	ldr	r0, [pc, #44]	@ (80028b8 <HAL_UART_MspInit+0x90>)
 800288c:	f000 fa7e 	bl	8002d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002890:	2308      	movs	r3, #8
 8002892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4619      	mov	r1, r3
 80028a2:	4805      	ldr	r0, [pc, #20]	@ (80028b8 <HAL_UART_MspInit+0x90>)
 80028a4:	f000 fa72 	bl	8002d8c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80028a8:	bf00      	nop
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40004400 	.word	0x40004400
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40010800 	.word	0x40010800

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <NMI_Handler+0x4>

080028c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <HardFault_Handler+0x4>

080028cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <MemManage_Handler+0x4>

080028d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <BusFault_Handler+0x4>

080028dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <UsageFault_Handler+0x4>

080028e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800290c:	f000 f91a 	bl	8002b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}

08002914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return 1;
 8002918:	2301      	movs	r3, #1
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <_kill>:

int _kill(int pid, int sig)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800292c:	f003 fb4c 	bl	8005fc8 <__errno>
 8002930:	4603      	mov	r3, r0
 8002932:	2216      	movs	r2, #22
 8002934:	601a      	str	r2, [r3, #0]
  return -1;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_exit>:

void _exit (int status)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800294a:	f04f 31ff 	mov.w	r1, #4294967295
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffe7 	bl	8002922 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <_exit+0x12>

08002958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e00a      	b.n	8002980 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800296a:	f3af 8000 	nop.w
 800296e:	4601      	mov	r1, r0
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	60ba      	str	r2, [r7, #8]
 8002976:	b2ca      	uxtb	r2, r1
 8002978:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3301      	adds	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	dbf0      	blt.n	800296a <_read+0x12>
  }

  return len;
 8002988:	687b      	ldr	r3, [r7, #4]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029b8:	605a      	str	r2, [r3, #4]
  return 0;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <_isatty>:

int _isatty(int file)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029ce:	2301      	movs	r3, #1
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
	...

080029f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029fc:	4a14      	ldr	r2, [pc, #80]	@ (8002a50 <_sbrk+0x5c>)
 80029fe:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <_sbrk+0x60>)
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a08:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <_sbrk+0x64>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a10:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <_sbrk+0x64>)
 8002a12:	4a12      	ldr	r2, [pc, #72]	@ (8002a5c <_sbrk+0x68>)
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a16:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <_sbrk+0x64>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d207      	bcs.n	8002a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a24:	f003 fad0 	bl	8005fc8 <__errno>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a32:	e009      	b.n	8002a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a34:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a3a:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <_sbrk+0x64>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	4a05      	ldr	r2, [pc, #20]	@ (8002a58 <_sbrk+0x64>)
 8002a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a46:	68fb      	ldr	r3, [r7, #12]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20005000 	.word	0x20005000
 8002a54:	00000400 	.word	0x00000400
 8002a58:	20000314 	.word	0x20000314
 8002a5c:	20000468 	.word	0x20000468

08002a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a6c:	f7ff fff8 	bl	8002a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a70:	480b      	ldr	r0, [pc, #44]	@ (8002aa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a72:	490c      	ldr	r1, [pc, #48]	@ (8002aa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a74:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a78:	e002      	b.n	8002a80 <LoopCopyDataInit>

08002a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a7e:	3304      	adds	r3, #4

08002a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a84:	d3f9      	bcc.n	8002a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a86:	4a09      	ldr	r2, [pc, #36]	@ (8002aac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a88:	4c09      	ldr	r4, [pc, #36]	@ (8002ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a8c:	e001      	b.n	8002a92 <LoopFillZerobss>

08002a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a90:	3204      	adds	r2, #4

08002a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a94:	d3fb      	bcc.n	8002a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a96:	f003 fa9d 	bl	8005fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a9a:	f7ff fca9 	bl	80023f0 <main>
  bx lr
 8002a9e:	4770      	bx	lr
  ldr r0, =_sdata
 8002aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002aa8:	08009f40 	.word	0x08009f40
  ldr r2, =_sbss
 8002aac:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002ab0:	20000468 	.word	0x20000468

08002ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ab4:	e7fe      	b.n	8002ab4 <ADC1_2_IRQHandler>
	...

08002ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002abc:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <HAL_Init+0x28>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a07      	ldr	r2, [pc, #28]	@ (8002ae0 <HAL_Init+0x28>)
 8002ac2:	f043 0310 	orr.w	r3, r3, #16
 8002ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f000 f92b 	bl	8002d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ace:	200f      	movs	r0, #15
 8002ad0:	f000 f808 	bl	8002ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad4:	f7ff fe38 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40022000 	.word	0x40022000

08002ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aec:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <HAL_InitTick+0x54>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <HAL_InitTick+0x58>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f935 	bl	8002d72 <HAL_SYSTICK_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00e      	b.n	8002b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d80a      	bhi.n	8002b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	f000 f90b 	bl	8002d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b24:	4a06      	ldr	r2, [pc, #24]	@ (8002b40 <HAL_InitTick+0x5c>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000001c 	.word	0x2000001c
 8002b3c:	20000024 	.word	0x20000024
 8002b40:	20000020 	.word	0x20000020

08002b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_IncTick+0x1c>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_IncTick+0x20>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4413      	add	r3, r2
 8002b54:	4a03      	ldr	r2, [pc, #12]	@ (8002b64 <HAL_IncTick+0x20>)
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	20000024 	.word	0x20000024
 8002b64:	20000318 	.word	0x20000318

08002b68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b6c:	4b02      	ldr	r3, [pc, #8]	@ (8002b78 <HAL_GetTick+0x10>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	20000318 	.word	0x20000318

08002b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b84:	f7ff fff0 	bl	8002b68 <HAL_GetTick>
 8002b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d005      	beq.n	8002ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b96:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <HAL_Delay+0x44>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ba2:	bf00      	nop
 8002ba4:	f7ff ffe0 	bl	8002b68 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d8f7      	bhi.n	8002ba4 <HAL_Delay+0x28>
  {
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000024 	.word	0x20000024

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	@ (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	@ (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	@ (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	@ 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf0:	d301      	bcc.n	8002cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00f      	b.n	8002d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <SysTick_Config+0x40>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfe:	210f      	movs	r1, #15
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	f7ff ff90 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d08:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <SysTick_Config+0x40>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0e:	4b04      	ldr	r3, [pc, #16]	@ (8002d20 <SysTick_Config+0x40>)
 8002d10:	2207      	movs	r2, #7
 8002d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	e000e010 	.word	0xe000e010

08002d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ff49 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d4c:	f7ff ff5e 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f7ff ff90 	bl	8002c7c <NVIC_EncodePriority>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff5f 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d6a:	bf00      	nop
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ffb0 	bl	8002ce0 <SysTick_Config>
 8002d80:	4603      	mov	r3, r0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b08b      	sub	sp, #44	@ 0x2c
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9e:	e169      	b.n	8003074 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002da0:	2201      	movs	r2, #1
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	f040 8158 	bne.w	800306e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a9a      	ldr	r2, [pc, #616]	@ (800302c <HAL_GPIO_Init+0x2a0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d05e      	beq.n	8002e86 <HAL_GPIO_Init+0xfa>
 8002dc8:	4a98      	ldr	r2, [pc, #608]	@ (800302c <HAL_GPIO_Init+0x2a0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d875      	bhi.n	8002eba <HAL_GPIO_Init+0x12e>
 8002dce:	4a98      	ldr	r2, [pc, #608]	@ (8003030 <HAL_GPIO_Init+0x2a4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d058      	beq.n	8002e86 <HAL_GPIO_Init+0xfa>
 8002dd4:	4a96      	ldr	r2, [pc, #600]	@ (8003030 <HAL_GPIO_Init+0x2a4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d86f      	bhi.n	8002eba <HAL_GPIO_Init+0x12e>
 8002dda:	4a96      	ldr	r2, [pc, #600]	@ (8003034 <HAL_GPIO_Init+0x2a8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d052      	beq.n	8002e86 <HAL_GPIO_Init+0xfa>
 8002de0:	4a94      	ldr	r2, [pc, #592]	@ (8003034 <HAL_GPIO_Init+0x2a8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d869      	bhi.n	8002eba <HAL_GPIO_Init+0x12e>
 8002de6:	4a94      	ldr	r2, [pc, #592]	@ (8003038 <HAL_GPIO_Init+0x2ac>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04c      	beq.n	8002e86 <HAL_GPIO_Init+0xfa>
 8002dec:	4a92      	ldr	r2, [pc, #584]	@ (8003038 <HAL_GPIO_Init+0x2ac>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d863      	bhi.n	8002eba <HAL_GPIO_Init+0x12e>
 8002df2:	4a92      	ldr	r2, [pc, #584]	@ (800303c <HAL_GPIO_Init+0x2b0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d046      	beq.n	8002e86 <HAL_GPIO_Init+0xfa>
 8002df8:	4a90      	ldr	r2, [pc, #576]	@ (800303c <HAL_GPIO_Init+0x2b0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d85d      	bhi.n	8002eba <HAL_GPIO_Init+0x12e>
 8002dfe:	2b12      	cmp	r3, #18
 8002e00:	d82a      	bhi.n	8002e58 <HAL_GPIO_Init+0xcc>
 8002e02:	2b12      	cmp	r3, #18
 8002e04:	d859      	bhi.n	8002eba <HAL_GPIO_Init+0x12e>
 8002e06:	a201      	add	r2, pc, #4	@ (adr r2, 8002e0c <HAL_GPIO_Init+0x80>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e87 	.word	0x08002e87
 8002e10:	08002e61 	.word	0x08002e61
 8002e14:	08002e73 	.word	0x08002e73
 8002e18:	08002eb5 	.word	0x08002eb5
 8002e1c:	08002ebb 	.word	0x08002ebb
 8002e20:	08002ebb 	.word	0x08002ebb
 8002e24:	08002ebb 	.word	0x08002ebb
 8002e28:	08002ebb 	.word	0x08002ebb
 8002e2c:	08002ebb 	.word	0x08002ebb
 8002e30:	08002ebb 	.word	0x08002ebb
 8002e34:	08002ebb 	.word	0x08002ebb
 8002e38:	08002ebb 	.word	0x08002ebb
 8002e3c:	08002ebb 	.word	0x08002ebb
 8002e40:	08002ebb 	.word	0x08002ebb
 8002e44:	08002ebb 	.word	0x08002ebb
 8002e48:	08002ebb 	.word	0x08002ebb
 8002e4c:	08002ebb 	.word	0x08002ebb
 8002e50:	08002e69 	.word	0x08002e69
 8002e54:	08002e7d 	.word	0x08002e7d
 8002e58:	4a79      	ldr	r2, [pc, #484]	@ (8003040 <HAL_GPIO_Init+0x2b4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e5e:	e02c      	b.n	8002eba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	623b      	str	r3, [r7, #32]
          break;
 8002e66:	e029      	b.n	8002ebc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	623b      	str	r3, [r7, #32]
          break;
 8002e70:	e024      	b.n	8002ebc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	3308      	adds	r3, #8
 8002e78:	623b      	str	r3, [r7, #32]
          break;
 8002e7a:	e01f      	b.n	8002ebc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	330c      	adds	r3, #12
 8002e82:	623b      	str	r3, [r7, #32]
          break;
 8002e84:	e01a      	b.n	8002ebc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d102      	bne.n	8002e94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e8e:	2304      	movs	r3, #4
 8002e90:	623b      	str	r3, [r7, #32]
          break;
 8002e92:	e013      	b.n	8002ebc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	611a      	str	r2, [r3, #16]
          break;
 8002ea6:	e009      	b.n	8002ebc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea8:	2308      	movs	r3, #8
 8002eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	615a      	str	r2, [r3, #20]
          break;
 8002eb2:	e003      	b.n	8002ebc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	623b      	str	r3, [r7, #32]
          break;
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_Init+0x130>
          break;
 8002eba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2bff      	cmp	r3, #255	@ 0xff
 8002ec0:	d801      	bhi.n	8002ec6 <HAL_GPIO_Init+0x13a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	e001      	b.n	8002eca <HAL_GPIO_Init+0x13e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2bff      	cmp	r3, #255	@ 0xff
 8002ed0:	d802      	bhi.n	8002ed8 <HAL_GPIO_Init+0x14c>
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	e002      	b.n	8002ede <HAL_GPIO_Init+0x152>
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	3b08      	subs	r3, #8
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	210f      	movs	r1, #15
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	401a      	ands	r2, r3
 8002ef0:	6a39      	ldr	r1, [r7, #32]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80b1 	beq.w	800306e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003044 <HAL_GPIO_Init+0x2b8>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	4a4c      	ldr	r2, [pc, #304]	@ (8003044 <HAL_GPIO_Init+0x2b8>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6193      	str	r3, [r2, #24]
 8002f18:	4b4a      	ldr	r3, [pc, #296]	@ (8003044 <HAL_GPIO_Init+0x2b8>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f24:	4a48      	ldr	r2, [pc, #288]	@ (8003048 <HAL_GPIO_Init+0x2bc>)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a40      	ldr	r2, [pc, #256]	@ (800304c <HAL_GPIO_Init+0x2c0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d013      	beq.n	8002f78 <HAL_GPIO_Init+0x1ec>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a3f      	ldr	r2, [pc, #252]	@ (8003050 <HAL_GPIO_Init+0x2c4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00d      	beq.n	8002f74 <HAL_GPIO_Init+0x1e8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8003054 <HAL_GPIO_Init+0x2c8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d007      	beq.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3d      	ldr	r2, [pc, #244]	@ (8003058 <HAL_GPIO_Init+0x2cc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_GPIO_Init+0x1e0>
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e006      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	e004      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e002      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7c:	f002 0203 	and.w	r2, r2, #3
 8002f80:	0092      	lsls	r2, r2, #2
 8002f82:	4093      	lsls	r3, r2
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f8a:	492f      	ldr	r1, [pc, #188]	@ (8003048 <HAL_GPIO_Init+0x2bc>)
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	3302      	adds	r3, #2
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	492c      	ldr	r1, [pc, #176]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]
 8002fb0:	e006      	b.n	8002fc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	4928      	ldr	r1, [pc, #160]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d006      	beq.n	8002fda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fcc:	4b23      	ldr	r3, [pc, #140]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	4922      	ldr	r1, [pc, #136]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60cb      	str	r3, [r1, #12]
 8002fd8:	e006      	b.n	8002fe8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fda:	4b20      	ldr	r3, [pc, #128]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	491e      	ldr	r1, [pc, #120]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d006      	beq.n	8003002 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ff4:	4b19      	ldr	r3, [pc, #100]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4918      	ldr	r1, [pc, #96]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
 8003000:	e006      	b.n	8003010 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003002:	4b16      	ldr	r3, [pc, #88]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	43db      	mvns	r3, r3
 800300a:	4914      	ldr	r1, [pc, #80]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 800300c:	4013      	ands	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d021      	beq.n	8003060 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800301c:	4b0f      	ldr	r3, [pc, #60]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	490e      	ldr	r1, [pc, #56]	@ (800305c <HAL_GPIO_Init+0x2d0>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]
 8003028:	e021      	b.n	800306e <HAL_GPIO_Init+0x2e2>
 800302a:	bf00      	nop
 800302c:	10320000 	.word	0x10320000
 8003030:	10310000 	.word	0x10310000
 8003034:	10220000 	.word	0x10220000
 8003038:	10210000 	.word	0x10210000
 800303c:	10120000 	.word	0x10120000
 8003040:	10110000 	.word	0x10110000
 8003044:	40021000 	.word	0x40021000
 8003048:	40010000 	.word	0x40010000
 800304c:	40010800 	.word	0x40010800
 8003050:	40010c00 	.word	0x40010c00
 8003054:	40011000 	.word	0x40011000
 8003058:	40011400 	.word	0x40011400
 800305c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_GPIO_Init+0x304>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	43db      	mvns	r3, r3
 8003068:	4909      	ldr	r1, [pc, #36]	@ (8003090 <HAL_GPIO_Init+0x304>)
 800306a:	4013      	ands	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	3301      	adds	r3, #1
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	f47f ae8e 	bne.w	8002da0 <HAL_GPIO_Init+0x14>
  }
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	372c      	adds	r7, #44	@ 0x2c
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	40010400 	.word	0x40010400

08003094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
 80030a0:	4613      	mov	r3, r2
 80030a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030a4:	787b      	ldrb	r3, [r7, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030b0:	e003      	b.n	80030ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030b2:	887b      	ldrh	r3, [r7, #2]
 80030b4:	041a      	lsls	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	611a      	str	r2, [r3, #16]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e12b      	b.n	800332e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff fb5e 	bl	80027ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	@ 0x24
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003128:	f001 fbfc 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a81      	ldr	r2, [pc, #516]	@ (8003338 <HAL_I2C_Init+0x274>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d807      	bhi.n	8003148 <HAL_I2C_Init+0x84>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a80      	ldr	r2, [pc, #512]	@ (800333c <HAL_I2C_Init+0x278>)
 800313c:	4293      	cmp	r3, r2
 800313e:	bf94      	ite	ls
 8003140:	2301      	movls	r3, #1
 8003142:	2300      	movhi	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e006      	b.n	8003156 <HAL_I2C_Init+0x92>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a7d      	ldr	r2, [pc, #500]	@ (8003340 <HAL_I2C_Init+0x27c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0e7      	b.n	800332e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a78      	ldr	r2, [pc, #480]	@ (8003344 <HAL_I2C_Init+0x280>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0c9b      	lsrs	r3, r3, #18
 8003168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a6a      	ldr	r2, [pc, #424]	@ (8003338 <HAL_I2C_Init+0x274>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d802      	bhi.n	8003198 <HAL_I2C_Init+0xd4>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3301      	adds	r3, #1
 8003196:	e009      	b.n	80031ac <HAL_I2C_Init+0xe8>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	4a69      	ldr	r2, [pc, #420]	@ (8003348 <HAL_I2C_Init+0x284>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	3301      	adds	r3, #1
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	495c      	ldr	r1, [pc, #368]	@ (8003338 <HAL_I2C_Init+0x274>)
 80031c8:	428b      	cmp	r3, r1
 80031ca:	d819      	bhi.n	8003200 <HAL_I2C_Init+0x13c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e59      	subs	r1, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031e0:	400b      	ands	r3, r1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_I2C_Init+0x138>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1e59      	subs	r1, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fa:	e051      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 80031fc:	2304      	movs	r3, #4
 80031fe:	e04f      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d111      	bne.n	800322c <HAL_I2C_Init+0x168>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1e58      	subs	r0, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	440b      	add	r3, r1
 8003216:	fbb0 f3f3 	udiv	r3, r0, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e012      	b.n	8003252 <HAL_I2C_Init+0x18e>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e58      	subs	r0, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	0099      	lsls	r1, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Init+0x196>
 8003256:	2301      	movs	r3, #1
 8003258:	e022      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10e      	bne.n	8003280 <HAL_I2C_Init+0x1bc>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1e58      	subs	r0, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	440b      	add	r3, r1
 8003270:	fbb0 f3f3 	udiv	r3, r0, r3
 8003274:	3301      	adds	r3, #1
 8003276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800327e:	e00f      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e58      	subs	r0, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	0099      	lsls	r1, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	fbb0 f3f3 	udiv	r3, r0, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	6809      	ldr	r1, [r1, #0]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6911      	ldr	r1, [r2, #16]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68d2      	ldr	r2, [r2, #12]
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	000186a0 	.word	0x000186a0
 800333c:	001e847f 	.word	0x001e847f
 8003340:	003d08ff 	.word	0x003d08ff
 8003344:	431bde83 	.word	0x431bde83
 8003348:	10624dd3 	.word	0x10624dd3

0800334c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	817b      	strh	r3, [r7, #10]
 800335e:	460b      	mov	r3, r1
 8003360:	813b      	strh	r3, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003366:	f7ff fbff 	bl	8002b68 <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b20      	cmp	r3, #32
 8003376:	f040 80d9 	bne.w	800352c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2319      	movs	r3, #25
 8003380:	2201      	movs	r2, #1
 8003382:	496d      	ldr	r1, [pc, #436]	@ (8003538 <HAL_I2C_Mem_Write+0x1ec>)
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fccd 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
 8003392:	e0cc      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_I2C_Mem_Write+0x56>
 800339e:	2302      	movs	r3, #2
 80033a0:	e0c5      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d007      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2221      	movs	r2, #33	@ 0x21
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2240      	movs	r2, #64	@ 0x40
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a4d      	ldr	r2, [pc, #308]	@ (800353c <HAL_I2C_Mem_Write+0x1f0>)
 8003408:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800340a:	88f8      	ldrh	r0, [r7, #6]
 800340c:	893a      	ldrh	r2, [r7, #8]
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	4603      	mov	r3, r0
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fb04 	bl	8003a28 <I2C_RequestMemoryWrite>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d052      	beq.n	80034cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e081      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fd92 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	2b04      	cmp	r3, #4
 8003440:	d107      	bne.n	8003452 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003450:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e06b      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b04      	cmp	r3, #4
 8003492:	d11b      	bne.n	80034cc <HAL_I2C_Mem_Write+0x180>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	d017      	beq.n	80034cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1aa      	bne.n	800342a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 fd85 	bl	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d107      	bne.n	80034fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e016      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	00100002 	.word	0x00100002
 800353c:	ffff0000 	.word	0xffff0000

08003540 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08c      	sub	sp, #48	@ 0x30
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	4608      	mov	r0, r1
 800354a:	4611      	mov	r1, r2
 800354c:	461a      	mov	r2, r3
 800354e:	4603      	mov	r3, r0
 8003550:	817b      	strh	r3, [r7, #10]
 8003552:	460b      	mov	r3, r1
 8003554:	813b      	strh	r3, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800355e:	f7ff fb03 	bl	8002b68 <HAL_GetTick>
 8003562:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	f040 8250 	bne.w	8003a12 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2319      	movs	r3, #25
 8003578:	2201      	movs	r2, #1
 800357a:	4982      	ldr	r1, [pc, #520]	@ (8003784 <HAL_I2C_Mem_Read+0x244>)
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fbd1 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
 800358a:	e243      	b.n	8003a14 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_I2C_Mem_Read+0x5a>
 8003596:	2302      	movs	r3, #2
 8003598:	e23c      	b.n	8003a14 <HAL_I2C_Mem_Read+0x4d4>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d007      	beq.n	80035c0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2222      	movs	r2, #34	@ 0x22
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2240      	movs	r2, #64	@ 0x40
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a62      	ldr	r2, [pc, #392]	@ (8003788 <HAL_I2C_Mem_Read+0x248>)
 8003600:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003602:	88f8      	ldrh	r0, [r7, #6]
 8003604:	893a      	ldrh	r2, [r7, #8]
 8003606:	8979      	ldrh	r1, [r7, #10]
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4603      	mov	r3, r0
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa9e 	bl	8003b54 <I2C_RequestMemoryRead>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e1f8      	b.n	8003a14 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d113      	bne.n	8003652 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e1cc      	b.n	80039ec <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003656:	2b01      	cmp	r3, #1
 8003658:	d11e      	bne.n	8003698 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003668:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800366a:	b672      	cpsid	i
}
 800366c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003692:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003694:	b662      	cpsie	i
}
 8003696:	e035      	b.n	8003704 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369c:	2b02      	cmp	r3, #2
 800369e:	d11e      	bne.n	80036de <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036b0:	b672      	cpsid	i
}
 80036b2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036da:	b662      	cpsie	i
}
 80036dc:	e012      	b.n	8003704 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036ec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003704:	e172      	b.n	80039ec <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370a:	2b03      	cmp	r3, #3
 800370c:	f200 811f 	bhi.w	800394e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	2b01      	cmp	r3, #1
 8003716:	d123      	bne.n	8003760 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fcab 	bl	8004078 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e173      	b.n	8003a14 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800375e:	e145      	b.n	80039ec <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003764:	2b02      	cmp	r3, #2
 8003766:	d152      	bne.n	800380e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376e:	2200      	movs	r2, #0
 8003770:	4906      	ldr	r1, [pc, #24]	@ (800378c <HAL_I2C_Mem_Read+0x24c>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fad6 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e148      	b.n	8003a14 <HAL_I2C_Mem_Read+0x4d4>
 8003782:	bf00      	nop
 8003784:	00100002 	.word	0x00100002
 8003788:	ffff0000 	.word	0xffff0000
 800378c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003790:	b672      	cpsid	i
}
 8003792:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037d6:	b662      	cpsie	i
}
 80037d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800380c:	e0ee      	b.n	80039ec <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003814:	2200      	movs	r2, #0
 8003816:	4981      	ldr	r1, [pc, #516]	@ (8003a1c <HAL_I2C_Mem_Read+0x4dc>)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fa83 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0f5      	b.n	8003a14 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003836:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003838:	b672      	cpsid	i
}
 800383a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800386e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a20 <HAL_I2C_Mem_Read+0x4e0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	08db      	lsrs	r3, r3, #3
 8003874:	4a6b      	ldr	r2, [pc, #428]	@ (8003a24 <HAL_I2C_Mem_Read+0x4e4>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	0a1a      	lsrs	r2, r3, #8
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00da      	lsls	r2, r3, #3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	3b01      	subs	r3, #1
 800388c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d118      	bne.n	80038c6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	f043 0220 	orr.w	r2, r3, #32
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80038b6:	b662      	cpsie	i
}
 80038b8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0a6      	b.n	8003a14 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d1d9      	bne.n	8003888 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003916:	b662      	cpsie	i
}
 8003918:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800394c:	e04e      	b.n	80039ec <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003950:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fb90 	bl	8004078 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e058      	b.n	8003a14 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d124      	bne.n	80039ec <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d107      	bne.n	80039ba <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f47f ae88 	bne.w	8003706 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
  }
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3728      	adds	r7, #40	@ 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	00010004 	.word	0x00010004
 8003a20:	2000001c 	.word	0x2000001c
 8003a24:	14f8b589 	.word	0x14f8b589

08003a28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	4608      	mov	r0, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	817b      	strh	r3, [r7, #10]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	813b      	strh	r3, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f960 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00d      	beq.n	8003a86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a78:	d103      	bne.n	8003a82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e05f      	b.n	8003b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a86:	897b      	ldrh	r3, [r7, #10]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	6a3a      	ldr	r2, [r7, #32]
 8003a9a:	492d      	ldr	r1, [pc, #180]	@ (8003b50 <I2C_RequestMemoryWrite+0x128>)
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f9bb 	bl	8003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e04c      	b.n	8003b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac4:	6a39      	ldr	r1, [r7, #32]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fa46 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d107      	bne.n	8003aea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e02b      	b.n	8003b46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003af4:	893b      	ldrh	r3, [r7, #8]
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	611a      	str	r2, [r3, #16]
 8003afe:	e021      	b.n	8003b44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b00:	893b      	ldrh	r3, [r7, #8]
 8003b02:	0a1b      	lsrs	r3, r3, #8
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b10:	6a39      	ldr	r1, [r7, #32]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fa20 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d107      	bne.n	8003b36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e005      	b.n	8003b46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b3a:	893b      	ldrh	r3, [r7, #8]
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	00010002 	.word	0x00010002

08003b54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	817b      	strh	r3, [r7, #10]
 8003b66:	460b      	mov	r3, r1
 8003b68:	813b      	strh	r3, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f8c2 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00d      	beq.n	8003bc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb4:	d103      	bne.n	8003bbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0aa      	b.n	8003d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bc2:	897b      	ldrh	r3, [r7, #10]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	4952      	ldr	r1, [pc, #328]	@ (8003d20 <I2C_RequestMemoryRead+0x1cc>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f91d 	bl	8003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e097      	b.n	8003d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c00:	6a39      	ldr	r1, [r7, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f9a8 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d107      	bne.n	8003c26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e076      	b.n	8003d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	e021      	b.n	8003c80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4c:	6a39      	ldr	r1, [r7, #32]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f982 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00d      	beq.n	8003c76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d107      	bne.n	8003c72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e050      	b.n	8003d18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c76:	893b      	ldrh	r3, [r7, #8]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c82:	6a39      	ldr	r1, [r7, #32]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f967 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00d      	beq.n	8003cac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d107      	bne.n	8003ca8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e035      	b.n	8003d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f82b 	bl	8003d24 <I2C_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00d      	beq.n	8003cf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce2:	d103      	bne.n	8003cec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e013      	b.n	8003d18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cf0:	897b      	ldrh	r3, [r7, #10]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	6a3a      	ldr	r2, [r7, #32]
 8003d04:	4906      	ldr	r1, [pc, #24]	@ (8003d20 <I2C_RequestMemoryRead+0x1cc>)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f886 	bl	8003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	00010002 	.word	0x00010002

08003d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d34:	e048      	b.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d044      	beq.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fe ff13 	bl	8002b68 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d139      	bne.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d10d      	bne.n	8003d7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	e00c      	b.n	8003d94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	43da      	mvns	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4013      	ands	r3, r2
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d116      	bne.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e023      	b.n	8003e10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	0c1b      	lsrs	r3, r3, #16
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d10d      	bne.n	8003dee <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	43da      	mvns	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	e00c      	b.n	8003e08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	43da      	mvns	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d093      	beq.n	8003d36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e26:	e071      	b.n	8003f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e36:	d123      	bne.n	8003e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e067      	b.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d041      	beq.n	8003f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e88:	f7fe fe6e 	bl	8002b68 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d136      	bne.n	8003f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10c      	bne.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf14      	ite	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	e00b      	b.n	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	43da      	mvns	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf14      	ite	ne
 8003ed4:	2301      	movne	r3, #1
 8003ed6:	2300      	moveq	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d016      	beq.n	8003f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e021      	b.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	0c1b      	lsrs	r3, r3, #16
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d10c      	bne.n	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4013      	ands	r3, r2
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf14      	ite	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	2300      	moveq	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	e00b      	b.n	8003f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	43da      	mvns	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf14      	ite	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	2300      	moveq	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f47f af6d 	bne.w	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f64:	e034      	b.n	8003fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f8e3 	bl	8004132 <I2C_IsAcknowledgeFailed>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e034      	b.n	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d028      	beq.n	8003fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fe fdf3 	bl	8002b68 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11d      	bne.n	8003fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9e:	2b80      	cmp	r3, #128	@ 0x80
 8003fa0:	d016      	beq.n	8003fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	f043 0220 	orr.w	r2, r3, #32
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e007      	b.n	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fda:	2b80      	cmp	r3, #128	@ 0x80
 8003fdc:	d1c3      	bne.n	8003f66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff4:	e034      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f89b 	bl	8004132 <I2C_IsAcknowledgeFailed>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e034      	b.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d028      	beq.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fe fdab 	bl	8002b68 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11d      	bne.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b04      	cmp	r3, #4
 8004030:	d016      	beq.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	f043 0220 	orr.w	r2, r3, #32
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e007      	b.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b04      	cmp	r3, #4
 800406c:	d1c3      	bne.n	8003ff6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004084:	e049      	b.n	800411a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b10      	cmp	r3, #16
 8004092:	d119      	bne.n	80040c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0210 	mvn.w	r2, #16
 800409c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e030      	b.n	800412a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7fe fd4e 	bl	8002b68 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d11d      	bne.n	800411a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e8:	2b40      	cmp	r3, #64	@ 0x40
 80040ea:	d016      	beq.n	800411a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e007      	b.n	800412a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004124:	2b40      	cmp	r3, #64	@ 0x40
 8004126:	d1ae      	bne.n	8004086 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004148:	d11b      	bne.n	8004182 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004152:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f043 0204 	orr.w	r2, r3, #4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr
	...

08004190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e272      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8087 	beq.w	80042be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b0:	4b92      	ldr	r3, [pc, #584]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d00c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041bc:	4b8f      	ldr	r3, [pc, #572]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d112      	bne.n	80041ee <HAL_RCC_OscConfig+0x5e>
 80041c8:	4b8c      	ldr	r3, [pc, #560]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d4:	d10b      	bne.n	80041ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d6:	4b89      	ldr	r3, [pc, #548]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d06c      	beq.n	80042bc <HAL_RCC_OscConfig+0x12c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d168      	bne.n	80042bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e24c      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f6:	d106      	bne.n	8004206 <HAL_RCC_OscConfig+0x76>
 80041f8:	4b80      	ldr	r3, [pc, #512]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a7f      	ldr	r2, [pc, #508]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e02e      	b.n	8004264 <HAL_RCC_OscConfig+0xd4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x98>
 800420e:	4b7b      	ldr	r3, [pc, #492]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a7a      	ldr	r2, [pc, #488]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b78      	ldr	r3, [pc, #480]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a77      	ldr	r2, [pc, #476]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004220:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e01d      	b.n	8004264 <HAL_RCC_OscConfig+0xd4>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0xbc>
 8004232:	4b72      	ldr	r3, [pc, #456]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a71      	ldr	r2, [pc, #452]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b6f      	ldr	r3, [pc, #444]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6e      	ldr	r2, [pc, #440]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0xd4>
 800424c:	4b6b      	ldr	r3, [pc, #428]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6a      	ldr	r2, [pc, #424]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b68      	ldr	r3, [pc, #416]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a67      	ldr	r2, [pc, #412]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 800425e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7fe fc7c 	bl	8002b68 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004274:	f7fe fc78 	bl	8002b68 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	@ 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e200      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	4b5d      	ldr	r3, [pc, #372]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0xe4>
 8004292:	e014      	b.n	80042be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7fe fc68 	bl	8002b68 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800429c:	f7fe fc64 	bl	8002b68 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	@ 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1ec      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ae:	4b53      	ldr	r3, [pc, #332]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x10c>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d063      	beq.n	8004392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ca:	4b4c      	ldr	r3, [pc, #304]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042d6:	4b49      	ldr	r3, [pc, #292]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d11c      	bne.n	800431c <HAL_RCC_OscConfig+0x18c>
 80042e2:	4b46      	ldr	r3, [pc, #280]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d116      	bne.n	800431c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ee:	4b43      	ldr	r3, [pc, #268]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_RCC_OscConfig+0x176>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d001      	beq.n	8004306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e1c0      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004306:	4b3d      	ldr	r3, [pc, #244]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4939      	ldr	r1, [pc, #228]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431a:	e03a      	b.n	8004392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d020      	beq.n	8004366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004324:	4b36      	ldr	r3, [pc, #216]	@ (8004400 <HAL_RCC_OscConfig+0x270>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fe fc1d 	bl	8002b68 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004332:	f7fe fc19 	bl	8002b68 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e1a1      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004344:	4b2d      	ldr	r3, [pc, #180]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004350:	4b2a      	ldr	r3, [pc, #168]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4927      	ldr	r1, [pc, #156]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	600b      	str	r3, [r1, #0]
 8004364:	e015      	b.n	8004392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004366:	4b26      	ldr	r3, [pc, #152]	@ (8004400 <HAL_RCC_OscConfig+0x270>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fe fbfc 	bl	8002b68 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004374:	f7fe fbf8 	bl	8002b68 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e180      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004386:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d03a      	beq.n	8004414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d019      	beq.n	80043da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a6:	4b17      	ldr	r3, [pc, #92]	@ (8004404 <HAL_RCC_OscConfig+0x274>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ac:	f7fe fbdc 	bl	8002b68 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b4:	f7fe fbd8 	bl	8002b68 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e160      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c6:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043d2:	2001      	movs	r0, #1
 80043d4:	f000 face 	bl	8004974 <RCC_Delay>
 80043d8:	e01c      	b.n	8004414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043da:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <HAL_RCC_OscConfig+0x274>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e0:	f7fe fbc2 	bl	8002b68 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e6:	e00f      	b.n	8004408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e8:	f7fe fbbe 	bl	8002b68 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d908      	bls.n	8004408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e146      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	42420000 	.word	0x42420000
 8004404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004408:	4b92      	ldr	r3, [pc, #584]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e9      	bne.n	80043e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a6 	beq.w	800456e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004426:	4b8b      	ldr	r3, [pc, #556]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10d      	bne.n	800444e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	4b88      	ldr	r3, [pc, #544]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4a87      	ldr	r2, [pc, #540]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800443c:	61d3      	str	r3, [r2, #28]
 800443e:	4b85      	ldr	r3, [pc, #532]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	4b82      	ldr	r3, [pc, #520]	@ (8004658 <HAL_RCC_OscConfig+0x4c8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d118      	bne.n	800448c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445a:	4b7f      	ldr	r3, [pc, #508]	@ (8004658 <HAL_RCC_OscConfig+0x4c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7e      	ldr	r2, [pc, #504]	@ (8004658 <HAL_RCC_OscConfig+0x4c8>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004466:	f7fe fb7f 	bl	8002b68 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446e:	f7fe fb7b 	bl	8002b68 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b64      	cmp	r3, #100	@ 0x64
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e103      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	4b75      	ldr	r3, [pc, #468]	@ (8004658 <HAL_RCC_OscConfig+0x4c8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x312>
 8004494:	4b6f      	ldr	r3, [pc, #444]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4a6e      	ldr	r2, [pc, #440]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6213      	str	r3, [r2, #32]
 80044a0:	e02d      	b.n	80044fe <HAL_RCC_OscConfig+0x36e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x334>
 80044aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	4a69      	ldr	r2, [pc, #420]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	6213      	str	r3, [r2, #32]
 80044b6:	4b67      	ldr	r3, [pc, #412]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a66      	ldr	r2, [pc, #408]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	6213      	str	r3, [r2, #32]
 80044c2:	e01c      	b.n	80044fe <HAL_RCC_OscConfig+0x36e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	d10c      	bne.n	80044e6 <HAL_RCC_OscConfig+0x356>
 80044cc:	4b61      	ldr	r3, [pc, #388]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4a60      	ldr	r2, [pc, #384]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	6213      	str	r3, [r2, #32]
 80044d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6213      	str	r3, [r2, #32]
 80044e4:	e00b      	b.n	80044fe <HAL_RCC_OscConfig+0x36e>
 80044e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	4a5a      	ldr	r2, [pc, #360]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	6213      	str	r3, [r2, #32]
 80044f2:	4b58      	ldr	r3, [pc, #352]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4a57      	ldr	r2, [pc, #348]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f023 0304 	bic.w	r3, r3, #4
 80044fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d015      	beq.n	8004532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004506:	f7fe fb2f 	bl	8002b68 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fe fb2b 	bl	8002b68 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e0b1      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	4b4b      	ldr	r3, [pc, #300]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ee      	beq.n	800450e <HAL_RCC_OscConfig+0x37e>
 8004530:	e014      	b.n	800455c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004532:	f7fe fb19 	bl	8002b68 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004538:	e00a      	b.n	8004550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f7fe fb15 	bl	8002b68 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e09b      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004550:	4b40      	ldr	r3, [pc, #256]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ee      	bne.n	800453a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004562:	4b3c      	ldr	r3, [pc, #240]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	4a3b      	ldr	r2, [pc, #236]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800456c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8087 	beq.w	8004686 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004578:	4b36      	ldr	r3, [pc, #216]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b08      	cmp	r3, #8
 8004582:	d061      	beq.n	8004648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d146      	bne.n	800461a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458c:	4b33      	ldr	r3, [pc, #204]	@ (800465c <HAL_RCC_OscConfig+0x4cc>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fe fae9 	bl	8002b68 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459a:	f7fe fae5 	bl	8002b68 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e06d      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ac:	4b29      	ldr	r3, [pc, #164]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f0      	bne.n	800459a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c0:	d108      	bne.n	80045d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045c2:	4b24      	ldr	r3, [pc, #144]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	4921      	ldr	r1, [pc, #132]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a19      	ldr	r1, [r3, #32]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e4:	430b      	orrs	r3, r1
 80045e6:	491b      	ldr	r1, [pc, #108]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ec:	4b1b      	ldr	r3, [pc, #108]	@ (800465c <HAL_RCC_OscConfig+0x4cc>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f2:	f7fe fab9 	bl	8002b68 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fe fab5 	bl	8002b68 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e03d      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800460c:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x46a>
 8004618:	e035      	b.n	8004686 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461a:	4b10      	ldr	r3, [pc, #64]	@ (800465c <HAL_RCC_OscConfig+0x4cc>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fe faa2 	bl	8002b68 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004628:	f7fe fa9e 	bl	8002b68 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e026      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463a:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x498>
 8004646:	e01e      	b.n	8004686 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e019      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004654:	40021000 	.word	0x40021000
 8004658:	40007000 	.word	0x40007000
 800465c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004660:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <HAL_RCC_OscConfig+0x500>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	429a      	cmp	r2, r3
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40021000 	.word	0x40021000

08004694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0d0      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d910      	bls.n	80046d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b6:	4b67      	ldr	r3, [pc, #412]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 0207 	bic.w	r2, r3, #7
 80046be:	4965      	ldr	r1, [pc, #404]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b63      	ldr	r3, [pc, #396]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0b8      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f0:	4b59      	ldr	r3, [pc, #356]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a58      	ldr	r2, [pc, #352]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004708:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a52      	ldr	r2, [pc, #328]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004712:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004714:	4b50      	ldr	r3, [pc, #320]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	494d      	ldr	r1, [pc, #308]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d040      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473a:	4b47      	ldr	r3, [pc, #284]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d115      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07f      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004752:	4b41      	ldr	r3, [pc, #260]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e073      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004762:	4b3d      	ldr	r3, [pc, #244]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e06b      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004772:	4b39      	ldr	r3, [pc, #228]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f023 0203 	bic.w	r2, r3, #3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	4936      	ldr	r1, [pc, #216]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004784:	f7fe f9f0 	bl	8002b68 <HAL_GetTick>
 8004788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478c:	f7fe f9ec 	bl	8002b68 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e053      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 020c 	and.w	r2, r3, #12
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d1eb      	bne.n	800478c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047b4:	4b27      	ldr	r3, [pc, #156]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d210      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b24      	ldr	r3, [pc, #144]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 0207 	bic.w	r2, r3, #7
 80047ca:	4922      	ldr	r1, [pc, #136]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e032      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f0:	4b19      	ldr	r3, [pc, #100]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4916      	ldr	r1, [pc, #88]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800480e:	4b12      	ldr	r3, [pc, #72]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	490e      	ldr	r1, [pc, #56]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004822:	f000 f821 	bl	8004868 <HAL_RCC_GetSysClockFreq>
 8004826:	4602      	mov	r2, r0
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	490a      	ldr	r1, [pc, #40]	@ (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004834:	5ccb      	ldrb	r3, [r1, r3]
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	4a09      	ldr	r2, [pc, #36]	@ (8004860 <HAL_RCC_ClockConfig+0x1cc>)
 800483c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800483e:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <HAL_RCC_ClockConfig+0x1d0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe f94e 	bl	8002ae4 <HAL_InitTick>

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40022000 	.word	0x40022000
 8004858:	40021000 	.word	0x40021000
 800485c:	08009aa0 	.word	0x08009aa0
 8004860:	2000001c 	.word	0x2000001c
 8004864:	20000020 	.word	0x20000020

08004868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	2300      	movs	r3, #0
 800487c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004882:	4b1e      	ldr	r3, [pc, #120]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x94>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b04      	cmp	r3, #4
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x30>
 8004892:	2b08      	cmp	r3, #8
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x36>
 8004896:	e027      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004898:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x98>)
 800489a:	613b      	str	r3, [r7, #16]
      break;
 800489c:	e027      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	0c9b      	lsrs	r3, r3, #18
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	4a17      	ldr	r2, [pc, #92]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048a8:	5cd3      	ldrb	r3, [r2, r3]
 80048aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d010      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048b6:	4b11      	ldr	r3, [pc, #68]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x94>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	0c5b      	lsrs	r3, r3, #17
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	4a11      	ldr	r2, [pc, #68]	@ (8004908 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048c2:	5cd3      	ldrb	r3, [r2, r3]
 80048c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ca:	fb03 f202 	mul.w	r2, r3, r2
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e004      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0c      	ldr	r2, [pc, #48]	@ (800490c <HAL_RCC_GetSysClockFreq+0xa4>)
 80048dc:	fb02 f303 	mul.w	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	613b      	str	r3, [r7, #16]
      break;
 80048e6:	e002      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ea:	613b      	str	r3, [r7, #16]
      break;
 80048ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ee:	693b      	ldr	r3, [r7, #16]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	007a1200 	.word	0x007a1200
 8004904:	08009ab8 	.word	0x08009ab8
 8004908:	08009ac8 	.word	0x08009ac8
 800490c:	003d0900 	.word	0x003d0900

08004910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004914:	4b02      	ldr	r3, [pc, #8]	@ (8004920 <HAL_RCC_GetHCLKFreq+0x10>)
 8004916:	681b      	ldr	r3, [r3, #0]
}
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	2000001c 	.word	0x2000001c

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004928:	f7ff fff2 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4903      	ldr	r1, [pc, #12]	@ (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	08009ab0 	.word	0x08009ab0

0800494c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004950:	f7ff ffde 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	@ (800496c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	0adb      	lsrs	r3, r3, #11
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	@ (8004970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000
 8004970:	08009ab0 	.word	0x08009ab0

08004974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800497c:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <RCC_Delay+0x34>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0a      	ldr	r2, [pc, #40]	@ (80049ac <RCC_Delay+0x38>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	0a5b      	lsrs	r3, r3, #9
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004990:	bf00      	nop
  }
  while (Delay --);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e5a      	subs	r2, r3, #1
 8004996:	60fa      	str	r2, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f9      	bne.n	8004990 <RCC_Delay+0x1c>
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	2000001c 	.word	0x2000001c
 80049ac:	10624dd3 	.word	0x10624dd3

080049b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e042      	b.n	8004a48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd ff26 	bl	8002828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2224      	movs	r2, #36	@ 0x24
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f971 	bl	8004cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695a      	ldr	r2, [r3, #20]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08a      	sub	sp, #40	@ 0x28
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d175      	bne.n	8004b5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_UART_Transmit+0x2c>
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e06e      	b.n	8004b5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2221      	movs	r2, #33	@ 0x21
 8004a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a8e:	f7fe f86b 	bl	8002b68 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	88fa      	ldrh	r2, [r7, #6]
 8004a98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa8:	d108      	bne.n	8004abc <HAL_UART_Transmit+0x6c>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d104      	bne.n	8004abc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	e003      	b.n	8004ac4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ac4:	e02e      	b.n	8004b24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2200      	movs	r2, #0
 8004ace:	2180      	movs	r1, #128	@ 0x80
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f848 	bl	8004b66 <UART_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e03a      	b.n	8004b5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	3302      	adds	r3, #2
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e007      	b.n	8004b16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	781a      	ldrb	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	3301      	adds	r3, #1
 8004b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1cb      	bne.n	8004ac6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2140      	movs	r1, #64	@ 0x40
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f814 	bl	8004b66 <UART_WaitOnFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e006      	b.n	8004b5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e000      	b.n	8004b5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
  }
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	4613      	mov	r3, r2
 8004b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b76:	e03b      	b.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d037      	beq.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b80:	f7fd fff2 	bl	8002b68 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	6a3a      	ldr	r2, [r7, #32]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d302      	bcc.n	8004b96 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e03a      	b.n	8004c10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d023      	beq.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b80      	cmp	r3, #128	@ 0x80
 8004bac:	d020      	beq.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b40      	cmp	r3, #64	@ 0x40
 8004bb2:	d01d      	beq.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d116      	bne.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f81d 	bl	8004c18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2208      	movs	r2, #8
 8004be2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e00f      	b.n	8004c10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	bf0c      	ite	eq
 8004c00:	2301      	moveq	r3, #1
 8004c02:	2300      	movne	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d0b4      	beq.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b095      	sub	sp, #84	@ 0x54
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c40:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e5      	bne.n	8004c20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e5      	bne.n	8004c54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d119      	bne.n	8004cc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f023 0310 	bic.w	r3, r3, #16
 8004ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cb0:	61ba      	str	r2, [r7, #24]
 8004cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6979      	ldr	r1, [r7, #20]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e5      	bne.n	8004c90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004cd2:	bf00      	nop
 8004cd4:	3754      	adds	r7, #84	@ 0x54
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004d16:	f023 030c 	bic.w	r3, r3, #12
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	430b      	orrs	r3, r1
 8004d22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8004df0 <UART_SetConfig+0x114>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d103      	bne.n	8004d4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d44:	f7ff fe02 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	e002      	b.n	8004d52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d4c:	f7ff fdea 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8004d50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	009a      	lsls	r2, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	4a22      	ldr	r2, [pc, #136]	@ (8004df4 <UART_SetConfig+0x118>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	0119      	lsls	r1, r3, #4
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009a      	lsls	r2, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d88:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <UART_SetConfig+0x118>)
 8004d8a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	2064      	movs	r0, #100	@ 0x64
 8004d92:	fb00 f303 	mul.w	r3, r0, r3
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	3332      	adds	r3, #50	@ 0x32
 8004d9c:	4a15      	ldr	r2, [pc, #84]	@ (8004df4 <UART_SetConfig+0x118>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004da8:	4419      	add	r1, r3
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009a      	lsls	r2, r3, #2
 8004db4:	441a      	add	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004df4 <UART_SetConfig+0x118>)
 8004dc2:	fba3 0302 	umull	r0, r3, r3, r2
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	2064      	movs	r0, #100	@ 0x64
 8004dca:	fb00 f303 	mul.w	r3, r0, r3
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	3332      	adds	r3, #50	@ 0x32
 8004dd4:	4a07      	ldr	r2, [pc, #28]	@ (8004df4 <UART_SetConfig+0x118>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	f003 020f 	and.w	r2, r3, #15
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	440a      	add	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40013800 	.word	0x40013800
 8004df4:	51eb851f 	.word	0x51eb851f

08004df8 <__cvt>:
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfe:	461d      	mov	r5, r3
 8004e00:	bfbb      	ittet	lt
 8004e02:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004e06:	461d      	movlt	r5, r3
 8004e08:	2300      	movge	r3, #0
 8004e0a:	232d      	movlt	r3, #45	@ 0x2d
 8004e0c:	b088      	sub	sp, #32
 8004e0e:	4614      	mov	r4, r2
 8004e10:	bfb8      	it	lt
 8004e12:	4614      	movlt	r4, r2
 8004e14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004e16:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004e18:	7013      	strb	r3, [r2, #0]
 8004e1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e1c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004e20:	f023 0820 	bic.w	r8, r3, #32
 8004e24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e28:	d005      	beq.n	8004e36 <__cvt+0x3e>
 8004e2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e2e:	d100      	bne.n	8004e32 <__cvt+0x3a>
 8004e30:	3601      	adds	r6, #1
 8004e32:	2302      	movs	r3, #2
 8004e34:	e000      	b.n	8004e38 <__cvt+0x40>
 8004e36:	2303      	movs	r3, #3
 8004e38:	aa07      	add	r2, sp, #28
 8004e3a:	9204      	str	r2, [sp, #16]
 8004e3c:	aa06      	add	r2, sp, #24
 8004e3e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e42:	e9cd 3600 	strd	r3, r6, [sp]
 8004e46:	4622      	mov	r2, r4
 8004e48:	462b      	mov	r3, r5
 8004e4a:	f001 f985 	bl	8006158 <_dtoa_r>
 8004e4e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004e52:	4607      	mov	r7, r0
 8004e54:	d119      	bne.n	8004e8a <__cvt+0x92>
 8004e56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004e58:	07db      	lsls	r3, r3, #31
 8004e5a:	d50e      	bpl.n	8004e7a <__cvt+0x82>
 8004e5c:	eb00 0906 	add.w	r9, r0, r6
 8004e60:	2200      	movs	r2, #0
 8004e62:	2300      	movs	r3, #0
 8004e64:	4620      	mov	r0, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7fb fd9e 	bl	80009a8 <__aeabi_dcmpeq>
 8004e6c:	b108      	cbz	r0, 8004e72 <__cvt+0x7a>
 8004e6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e72:	2230      	movs	r2, #48	@ 0x30
 8004e74:	9b07      	ldr	r3, [sp, #28]
 8004e76:	454b      	cmp	r3, r9
 8004e78:	d31e      	bcc.n	8004eb8 <__cvt+0xc0>
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	9b07      	ldr	r3, [sp, #28]
 8004e7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004e80:	1bdb      	subs	r3, r3, r7
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	b008      	add	sp, #32
 8004e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e8e:	eb00 0906 	add.w	r9, r0, r6
 8004e92:	d1e5      	bne.n	8004e60 <__cvt+0x68>
 8004e94:	7803      	ldrb	r3, [r0, #0]
 8004e96:	2b30      	cmp	r3, #48	@ 0x30
 8004e98:	d10a      	bne.n	8004eb0 <__cvt+0xb8>
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7fb fd81 	bl	80009a8 <__aeabi_dcmpeq>
 8004ea6:	b918      	cbnz	r0, 8004eb0 <__cvt+0xb8>
 8004ea8:	f1c6 0601 	rsb	r6, r6, #1
 8004eac:	f8ca 6000 	str.w	r6, [sl]
 8004eb0:	f8da 3000 	ldr.w	r3, [sl]
 8004eb4:	4499      	add	r9, r3
 8004eb6:	e7d3      	b.n	8004e60 <__cvt+0x68>
 8004eb8:	1c59      	adds	r1, r3, #1
 8004eba:	9107      	str	r1, [sp, #28]
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e7d9      	b.n	8004e74 <__cvt+0x7c>

08004ec0 <__exponent>:
 8004ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec2:	2900      	cmp	r1, #0
 8004ec4:	bfb6      	itet	lt
 8004ec6:	232d      	movlt	r3, #45	@ 0x2d
 8004ec8:	232b      	movge	r3, #43	@ 0x2b
 8004eca:	4249      	neglt	r1, r1
 8004ecc:	2909      	cmp	r1, #9
 8004ece:	7002      	strb	r2, [r0, #0]
 8004ed0:	7043      	strb	r3, [r0, #1]
 8004ed2:	dd29      	ble.n	8004f28 <__exponent+0x68>
 8004ed4:	f10d 0307 	add.w	r3, sp, #7
 8004ed8:	461d      	mov	r5, r3
 8004eda:	270a      	movs	r7, #10
 8004edc:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	fb07 1416 	mls	r4, r7, r6, r1
 8004ee6:	3430      	adds	r4, #48	@ 0x30
 8004ee8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004eec:	460c      	mov	r4, r1
 8004eee:	2c63      	cmp	r4, #99	@ 0x63
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ef6:	dcf1      	bgt.n	8004edc <__exponent+0x1c>
 8004ef8:	3130      	adds	r1, #48	@ 0x30
 8004efa:	1e94      	subs	r4, r2, #2
 8004efc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f00:	4623      	mov	r3, r4
 8004f02:	1c41      	adds	r1, r0, #1
 8004f04:	42ab      	cmp	r3, r5
 8004f06:	d30a      	bcc.n	8004f1e <__exponent+0x5e>
 8004f08:	f10d 0309 	add.w	r3, sp, #9
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	42ac      	cmp	r4, r5
 8004f10:	bf88      	it	hi
 8004f12:	2300      	movhi	r3, #0
 8004f14:	3302      	adds	r3, #2
 8004f16:	4403      	add	r3, r0
 8004f18:	1a18      	subs	r0, r3, r0
 8004f1a:	b003      	add	sp, #12
 8004f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f22:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f26:	e7ed      	b.n	8004f04 <__exponent+0x44>
 8004f28:	2330      	movs	r3, #48	@ 0x30
 8004f2a:	3130      	adds	r1, #48	@ 0x30
 8004f2c:	7083      	strb	r3, [r0, #2]
 8004f2e:	70c1      	strb	r1, [r0, #3]
 8004f30:	1d03      	adds	r3, r0, #4
 8004f32:	e7f1      	b.n	8004f18 <__exponent+0x58>

08004f34 <_printf_float>:
 8004f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f38:	b091      	sub	sp, #68	@ 0x44
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004f40:	4616      	mov	r6, r2
 8004f42:	461f      	mov	r7, r3
 8004f44:	4605      	mov	r5, r0
 8004f46:	f000 fff5 	bl	8005f34 <_localeconv_r>
 8004f4a:	6803      	ldr	r3, [r0, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	9308      	str	r3, [sp, #32]
 8004f50:	f7fb f8fe 	bl	8000150 <strlen>
 8004f54:	2300      	movs	r3, #0
 8004f56:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f58:	f8d8 3000 	ldr.w	r3, [r8]
 8004f5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8004f5e:	3307      	adds	r3, #7
 8004f60:	f023 0307 	bic.w	r3, r3, #7
 8004f64:	f103 0208 	add.w	r2, r3, #8
 8004f68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f6c:	f8d4 b000 	ldr.w	fp, [r4]
 8004f70:	f8c8 2000 	str.w	r2, [r8]
 8004f74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f7e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004f82:	f04f 32ff 	mov.w	r2, #4294967295
 8004f86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f8e:	4b9c      	ldr	r3, [pc, #624]	@ (8005200 <_printf_float+0x2cc>)
 8004f90:	f7fb fd3c 	bl	8000a0c <__aeabi_dcmpun>
 8004f94:	bb70      	cbnz	r0, 8004ff4 <_printf_float+0xc0>
 8004f96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9e:	4b98      	ldr	r3, [pc, #608]	@ (8005200 <_printf_float+0x2cc>)
 8004fa0:	f7fb fd16 	bl	80009d0 <__aeabi_dcmple>
 8004fa4:	bb30      	cbnz	r0, 8004ff4 <_printf_float+0xc0>
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4640      	mov	r0, r8
 8004fac:	4649      	mov	r1, r9
 8004fae:	f7fb fd05 	bl	80009bc <__aeabi_dcmplt>
 8004fb2:	b110      	cbz	r0, 8004fba <_printf_float+0x86>
 8004fb4:	232d      	movs	r3, #45	@ 0x2d
 8004fb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fba:	4a92      	ldr	r2, [pc, #584]	@ (8005204 <_printf_float+0x2d0>)
 8004fbc:	4b92      	ldr	r3, [pc, #584]	@ (8005208 <_printf_float+0x2d4>)
 8004fbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004fc2:	bf94      	ite	ls
 8004fc4:	4690      	movls	r8, r2
 8004fc6:	4698      	movhi	r8, r3
 8004fc8:	2303      	movs	r3, #3
 8004fca:	f04f 0900 	mov.w	r9, #0
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	f02b 0304 	bic.w	r3, fp, #4
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	4633      	mov	r3, r6
 8004fd8:	4621      	mov	r1, r4
 8004fda:	4628      	mov	r0, r5
 8004fdc:	9700      	str	r7, [sp, #0]
 8004fde:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004fe0:	f000 f9d4 	bl	800538c <_printf_common>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	f040 8090 	bne.w	800510a <_printf_float+0x1d6>
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295
 8004fee:	b011      	add	sp, #68	@ 0x44
 8004ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	4640      	mov	r0, r8
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	f7fb fd06 	bl	8000a0c <__aeabi_dcmpun>
 8005000:	b148      	cbz	r0, 8005016 <_printf_float+0xe2>
 8005002:	464b      	mov	r3, r9
 8005004:	2b00      	cmp	r3, #0
 8005006:	bfb8      	it	lt
 8005008:	232d      	movlt	r3, #45	@ 0x2d
 800500a:	4a80      	ldr	r2, [pc, #512]	@ (800520c <_printf_float+0x2d8>)
 800500c:	bfb8      	it	lt
 800500e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005012:	4b7f      	ldr	r3, [pc, #508]	@ (8005210 <_printf_float+0x2dc>)
 8005014:	e7d3      	b.n	8004fbe <_printf_float+0x8a>
 8005016:	6863      	ldr	r3, [r4, #4]
 8005018:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	d13f      	bne.n	80050a0 <_printf_float+0x16c>
 8005020:	2306      	movs	r3, #6
 8005022:	6063      	str	r3, [r4, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	9206      	str	r2, [sp, #24]
 800502e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005030:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005034:	aa0d      	add	r2, sp, #52	@ 0x34
 8005036:	9203      	str	r2, [sp, #12]
 8005038:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800503c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005040:	6863      	ldr	r3, [r4, #4]
 8005042:	4642      	mov	r2, r8
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4628      	mov	r0, r5
 8005048:	464b      	mov	r3, r9
 800504a:	910a      	str	r1, [sp, #40]	@ 0x28
 800504c:	f7ff fed4 	bl	8004df8 <__cvt>
 8005050:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005052:	4680      	mov	r8, r0
 8005054:	2947      	cmp	r1, #71	@ 0x47
 8005056:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005058:	d128      	bne.n	80050ac <_printf_float+0x178>
 800505a:	1cc8      	adds	r0, r1, #3
 800505c:	db02      	blt.n	8005064 <_printf_float+0x130>
 800505e:	6863      	ldr	r3, [r4, #4]
 8005060:	4299      	cmp	r1, r3
 8005062:	dd40      	ble.n	80050e6 <_printf_float+0x1b2>
 8005064:	f1aa 0a02 	sub.w	sl, sl, #2
 8005068:	fa5f fa8a 	uxtb.w	sl, sl
 800506c:	4652      	mov	r2, sl
 800506e:	3901      	subs	r1, #1
 8005070:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005074:	910d      	str	r1, [sp, #52]	@ 0x34
 8005076:	f7ff ff23 	bl	8004ec0 <__exponent>
 800507a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800507c:	4681      	mov	r9, r0
 800507e:	1813      	adds	r3, r2, r0
 8005080:	2a01      	cmp	r2, #1
 8005082:	6123      	str	r3, [r4, #16]
 8005084:	dc02      	bgt.n	800508c <_printf_float+0x158>
 8005086:	6822      	ldr	r2, [r4, #0]
 8005088:	07d2      	lsls	r2, r2, #31
 800508a:	d501      	bpl.n	8005090 <_printf_float+0x15c>
 800508c:	3301      	adds	r3, #1
 800508e:	6123      	str	r3, [r4, #16]
 8005090:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005094:	2b00      	cmp	r3, #0
 8005096:	d09e      	beq.n	8004fd6 <_printf_float+0xa2>
 8005098:	232d      	movs	r3, #45	@ 0x2d
 800509a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800509e:	e79a      	b.n	8004fd6 <_printf_float+0xa2>
 80050a0:	2947      	cmp	r1, #71	@ 0x47
 80050a2:	d1bf      	bne.n	8005024 <_printf_float+0xf0>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1bd      	bne.n	8005024 <_printf_float+0xf0>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e7ba      	b.n	8005022 <_printf_float+0xee>
 80050ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050b0:	d9dc      	bls.n	800506c <_printf_float+0x138>
 80050b2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80050b6:	d118      	bne.n	80050ea <_printf_float+0x1b6>
 80050b8:	2900      	cmp	r1, #0
 80050ba:	6863      	ldr	r3, [r4, #4]
 80050bc:	dd0b      	ble.n	80050d6 <_printf_float+0x1a2>
 80050be:	6121      	str	r1, [r4, #16]
 80050c0:	b913      	cbnz	r3, 80050c8 <_printf_float+0x194>
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	07d0      	lsls	r0, r2, #31
 80050c6:	d502      	bpl.n	80050ce <_printf_float+0x19a>
 80050c8:	3301      	adds	r3, #1
 80050ca:	440b      	add	r3, r1
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	f04f 0900 	mov.w	r9, #0
 80050d2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80050d4:	e7dc      	b.n	8005090 <_printf_float+0x15c>
 80050d6:	b913      	cbnz	r3, 80050de <_printf_float+0x1aa>
 80050d8:	6822      	ldr	r2, [r4, #0]
 80050da:	07d2      	lsls	r2, r2, #31
 80050dc:	d501      	bpl.n	80050e2 <_printf_float+0x1ae>
 80050de:	3302      	adds	r3, #2
 80050e0:	e7f4      	b.n	80050cc <_printf_float+0x198>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e7f2      	b.n	80050cc <_printf_float+0x198>
 80050e6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80050ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050ec:	4299      	cmp	r1, r3
 80050ee:	db05      	blt.n	80050fc <_printf_float+0x1c8>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	6121      	str	r1, [r4, #16]
 80050f4:	07d8      	lsls	r0, r3, #31
 80050f6:	d5ea      	bpl.n	80050ce <_printf_float+0x19a>
 80050f8:	1c4b      	adds	r3, r1, #1
 80050fa:	e7e7      	b.n	80050cc <_printf_float+0x198>
 80050fc:	2900      	cmp	r1, #0
 80050fe:	bfcc      	ite	gt
 8005100:	2201      	movgt	r2, #1
 8005102:	f1c1 0202 	rsble	r2, r1, #2
 8005106:	4413      	add	r3, r2
 8005108:	e7e0      	b.n	80050cc <_printf_float+0x198>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	055a      	lsls	r2, r3, #21
 800510e:	d407      	bmi.n	8005120 <_printf_float+0x1ec>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	4642      	mov	r2, r8
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	47b8      	blx	r7
 800511a:	3001      	adds	r0, #1
 800511c:	d12b      	bne.n	8005176 <_printf_float+0x242>
 800511e:	e764      	b.n	8004fea <_printf_float+0xb6>
 8005120:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005124:	f240 80dc 	bls.w	80052e0 <_printf_float+0x3ac>
 8005128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800512c:	2200      	movs	r2, #0
 800512e:	2300      	movs	r3, #0
 8005130:	f7fb fc3a 	bl	80009a8 <__aeabi_dcmpeq>
 8005134:	2800      	cmp	r0, #0
 8005136:	d033      	beq.n	80051a0 <_printf_float+0x26c>
 8005138:	2301      	movs	r3, #1
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	4a35      	ldr	r2, [pc, #212]	@ (8005214 <_printf_float+0x2e0>)
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	f43f af51 	beq.w	8004fea <_printf_float+0xb6>
 8005148:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800514c:	4543      	cmp	r3, r8
 800514e:	db02      	blt.n	8005156 <_printf_float+0x222>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	07d8      	lsls	r0, r3, #31
 8005154:	d50f      	bpl.n	8005176 <_printf_float+0x242>
 8005156:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800515a:	4631      	mov	r1, r6
 800515c:	4628      	mov	r0, r5
 800515e:	47b8      	blx	r7
 8005160:	3001      	adds	r0, #1
 8005162:	f43f af42 	beq.w	8004fea <_printf_float+0xb6>
 8005166:	f04f 0900 	mov.w	r9, #0
 800516a:	f108 38ff 	add.w	r8, r8, #4294967295
 800516e:	f104 0a1a 	add.w	sl, r4, #26
 8005172:	45c8      	cmp	r8, r9
 8005174:	dc09      	bgt.n	800518a <_printf_float+0x256>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	079b      	lsls	r3, r3, #30
 800517a:	f100 8102 	bmi.w	8005382 <_printf_float+0x44e>
 800517e:	68e0      	ldr	r0, [r4, #12]
 8005180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005182:	4298      	cmp	r0, r3
 8005184:	bfb8      	it	lt
 8005186:	4618      	movlt	r0, r3
 8005188:	e731      	b.n	8004fee <_printf_float+0xba>
 800518a:	2301      	movs	r3, #1
 800518c:	4652      	mov	r2, sl
 800518e:	4631      	mov	r1, r6
 8005190:	4628      	mov	r0, r5
 8005192:	47b8      	blx	r7
 8005194:	3001      	adds	r0, #1
 8005196:	f43f af28 	beq.w	8004fea <_printf_float+0xb6>
 800519a:	f109 0901 	add.w	r9, r9, #1
 800519e:	e7e8      	b.n	8005172 <_printf_float+0x23e>
 80051a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	dc38      	bgt.n	8005218 <_printf_float+0x2e4>
 80051a6:	2301      	movs	r3, #1
 80051a8:	4631      	mov	r1, r6
 80051aa:	4628      	mov	r0, r5
 80051ac:	4a19      	ldr	r2, [pc, #100]	@ (8005214 <_printf_float+0x2e0>)
 80051ae:	47b8      	blx	r7
 80051b0:	3001      	adds	r0, #1
 80051b2:	f43f af1a 	beq.w	8004fea <_printf_float+0xb6>
 80051b6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80051ba:	ea59 0303 	orrs.w	r3, r9, r3
 80051be:	d102      	bne.n	80051c6 <_printf_float+0x292>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	07d9      	lsls	r1, r3, #31
 80051c4:	d5d7      	bpl.n	8005176 <_printf_float+0x242>
 80051c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051ca:	4631      	mov	r1, r6
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b8      	blx	r7
 80051d0:	3001      	adds	r0, #1
 80051d2:	f43f af0a 	beq.w	8004fea <_printf_float+0xb6>
 80051d6:	f04f 0a00 	mov.w	sl, #0
 80051da:	f104 0b1a 	add.w	fp, r4, #26
 80051de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051e0:	425b      	negs	r3, r3
 80051e2:	4553      	cmp	r3, sl
 80051e4:	dc01      	bgt.n	80051ea <_printf_float+0x2b6>
 80051e6:	464b      	mov	r3, r9
 80051e8:	e793      	b.n	8005112 <_printf_float+0x1de>
 80051ea:	2301      	movs	r3, #1
 80051ec:	465a      	mov	r2, fp
 80051ee:	4631      	mov	r1, r6
 80051f0:	4628      	mov	r0, r5
 80051f2:	47b8      	blx	r7
 80051f4:	3001      	adds	r0, #1
 80051f6:	f43f aef8 	beq.w	8004fea <_printf_float+0xb6>
 80051fa:	f10a 0a01 	add.w	sl, sl, #1
 80051fe:	e7ee      	b.n	80051de <_printf_float+0x2aa>
 8005200:	7fefffff 	.word	0x7fefffff
 8005204:	08009aca 	.word	0x08009aca
 8005208:	08009ace 	.word	0x08009ace
 800520c:	08009ad2 	.word	0x08009ad2
 8005210:	08009ad6 	.word	0x08009ad6
 8005214:	08009ada 	.word	0x08009ada
 8005218:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800521a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800521e:	4553      	cmp	r3, sl
 8005220:	bfa8      	it	ge
 8005222:	4653      	movge	r3, sl
 8005224:	2b00      	cmp	r3, #0
 8005226:	4699      	mov	r9, r3
 8005228:	dc36      	bgt.n	8005298 <_printf_float+0x364>
 800522a:	f04f 0b00 	mov.w	fp, #0
 800522e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005232:	f104 021a 	add.w	r2, r4, #26
 8005236:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005238:	930a      	str	r3, [sp, #40]	@ 0x28
 800523a:	eba3 0309 	sub.w	r3, r3, r9
 800523e:	455b      	cmp	r3, fp
 8005240:	dc31      	bgt.n	80052a6 <_printf_float+0x372>
 8005242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005244:	459a      	cmp	sl, r3
 8005246:	dc3a      	bgt.n	80052be <_printf_float+0x38a>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	07da      	lsls	r2, r3, #31
 800524c:	d437      	bmi.n	80052be <_printf_float+0x38a>
 800524e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005250:	ebaa 0903 	sub.w	r9, sl, r3
 8005254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005256:	ebaa 0303 	sub.w	r3, sl, r3
 800525a:	4599      	cmp	r9, r3
 800525c:	bfa8      	it	ge
 800525e:	4699      	movge	r9, r3
 8005260:	f1b9 0f00 	cmp.w	r9, #0
 8005264:	dc33      	bgt.n	80052ce <_printf_float+0x39a>
 8005266:	f04f 0800 	mov.w	r8, #0
 800526a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800526e:	f104 0b1a 	add.w	fp, r4, #26
 8005272:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005274:	ebaa 0303 	sub.w	r3, sl, r3
 8005278:	eba3 0309 	sub.w	r3, r3, r9
 800527c:	4543      	cmp	r3, r8
 800527e:	f77f af7a 	ble.w	8005176 <_printf_float+0x242>
 8005282:	2301      	movs	r3, #1
 8005284:	465a      	mov	r2, fp
 8005286:	4631      	mov	r1, r6
 8005288:	4628      	mov	r0, r5
 800528a:	47b8      	blx	r7
 800528c:	3001      	adds	r0, #1
 800528e:	f43f aeac 	beq.w	8004fea <_printf_float+0xb6>
 8005292:	f108 0801 	add.w	r8, r8, #1
 8005296:	e7ec      	b.n	8005272 <_printf_float+0x33e>
 8005298:	4642      	mov	r2, r8
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	d1c2      	bne.n	800522a <_printf_float+0x2f6>
 80052a4:	e6a1      	b.n	8004fea <_printf_float+0xb6>
 80052a6:	2301      	movs	r3, #1
 80052a8:	4631      	mov	r1, r6
 80052aa:	4628      	mov	r0, r5
 80052ac:	920a      	str	r2, [sp, #40]	@ 0x28
 80052ae:	47b8      	blx	r7
 80052b0:	3001      	adds	r0, #1
 80052b2:	f43f ae9a 	beq.w	8004fea <_printf_float+0xb6>
 80052b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052b8:	f10b 0b01 	add.w	fp, fp, #1
 80052bc:	e7bb      	b.n	8005236 <_printf_float+0x302>
 80052be:	4631      	mov	r1, r6
 80052c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052c4:	4628      	mov	r0, r5
 80052c6:	47b8      	blx	r7
 80052c8:	3001      	adds	r0, #1
 80052ca:	d1c0      	bne.n	800524e <_printf_float+0x31a>
 80052cc:	e68d      	b.n	8004fea <_printf_float+0xb6>
 80052ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052d0:	464b      	mov	r3, r9
 80052d2:	4631      	mov	r1, r6
 80052d4:	4628      	mov	r0, r5
 80052d6:	4442      	add	r2, r8
 80052d8:	47b8      	blx	r7
 80052da:	3001      	adds	r0, #1
 80052dc:	d1c3      	bne.n	8005266 <_printf_float+0x332>
 80052de:	e684      	b.n	8004fea <_printf_float+0xb6>
 80052e0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80052e4:	f1ba 0f01 	cmp.w	sl, #1
 80052e8:	dc01      	bgt.n	80052ee <_printf_float+0x3ba>
 80052ea:	07db      	lsls	r3, r3, #31
 80052ec:	d536      	bpl.n	800535c <_printf_float+0x428>
 80052ee:	2301      	movs	r3, #1
 80052f0:	4642      	mov	r2, r8
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f ae76 	beq.w	8004fea <_printf_float+0xb6>
 80052fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005302:	4631      	mov	r1, r6
 8005304:	4628      	mov	r0, r5
 8005306:	47b8      	blx	r7
 8005308:	3001      	adds	r0, #1
 800530a:	f43f ae6e 	beq.w	8004fea <_printf_float+0xb6>
 800530e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005312:	2200      	movs	r2, #0
 8005314:	2300      	movs	r3, #0
 8005316:	f10a 3aff 	add.w	sl, sl, #4294967295
 800531a:	f7fb fb45 	bl	80009a8 <__aeabi_dcmpeq>
 800531e:	b9c0      	cbnz	r0, 8005352 <_printf_float+0x41e>
 8005320:	4653      	mov	r3, sl
 8005322:	f108 0201 	add.w	r2, r8, #1
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	47b8      	blx	r7
 800532c:	3001      	adds	r0, #1
 800532e:	d10c      	bne.n	800534a <_printf_float+0x416>
 8005330:	e65b      	b.n	8004fea <_printf_float+0xb6>
 8005332:	2301      	movs	r3, #1
 8005334:	465a      	mov	r2, fp
 8005336:	4631      	mov	r1, r6
 8005338:	4628      	mov	r0, r5
 800533a:	47b8      	blx	r7
 800533c:	3001      	adds	r0, #1
 800533e:	f43f ae54 	beq.w	8004fea <_printf_float+0xb6>
 8005342:	f108 0801 	add.w	r8, r8, #1
 8005346:	45d0      	cmp	r8, sl
 8005348:	dbf3      	blt.n	8005332 <_printf_float+0x3fe>
 800534a:	464b      	mov	r3, r9
 800534c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005350:	e6e0      	b.n	8005114 <_printf_float+0x1e0>
 8005352:	f04f 0800 	mov.w	r8, #0
 8005356:	f104 0b1a 	add.w	fp, r4, #26
 800535a:	e7f4      	b.n	8005346 <_printf_float+0x412>
 800535c:	2301      	movs	r3, #1
 800535e:	4642      	mov	r2, r8
 8005360:	e7e1      	b.n	8005326 <_printf_float+0x3f2>
 8005362:	2301      	movs	r3, #1
 8005364:	464a      	mov	r2, r9
 8005366:	4631      	mov	r1, r6
 8005368:	4628      	mov	r0, r5
 800536a:	47b8      	blx	r7
 800536c:	3001      	adds	r0, #1
 800536e:	f43f ae3c 	beq.w	8004fea <_printf_float+0xb6>
 8005372:	f108 0801 	add.w	r8, r8, #1
 8005376:	68e3      	ldr	r3, [r4, #12]
 8005378:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800537a:	1a5b      	subs	r3, r3, r1
 800537c:	4543      	cmp	r3, r8
 800537e:	dcf0      	bgt.n	8005362 <_printf_float+0x42e>
 8005380:	e6fd      	b.n	800517e <_printf_float+0x24a>
 8005382:	f04f 0800 	mov.w	r8, #0
 8005386:	f104 0919 	add.w	r9, r4, #25
 800538a:	e7f4      	b.n	8005376 <_printf_float+0x442>

0800538c <_printf_common>:
 800538c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	4616      	mov	r6, r2
 8005392:	4698      	mov	r8, r3
 8005394:	688a      	ldr	r2, [r1, #8]
 8005396:	690b      	ldr	r3, [r1, #16]
 8005398:	4607      	mov	r7, r0
 800539a:	4293      	cmp	r3, r2
 800539c:	bfb8      	it	lt
 800539e:	4613      	movlt	r3, r2
 80053a0:	6033      	str	r3, [r6, #0]
 80053a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053a6:	460c      	mov	r4, r1
 80053a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053ac:	b10a      	cbz	r2, 80053b2 <_printf_common+0x26>
 80053ae:	3301      	adds	r3, #1
 80053b0:	6033      	str	r3, [r6, #0]
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	0699      	lsls	r1, r3, #26
 80053b6:	bf42      	ittt	mi
 80053b8:	6833      	ldrmi	r3, [r6, #0]
 80053ba:	3302      	addmi	r3, #2
 80053bc:	6033      	strmi	r3, [r6, #0]
 80053be:	6825      	ldr	r5, [r4, #0]
 80053c0:	f015 0506 	ands.w	r5, r5, #6
 80053c4:	d106      	bne.n	80053d4 <_printf_common+0x48>
 80053c6:	f104 0a19 	add.w	sl, r4, #25
 80053ca:	68e3      	ldr	r3, [r4, #12]
 80053cc:	6832      	ldr	r2, [r6, #0]
 80053ce:	1a9b      	subs	r3, r3, r2
 80053d0:	42ab      	cmp	r3, r5
 80053d2:	dc2b      	bgt.n	800542c <_printf_common+0xa0>
 80053d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053d8:	6822      	ldr	r2, [r4, #0]
 80053da:	3b00      	subs	r3, #0
 80053dc:	bf18      	it	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	0692      	lsls	r2, r2, #26
 80053e2:	d430      	bmi.n	8005446 <_printf_common+0xba>
 80053e4:	4641      	mov	r1, r8
 80053e6:	4638      	mov	r0, r7
 80053e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053ec:	47c8      	blx	r9
 80053ee:	3001      	adds	r0, #1
 80053f0:	d023      	beq.n	800543a <_printf_common+0xae>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	6922      	ldr	r2, [r4, #16]
 80053f6:	f003 0306 	and.w	r3, r3, #6
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	bf14      	ite	ne
 80053fe:	2500      	movne	r5, #0
 8005400:	6833      	ldreq	r3, [r6, #0]
 8005402:	f04f 0600 	mov.w	r6, #0
 8005406:	bf08      	it	eq
 8005408:	68e5      	ldreq	r5, [r4, #12]
 800540a:	f104 041a 	add.w	r4, r4, #26
 800540e:	bf08      	it	eq
 8005410:	1aed      	subeq	r5, r5, r3
 8005412:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005416:	bf08      	it	eq
 8005418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800541c:	4293      	cmp	r3, r2
 800541e:	bfc4      	itt	gt
 8005420:	1a9b      	subgt	r3, r3, r2
 8005422:	18ed      	addgt	r5, r5, r3
 8005424:	42b5      	cmp	r5, r6
 8005426:	d11a      	bne.n	800545e <_printf_common+0xd2>
 8005428:	2000      	movs	r0, #0
 800542a:	e008      	b.n	800543e <_printf_common+0xb2>
 800542c:	2301      	movs	r3, #1
 800542e:	4652      	mov	r2, sl
 8005430:	4641      	mov	r1, r8
 8005432:	4638      	mov	r0, r7
 8005434:	47c8      	blx	r9
 8005436:	3001      	adds	r0, #1
 8005438:	d103      	bne.n	8005442 <_printf_common+0xb6>
 800543a:	f04f 30ff 	mov.w	r0, #4294967295
 800543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005442:	3501      	adds	r5, #1
 8005444:	e7c1      	b.n	80053ca <_printf_common+0x3e>
 8005446:	2030      	movs	r0, #48	@ 0x30
 8005448:	18e1      	adds	r1, r4, r3
 800544a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005454:	4422      	add	r2, r4
 8005456:	3302      	adds	r3, #2
 8005458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800545c:	e7c2      	b.n	80053e4 <_printf_common+0x58>
 800545e:	2301      	movs	r3, #1
 8005460:	4622      	mov	r2, r4
 8005462:	4641      	mov	r1, r8
 8005464:	4638      	mov	r0, r7
 8005466:	47c8      	blx	r9
 8005468:	3001      	adds	r0, #1
 800546a:	d0e6      	beq.n	800543a <_printf_common+0xae>
 800546c:	3601      	adds	r6, #1
 800546e:	e7d9      	b.n	8005424 <_printf_common+0x98>

08005470 <_printf_i>:
 8005470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	7e0f      	ldrb	r7, [r1, #24]
 8005476:	4691      	mov	r9, r2
 8005478:	2f78      	cmp	r7, #120	@ 0x78
 800547a:	4680      	mov	r8, r0
 800547c:	460c      	mov	r4, r1
 800547e:	469a      	mov	sl, r3
 8005480:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005486:	d807      	bhi.n	8005498 <_printf_i+0x28>
 8005488:	2f62      	cmp	r7, #98	@ 0x62
 800548a:	d80a      	bhi.n	80054a2 <_printf_i+0x32>
 800548c:	2f00      	cmp	r7, #0
 800548e:	f000 80d3 	beq.w	8005638 <_printf_i+0x1c8>
 8005492:	2f58      	cmp	r7, #88	@ 0x58
 8005494:	f000 80ba 	beq.w	800560c <_printf_i+0x19c>
 8005498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800549c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054a0:	e03a      	b.n	8005518 <_printf_i+0xa8>
 80054a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054a6:	2b15      	cmp	r3, #21
 80054a8:	d8f6      	bhi.n	8005498 <_printf_i+0x28>
 80054aa:	a101      	add	r1, pc, #4	@ (adr r1, 80054b0 <_printf_i+0x40>)
 80054ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b0:	08005509 	.word	0x08005509
 80054b4:	0800551d 	.word	0x0800551d
 80054b8:	08005499 	.word	0x08005499
 80054bc:	08005499 	.word	0x08005499
 80054c0:	08005499 	.word	0x08005499
 80054c4:	08005499 	.word	0x08005499
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	08005499 	.word	0x08005499
 80054d0:	08005499 	.word	0x08005499
 80054d4:	08005499 	.word	0x08005499
 80054d8:	08005499 	.word	0x08005499
 80054dc:	0800561f 	.word	0x0800561f
 80054e0:	08005547 	.word	0x08005547
 80054e4:	080055d9 	.word	0x080055d9
 80054e8:	08005499 	.word	0x08005499
 80054ec:	08005499 	.word	0x08005499
 80054f0:	08005641 	.word	0x08005641
 80054f4:	08005499 	.word	0x08005499
 80054f8:	08005547 	.word	0x08005547
 80054fc:	08005499 	.word	0x08005499
 8005500:	08005499 	.word	0x08005499
 8005504:	080055e1 	.word	0x080055e1
 8005508:	6833      	ldr	r3, [r6, #0]
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6032      	str	r2, [r6, #0]
 8005510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005518:	2301      	movs	r3, #1
 800551a:	e09e      	b.n	800565a <_printf_i+0x1ea>
 800551c:	6833      	ldr	r3, [r6, #0]
 800551e:	6820      	ldr	r0, [r4, #0]
 8005520:	1d19      	adds	r1, r3, #4
 8005522:	6031      	str	r1, [r6, #0]
 8005524:	0606      	lsls	r6, r0, #24
 8005526:	d501      	bpl.n	800552c <_printf_i+0xbc>
 8005528:	681d      	ldr	r5, [r3, #0]
 800552a:	e003      	b.n	8005534 <_printf_i+0xc4>
 800552c:	0645      	lsls	r5, r0, #25
 800552e:	d5fb      	bpl.n	8005528 <_printf_i+0xb8>
 8005530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005534:	2d00      	cmp	r5, #0
 8005536:	da03      	bge.n	8005540 <_printf_i+0xd0>
 8005538:	232d      	movs	r3, #45	@ 0x2d
 800553a:	426d      	negs	r5, r5
 800553c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005540:	230a      	movs	r3, #10
 8005542:	4859      	ldr	r0, [pc, #356]	@ (80056a8 <_printf_i+0x238>)
 8005544:	e011      	b.n	800556a <_printf_i+0xfa>
 8005546:	6821      	ldr	r1, [r4, #0]
 8005548:	6833      	ldr	r3, [r6, #0]
 800554a:	0608      	lsls	r0, r1, #24
 800554c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005550:	d402      	bmi.n	8005558 <_printf_i+0xe8>
 8005552:	0649      	lsls	r1, r1, #25
 8005554:	bf48      	it	mi
 8005556:	b2ad      	uxthmi	r5, r5
 8005558:	2f6f      	cmp	r7, #111	@ 0x6f
 800555a:	6033      	str	r3, [r6, #0]
 800555c:	bf14      	ite	ne
 800555e:	230a      	movne	r3, #10
 8005560:	2308      	moveq	r3, #8
 8005562:	4851      	ldr	r0, [pc, #324]	@ (80056a8 <_printf_i+0x238>)
 8005564:	2100      	movs	r1, #0
 8005566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800556a:	6866      	ldr	r6, [r4, #4]
 800556c:	2e00      	cmp	r6, #0
 800556e:	bfa8      	it	ge
 8005570:	6821      	ldrge	r1, [r4, #0]
 8005572:	60a6      	str	r6, [r4, #8]
 8005574:	bfa4      	itt	ge
 8005576:	f021 0104 	bicge.w	r1, r1, #4
 800557a:	6021      	strge	r1, [r4, #0]
 800557c:	b90d      	cbnz	r5, 8005582 <_printf_i+0x112>
 800557e:	2e00      	cmp	r6, #0
 8005580:	d04b      	beq.n	800561a <_printf_i+0x1aa>
 8005582:	4616      	mov	r6, r2
 8005584:	fbb5 f1f3 	udiv	r1, r5, r3
 8005588:	fb03 5711 	mls	r7, r3, r1, r5
 800558c:	5dc7      	ldrb	r7, [r0, r7]
 800558e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005592:	462f      	mov	r7, r5
 8005594:	42bb      	cmp	r3, r7
 8005596:	460d      	mov	r5, r1
 8005598:	d9f4      	bls.n	8005584 <_printf_i+0x114>
 800559a:	2b08      	cmp	r3, #8
 800559c:	d10b      	bne.n	80055b6 <_printf_i+0x146>
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	07df      	lsls	r7, r3, #31
 80055a2:	d508      	bpl.n	80055b6 <_printf_i+0x146>
 80055a4:	6923      	ldr	r3, [r4, #16]
 80055a6:	6861      	ldr	r1, [r4, #4]
 80055a8:	4299      	cmp	r1, r3
 80055aa:	bfde      	ittt	le
 80055ac:	2330      	movle	r3, #48	@ 0x30
 80055ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055b6:	1b92      	subs	r2, r2, r6
 80055b8:	6122      	str	r2, [r4, #16]
 80055ba:	464b      	mov	r3, r9
 80055bc:	4621      	mov	r1, r4
 80055be:	4640      	mov	r0, r8
 80055c0:	f8cd a000 	str.w	sl, [sp]
 80055c4:	aa03      	add	r2, sp, #12
 80055c6:	f7ff fee1 	bl	800538c <_printf_common>
 80055ca:	3001      	adds	r0, #1
 80055cc:	d14a      	bne.n	8005664 <_printf_i+0x1f4>
 80055ce:	f04f 30ff 	mov.w	r0, #4294967295
 80055d2:	b004      	add	sp, #16
 80055d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	f043 0320 	orr.w	r3, r3, #32
 80055de:	6023      	str	r3, [r4, #0]
 80055e0:	2778      	movs	r7, #120	@ 0x78
 80055e2:	4832      	ldr	r0, [pc, #200]	@ (80056ac <_printf_i+0x23c>)
 80055e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	6831      	ldr	r1, [r6, #0]
 80055ec:	061f      	lsls	r7, r3, #24
 80055ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80055f2:	d402      	bmi.n	80055fa <_printf_i+0x18a>
 80055f4:	065f      	lsls	r7, r3, #25
 80055f6:	bf48      	it	mi
 80055f8:	b2ad      	uxthmi	r5, r5
 80055fa:	6031      	str	r1, [r6, #0]
 80055fc:	07d9      	lsls	r1, r3, #31
 80055fe:	bf44      	itt	mi
 8005600:	f043 0320 	orrmi.w	r3, r3, #32
 8005604:	6023      	strmi	r3, [r4, #0]
 8005606:	b11d      	cbz	r5, 8005610 <_printf_i+0x1a0>
 8005608:	2310      	movs	r3, #16
 800560a:	e7ab      	b.n	8005564 <_printf_i+0xf4>
 800560c:	4826      	ldr	r0, [pc, #152]	@ (80056a8 <_printf_i+0x238>)
 800560e:	e7e9      	b.n	80055e4 <_printf_i+0x174>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	f023 0320 	bic.w	r3, r3, #32
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	e7f6      	b.n	8005608 <_printf_i+0x198>
 800561a:	4616      	mov	r6, r2
 800561c:	e7bd      	b.n	800559a <_printf_i+0x12a>
 800561e:	6833      	ldr	r3, [r6, #0]
 8005620:	6825      	ldr	r5, [r4, #0]
 8005622:	1d18      	adds	r0, r3, #4
 8005624:	6961      	ldr	r1, [r4, #20]
 8005626:	6030      	str	r0, [r6, #0]
 8005628:	062e      	lsls	r6, r5, #24
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	d501      	bpl.n	8005632 <_printf_i+0x1c2>
 800562e:	6019      	str	r1, [r3, #0]
 8005630:	e002      	b.n	8005638 <_printf_i+0x1c8>
 8005632:	0668      	lsls	r0, r5, #25
 8005634:	d5fb      	bpl.n	800562e <_printf_i+0x1be>
 8005636:	8019      	strh	r1, [r3, #0]
 8005638:	2300      	movs	r3, #0
 800563a:	4616      	mov	r6, r2
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	e7bc      	b.n	80055ba <_printf_i+0x14a>
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	2100      	movs	r1, #0
 8005644:	1d1a      	adds	r2, r3, #4
 8005646:	6032      	str	r2, [r6, #0]
 8005648:	681e      	ldr	r6, [r3, #0]
 800564a:	6862      	ldr	r2, [r4, #4]
 800564c:	4630      	mov	r0, r6
 800564e:	f000 fce8 	bl	8006022 <memchr>
 8005652:	b108      	cbz	r0, 8005658 <_printf_i+0x1e8>
 8005654:	1b80      	subs	r0, r0, r6
 8005656:	6060      	str	r0, [r4, #4]
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	2300      	movs	r3, #0
 800565e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005662:	e7aa      	b.n	80055ba <_printf_i+0x14a>
 8005664:	4632      	mov	r2, r6
 8005666:	4649      	mov	r1, r9
 8005668:	4640      	mov	r0, r8
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	47d0      	blx	sl
 800566e:	3001      	adds	r0, #1
 8005670:	d0ad      	beq.n	80055ce <_printf_i+0x15e>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	079b      	lsls	r3, r3, #30
 8005676:	d413      	bmi.n	80056a0 <_printf_i+0x230>
 8005678:	68e0      	ldr	r0, [r4, #12]
 800567a:	9b03      	ldr	r3, [sp, #12]
 800567c:	4298      	cmp	r0, r3
 800567e:	bfb8      	it	lt
 8005680:	4618      	movlt	r0, r3
 8005682:	e7a6      	b.n	80055d2 <_printf_i+0x162>
 8005684:	2301      	movs	r3, #1
 8005686:	4632      	mov	r2, r6
 8005688:	4649      	mov	r1, r9
 800568a:	4640      	mov	r0, r8
 800568c:	47d0      	blx	sl
 800568e:	3001      	adds	r0, #1
 8005690:	d09d      	beq.n	80055ce <_printf_i+0x15e>
 8005692:	3501      	adds	r5, #1
 8005694:	68e3      	ldr	r3, [r4, #12]
 8005696:	9903      	ldr	r1, [sp, #12]
 8005698:	1a5b      	subs	r3, r3, r1
 800569a:	42ab      	cmp	r3, r5
 800569c:	dcf2      	bgt.n	8005684 <_printf_i+0x214>
 800569e:	e7eb      	b.n	8005678 <_printf_i+0x208>
 80056a0:	2500      	movs	r5, #0
 80056a2:	f104 0619 	add.w	r6, r4, #25
 80056a6:	e7f5      	b.n	8005694 <_printf_i+0x224>
 80056a8:	08009adc 	.word	0x08009adc
 80056ac:	08009aed 	.word	0x08009aed

080056b0 <_scanf_float>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	b087      	sub	sp, #28
 80056b6:	9303      	str	r3, [sp, #12]
 80056b8:	688b      	ldr	r3, [r1, #8]
 80056ba:	4617      	mov	r7, r2
 80056bc:	1e5a      	subs	r2, r3, #1
 80056be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80056c2:	bf82      	ittt	hi
 80056c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80056c8:	eb03 0b05 	addhi.w	fp, r3, r5
 80056cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80056d0:	460a      	mov	r2, r1
 80056d2:	f04f 0500 	mov.w	r5, #0
 80056d6:	bf88      	it	hi
 80056d8:	608b      	strhi	r3, [r1, #8]
 80056da:	680b      	ldr	r3, [r1, #0]
 80056dc:	4680      	mov	r8, r0
 80056de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80056e2:	f842 3b1c 	str.w	r3, [r2], #28
 80056e6:	460c      	mov	r4, r1
 80056e8:	bf98      	it	ls
 80056ea:	f04f 0b00 	movls.w	fp, #0
 80056ee:	4616      	mov	r6, r2
 80056f0:	46aa      	mov	sl, r5
 80056f2:	46a9      	mov	r9, r5
 80056f4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80056f8:	9201      	str	r2, [sp, #4]
 80056fa:	9502      	str	r5, [sp, #8]
 80056fc:	68a2      	ldr	r2, [r4, #8]
 80056fe:	b152      	cbz	r2, 8005716 <_scanf_float+0x66>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b4e      	cmp	r3, #78	@ 0x4e
 8005706:	d865      	bhi.n	80057d4 <_scanf_float+0x124>
 8005708:	2b40      	cmp	r3, #64	@ 0x40
 800570a:	d83d      	bhi.n	8005788 <_scanf_float+0xd8>
 800570c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005710:	b2c8      	uxtb	r0, r1
 8005712:	280e      	cmp	r0, #14
 8005714:	d93b      	bls.n	800578e <_scanf_float+0xde>
 8005716:	f1b9 0f00 	cmp.w	r9, #0
 800571a:	d003      	beq.n	8005724 <_scanf_float+0x74>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005722:	6023      	str	r3, [r4, #0]
 8005724:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005728:	f1ba 0f01 	cmp.w	sl, #1
 800572c:	f200 8118 	bhi.w	8005960 <_scanf_float+0x2b0>
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	429e      	cmp	r6, r3
 8005734:	f200 8109 	bhi.w	800594a <_scanf_float+0x29a>
 8005738:	2001      	movs	r0, #1
 800573a:	b007      	add	sp, #28
 800573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005740:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005744:	2a0d      	cmp	r2, #13
 8005746:	d8e6      	bhi.n	8005716 <_scanf_float+0x66>
 8005748:	a101      	add	r1, pc, #4	@ (adr r1, 8005750 <_scanf_float+0xa0>)
 800574a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800574e:	bf00      	nop
 8005750:	08005897 	.word	0x08005897
 8005754:	08005717 	.word	0x08005717
 8005758:	08005717 	.word	0x08005717
 800575c:	08005717 	.word	0x08005717
 8005760:	080058f7 	.word	0x080058f7
 8005764:	080058cf 	.word	0x080058cf
 8005768:	08005717 	.word	0x08005717
 800576c:	08005717 	.word	0x08005717
 8005770:	080058a5 	.word	0x080058a5
 8005774:	08005717 	.word	0x08005717
 8005778:	08005717 	.word	0x08005717
 800577c:	08005717 	.word	0x08005717
 8005780:	08005717 	.word	0x08005717
 8005784:	0800585d 	.word	0x0800585d
 8005788:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800578c:	e7da      	b.n	8005744 <_scanf_float+0x94>
 800578e:	290e      	cmp	r1, #14
 8005790:	d8c1      	bhi.n	8005716 <_scanf_float+0x66>
 8005792:	a001      	add	r0, pc, #4	@ (adr r0, 8005798 <_scanf_float+0xe8>)
 8005794:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005798:	0800584d 	.word	0x0800584d
 800579c:	08005717 	.word	0x08005717
 80057a0:	0800584d 	.word	0x0800584d
 80057a4:	080058e3 	.word	0x080058e3
 80057a8:	08005717 	.word	0x08005717
 80057ac:	080057f5 	.word	0x080057f5
 80057b0:	08005833 	.word	0x08005833
 80057b4:	08005833 	.word	0x08005833
 80057b8:	08005833 	.word	0x08005833
 80057bc:	08005833 	.word	0x08005833
 80057c0:	08005833 	.word	0x08005833
 80057c4:	08005833 	.word	0x08005833
 80057c8:	08005833 	.word	0x08005833
 80057cc:	08005833 	.word	0x08005833
 80057d0:	08005833 	.word	0x08005833
 80057d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80057d6:	d809      	bhi.n	80057ec <_scanf_float+0x13c>
 80057d8:	2b60      	cmp	r3, #96	@ 0x60
 80057da:	d8b1      	bhi.n	8005740 <_scanf_float+0x90>
 80057dc:	2b54      	cmp	r3, #84	@ 0x54
 80057de:	d07b      	beq.n	80058d8 <_scanf_float+0x228>
 80057e0:	2b59      	cmp	r3, #89	@ 0x59
 80057e2:	d198      	bne.n	8005716 <_scanf_float+0x66>
 80057e4:	2d07      	cmp	r5, #7
 80057e6:	d196      	bne.n	8005716 <_scanf_float+0x66>
 80057e8:	2508      	movs	r5, #8
 80057ea:	e02c      	b.n	8005846 <_scanf_float+0x196>
 80057ec:	2b74      	cmp	r3, #116	@ 0x74
 80057ee:	d073      	beq.n	80058d8 <_scanf_float+0x228>
 80057f0:	2b79      	cmp	r3, #121	@ 0x79
 80057f2:	e7f6      	b.n	80057e2 <_scanf_float+0x132>
 80057f4:	6821      	ldr	r1, [r4, #0]
 80057f6:	05c8      	lsls	r0, r1, #23
 80057f8:	d51b      	bpl.n	8005832 <_scanf_float+0x182>
 80057fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80057fe:	6021      	str	r1, [r4, #0]
 8005800:	f109 0901 	add.w	r9, r9, #1
 8005804:	f1bb 0f00 	cmp.w	fp, #0
 8005808:	d003      	beq.n	8005812 <_scanf_float+0x162>
 800580a:	3201      	adds	r2, #1
 800580c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005810:	60a2      	str	r2, [r4, #8]
 8005812:	68a3      	ldr	r3, [r4, #8]
 8005814:	3b01      	subs	r3, #1
 8005816:	60a3      	str	r3, [r4, #8]
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	3301      	adds	r3, #1
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3b01      	subs	r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	f340 8087 	ble.w	8005938 <_scanf_float+0x288>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	e764      	b.n	80056fc <_scanf_float+0x4c>
 8005832:	eb1a 0105 	adds.w	r1, sl, r5
 8005836:	f47f af6e 	bne.w	8005716 <_scanf_float+0x66>
 800583a:	460d      	mov	r5, r1
 800583c:	468a      	mov	sl, r1
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005844:	6022      	str	r2, [r4, #0]
 8005846:	f806 3b01 	strb.w	r3, [r6], #1
 800584a:	e7e2      	b.n	8005812 <_scanf_float+0x162>
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	0610      	lsls	r0, r2, #24
 8005850:	f57f af61 	bpl.w	8005716 <_scanf_float+0x66>
 8005854:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005858:	6022      	str	r2, [r4, #0]
 800585a:	e7f4      	b.n	8005846 <_scanf_float+0x196>
 800585c:	f1ba 0f00 	cmp.w	sl, #0
 8005860:	d10e      	bne.n	8005880 <_scanf_float+0x1d0>
 8005862:	f1b9 0f00 	cmp.w	r9, #0
 8005866:	d10e      	bne.n	8005886 <_scanf_float+0x1d6>
 8005868:	6822      	ldr	r2, [r4, #0]
 800586a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800586e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005872:	d108      	bne.n	8005886 <_scanf_float+0x1d6>
 8005874:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005878:	f04f 0a01 	mov.w	sl, #1
 800587c:	6022      	str	r2, [r4, #0]
 800587e:	e7e2      	b.n	8005846 <_scanf_float+0x196>
 8005880:	f1ba 0f02 	cmp.w	sl, #2
 8005884:	d055      	beq.n	8005932 <_scanf_float+0x282>
 8005886:	2d01      	cmp	r5, #1
 8005888:	d002      	beq.n	8005890 <_scanf_float+0x1e0>
 800588a:	2d04      	cmp	r5, #4
 800588c:	f47f af43 	bne.w	8005716 <_scanf_float+0x66>
 8005890:	3501      	adds	r5, #1
 8005892:	b2ed      	uxtb	r5, r5
 8005894:	e7d7      	b.n	8005846 <_scanf_float+0x196>
 8005896:	f1ba 0f01 	cmp.w	sl, #1
 800589a:	f47f af3c 	bne.w	8005716 <_scanf_float+0x66>
 800589e:	f04f 0a02 	mov.w	sl, #2
 80058a2:	e7d0      	b.n	8005846 <_scanf_float+0x196>
 80058a4:	b97d      	cbnz	r5, 80058c6 <_scanf_float+0x216>
 80058a6:	f1b9 0f00 	cmp.w	r9, #0
 80058aa:	f47f af37 	bne.w	800571c <_scanf_float+0x6c>
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80058b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80058b8:	f040 8103 	bne.w	8005ac2 <_scanf_float+0x412>
 80058bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80058c0:	2501      	movs	r5, #1
 80058c2:	6022      	str	r2, [r4, #0]
 80058c4:	e7bf      	b.n	8005846 <_scanf_float+0x196>
 80058c6:	2d03      	cmp	r5, #3
 80058c8:	d0e2      	beq.n	8005890 <_scanf_float+0x1e0>
 80058ca:	2d05      	cmp	r5, #5
 80058cc:	e7de      	b.n	800588c <_scanf_float+0x1dc>
 80058ce:	2d02      	cmp	r5, #2
 80058d0:	f47f af21 	bne.w	8005716 <_scanf_float+0x66>
 80058d4:	2503      	movs	r5, #3
 80058d6:	e7b6      	b.n	8005846 <_scanf_float+0x196>
 80058d8:	2d06      	cmp	r5, #6
 80058da:	f47f af1c 	bne.w	8005716 <_scanf_float+0x66>
 80058de:	2507      	movs	r5, #7
 80058e0:	e7b1      	b.n	8005846 <_scanf_float+0x196>
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	0591      	lsls	r1, r2, #22
 80058e6:	f57f af16 	bpl.w	8005716 <_scanf_float+0x66>
 80058ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80058f4:	e7a7      	b.n	8005846 <_scanf_float+0x196>
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80058fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005900:	d006      	beq.n	8005910 <_scanf_float+0x260>
 8005902:	0550      	lsls	r0, r2, #21
 8005904:	f57f af07 	bpl.w	8005716 <_scanf_float+0x66>
 8005908:	f1b9 0f00 	cmp.w	r9, #0
 800590c:	f000 80d9 	beq.w	8005ac2 <_scanf_float+0x412>
 8005910:	0591      	lsls	r1, r2, #22
 8005912:	bf58      	it	pl
 8005914:	9902      	ldrpl	r1, [sp, #8]
 8005916:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800591a:	bf58      	it	pl
 800591c:	eba9 0101 	subpl.w	r1, r9, r1
 8005920:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005924:	f04f 0900 	mov.w	r9, #0
 8005928:	bf58      	it	pl
 800592a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800592e:	6022      	str	r2, [r4, #0]
 8005930:	e789      	b.n	8005846 <_scanf_float+0x196>
 8005932:	f04f 0a03 	mov.w	sl, #3
 8005936:	e786      	b.n	8005846 <_scanf_float+0x196>
 8005938:	4639      	mov	r1, r7
 800593a:	4640      	mov	r0, r8
 800593c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005940:	4798      	blx	r3
 8005942:	2800      	cmp	r0, #0
 8005944:	f43f aeda 	beq.w	80056fc <_scanf_float+0x4c>
 8005948:	e6e5      	b.n	8005716 <_scanf_float+0x66>
 800594a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800594e:	463a      	mov	r2, r7
 8005950:	4640      	mov	r0, r8
 8005952:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005956:	4798      	blx	r3
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	3b01      	subs	r3, #1
 800595c:	6123      	str	r3, [r4, #16]
 800595e:	e6e7      	b.n	8005730 <_scanf_float+0x80>
 8005960:	1e6b      	subs	r3, r5, #1
 8005962:	2b06      	cmp	r3, #6
 8005964:	d824      	bhi.n	80059b0 <_scanf_float+0x300>
 8005966:	2d02      	cmp	r5, #2
 8005968:	d836      	bhi.n	80059d8 <_scanf_float+0x328>
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	429e      	cmp	r6, r3
 800596e:	f67f aee3 	bls.w	8005738 <_scanf_float+0x88>
 8005972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005976:	463a      	mov	r2, r7
 8005978:	4640      	mov	r0, r8
 800597a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800597e:	4798      	blx	r3
 8005980:	6923      	ldr	r3, [r4, #16]
 8005982:	3b01      	subs	r3, #1
 8005984:	6123      	str	r3, [r4, #16]
 8005986:	e7f0      	b.n	800596a <_scanf_float+0x2ba>
 8005988:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800598c:	463a      	mov	r2, r7
 800598e:	4640      	mov	r0, r8
 8005990:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005994:	4798      	blx	r3
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	3b01      	subs	r3, #1
 800599a:	6123      	str	r3, [r4, #16]
 800599c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059a0:	fa5f fa8a 	uxtb.w	sl, sl
 80059a4:	f1ba 0f02 	cmp.w	sl, #2
 80059a8:	d1ee      	bne.n	8005988 <_scanf_float+0x2d8>
 80059aa:	3d03      	subs	r5, #3
 80059ac:	b2ed      	uxtb	r5, r5
 80059ae:	1b76      	subs	r6, r6, r5
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	05da      	lsls	r2, r3, #23
 80059b4:	d530      	bpl.n	8005a18 <_scanf_float+0x368>
 80059b6:	055b      	lsls	r3, r3, #21
 80059b8:	d511      	bpl.n	80059de <_scanf_float+0x32e>
 80059ba:	9b01      	ldr	r3, [sp, #4]
 80059bc:	429e      	cmp	r6, r3
 80059be:	f67f aebb 	bls.w	8005738 <_scanf_float+0x88>
 80059c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059c6:	463a      	mov	r2, r7
 80059c8:	4640      	mov	r0, r8
 80059ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059ce:	4798      	blx	r3
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	6123      	str	r3, [r4, #16]
 80059d6:	e7f0      	b.n	80059ba <_scanf_float+0x30a>
 80059d8:	46aa      	mov	sl, r5
 80059da:	46b3      	mov	fp, r6
 80059dc:	e7de      	b.n	800599c <_scanf_float+0x2ec>
 80059de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80059e2:	6923      	ldr	r3, [r4, #16]
 80059e4:	2965      	cmp	r1, #101	@ 0x65
 80059e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80059ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80059ee:	6123      	str	r3, [r4, #16]
 80059f0:	d00c      	beq.n	8005a0c <_scanf_float+0x35c>
 80059f2:	2945      	cmp	r1, #69	@ 0x45
 80059f4:	d00a      	beq.n	8005a0c <_scanf_float+0x35c>
 80059f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059fa:	463a      	mov	r2, r7
 80059fc:	4640      	mov	r0, r8
 80059fe:	4798      	blx	r3
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	1eb5      	subs	r5, r6, #2
 8005a0a:	6123      	str	r3, [r4, #16]
 8005a0c:	463a      	mov	r2, r7
 8005a0e:	4640      	mov	r0, r8
 8005a10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a14:	4798      	blx	r3
 8005a16:	462e      	mov	r6, r5
 8005a18:	6822      	ldr	r2, [r4, #0]
 8005a1a:	f012 0210 	ands.w	r2, r2, #16
 8005a1e:	d001      	beq.n	8005a24 <_scanf_float+0x374>
 8005a20:	2000      	movs	r0, #0
 8005a22:	e68a      	b.n	800573a <_scanf_float+0x8a>
 8005a24:	7032      	strb	r2, [r6, #0]
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a30:	d11c      	bne.n	8005a6c <_scanf_float+0x3bc>
 8005a32:	9b02      	ldr	r3, [sp, #8]
 8005a34:	454b      	cmp	r3, r9
 8005a36:	eba3 0209 	sub.w	r2, r3, r9
 8005a3a:	d123      	bne.n	8005a84 <_scanf_float+0x3d4>
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4640      	mov	r0, r8
 8005a40:	9901      	ldr	r1, [sp, #4]
 8005a42:	f002 fcf1 	bl	8008428 <_strtod_r>
 8005a46:	9b03      	ldr	r3, [sp, #12]
 8005a48:	6825      	ldr	r5, [r4, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f015 0f02 	tst.w	r5, #2
 8005a50:	4606      	mov	r6, r0
 8005a52:	460f      	mov	r7, r1
 8005a54:	f103 0204 	add.w	r2, r3, #4
 8005a58:	d01f      	beq.n	8005a9a <_scanf_float+0x3ea>
 8005a5a:	9903      	ldr	r1, [sp, #12]
 8005a5c:	600a      	str	r2, [r1, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	e9c3 6700 	strd	r6, r7, [r3]
 8005a64:	68e3      	ldr	r3, [r4, #12]
 8005a66:	3301      	adds	r3, #1
 8005a68:	60e3      	str	r3, [r4, #12]
 8005a6a:	e7d9      	b.n	8005a20 <_scanf_float+0x370>
 8005a6c:	9b04      	ldr	r3, [sp, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0e4      	beq.n	8005a3c <_scanf_float+0x38c>
 8005a72:	9905      	ldr	r1, [sp, #20]
 8005a74:	230a      	movs	r3, #10
 8005a76:	4640      	mov	r0, r8
 8005a78:	3101      	adds	r1, #1
 8005a7a:	f002 fd55 	bl	8008528 <_strtol_r>
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	9e05      	ldr	r6, [sp, #20]
 8005a82:	1ac2      	subs	r2, r0, r3
 8005a84:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005a88:	429e      	cmp	r6, r3
 8005a8a:	bf28      	it	cs
 8005a8c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005a90:	4630      	mov	r0, r6
 8005a92:	490d      	ldr	r1, [pc, #52]	@ (8005ac8 <_scanf_float+0x418>)
 8005a94:	f000 f94e 	bl	8005d34 <siprintf>
 8005a98:	e7d0      	b.n	8005a3c <_scanf_float+0x38c>
 8005a9a:	076d      	lsls	r5, r5, #29
 8005a9c:	d4dd      	bmi.n	8005a5a <_scanf_float+0x3aa>
 8005a9e:	9d03      	ldr	r5, [sp, #12]
 8005aa0:	602a      	str	r2, [r5, #0]
 8005aa2:	681d      	ldr	r5, [r3, #0]
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	f7fa ffb0 	bl	8000a0c <__aeabi_dcmpun>
 8005aac:	b120      	cbz	r0, 8005ab8 <_scanf_float+0x408>
 8005aae:	4807      	ldr	r0, [pc, #28]	@ (8005acc <_scanf_float+0x41c>)
 8005ab0:	f000 fac6 	bl	8006040 <nanf>
 8005ab4:	6028      	str	r0, [r5, #0]
 8005ab6:	e7d5      	b.n	8005a64 <_scanf_float+0x3b4>
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4639      	mov	r1, r7
 8005abc:	f7fb f804 	bl	8000ac8 <__aeabi_d2f>
 8005ac0:	e7f8      	b.n	8005ab4 <_scanf_float+0x404>
 8005ac2:	f04f 0900 	mov.w	r9, #0
 8005ac6:	e62d      	b.n	8005724 <_scanf_float+0x74>
 8005ac8:	08009afe 	.word	0x08009afe
 8005acc:	08009e95 	.word	0x08009e95

08005ad0 <std>:
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	b510      	push	{r4, lr}
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8005ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ade:	6083      	str	r3, [r0, #8]
 8005ae0:	8181      	strh	r1, [r0, #12]
 8005ae2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ae4:	81c2      	strh	r2, [r0, #14]
 8005ae6:	6183      	str	r3, [r0, #24]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	2208      	movs	r2, #8
 8005aec:	305c      	adds	r0, #92	@ 0x5c
 8005aee:	f000 fa19 	bl	8005f24 <memset>
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <std+0x58>)
 8005af4:	6224      	str	r4, [r4, #32]
 8005af6:	6263      	str	r3, [r4, #36]	@ 0x24
 8005af8:	4b0c      	ldr	r3, [pc, #48]	@ (8005b2c <std+0x5c>)
 8005afa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005afc:	4b0c      	ldr	r3, [pc, #48]	@ (8005b30 <std+0x60>)
 8005afe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b00:	4b0c      	ldr	r3, [pc, #48]	@ (8005b34 <std+0x64>)
 8005b02:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b04:	4b0c      	ldr	r3, [pc, #48]	@ (8005b38 <std+0x68>)
 8005b06:	429c      	cmp	r4, r3
 8005b08:	d006      	beq.n	8005b18 <std+0x48>
 8005b0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b0e:	4294      	cmp	r4, r2
 8005b10:	d002      	beq.n	8005b18 <std+0x48>
 8005b12:	33d0      	adds	r3, #208	@ 0xd0
 8005b14:	429c      	cmp	r4, r3
 8005b16:	d105      	bne.n	8005b24 <std+0x54>
 8005b18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b20:	f000 ba7c 	b.w	800601c <__retarget_lock_init_recursive>
 8005b24:	bd10      	pop	{r4, pc}
 8005b26:	bf00      	nop
 8005b28:	08005d75 	.word	0x08005d75
 8005b2c:	08005d97 	.word	0x08005d97
 8005b30:	08005dcf 	.word	0x08005dcf
 8005b34:	08005df3 	.word	0x08005df3
 8005b38:	2000031c 	.word	0x2000031c

08005b3c <stdio_exit_handler>:
 8005b3c:	4a02      	ldr	r2, [pc, #8]	@ (8005b48 <stdio_exit_handler+0xc>)
 8005b3e:	4903      	ldr	r1, [pc, #12]	@ (8005b4c <stdio_exit_handler+0x10>)
 8005b40:	4803      	ldr	r0, [pc, #12]	@ (8005b50 <stdio_exit_handler+0x14>)
 8005b42:	f000 b869 	b.w	8005c18 <_fwalk_sglue>
 8005b46:	bf00      	nop
 8005b48:	20000028 	.word	0x20000028
 8005b4c:	08008b5d 	.word	0x08008b5d
 8005b50:	20000038 	.word	0x20000038

08005b54 <cleanup_stdio>:
 8005b54:	6841      	ldr	r1, [r0, #4]
 8005b56:	4b0c      	ldr	r3, [pc, #48]	@ (8005b88 <cleanup_stdio+0x34>)
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4299      	cmp	r1, r3
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	d001      	beq.n	8005b64 <cleanup_stdio+0x10>
 8005b60:	f002 fffc 	bl	8008b5c <_fflush_r>
 8005b64:	68a1      	ldr	r1, [r4, #8]
 8005b66:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <cleanup_stdio+0x38>)
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	d002      	beq.n	8005b72 <cleanup_stdio+0x1e>
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f002 fff5 	bl	8008b5c <_fflush_r>
 8005b72:	68e1      	ldr	r1, [r4, #12]
 8005b74:	4b06      	ldr	r3, [pc, #24]	@ (8005b90 <cleanup_stdio+0x3c>)
 8005b76:	4299      	cmp	r1, r3
 8005b78:	d004      	beq.n	8005b84 <cleanup_stdio+0x30>
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b80:	f002 bfec 	b.w	8008b5c <_fflush_r>
 8005b84:	bd10      	pop	{r4, pc}
 8005b86:	bf00      	nop
 8005b88:	2000031c 	.word	0x2000031c
 8005b8c:	20000384 	.word	0x20000384
 8005b90:	200003ec 	.word	0x200003ec

08005b94 <global_stdio_init.part.0>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <global_stdio_init.part.0+0x30>)
 8005b98:	4c0b      	ldr	r4, [pc, #44]	@ (8005bc8 <global_stdio_init.part.0+0x34>)
 8005b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005bcc <global_stdio_init.part.0+0x38>)
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	2104      	movs	r1, #4
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f7ff ff94 	bl	8005ad0 <std>
 8005ba8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bac:	2201      	movs	r2, #1
 8005bae:	2109      	movs	r1, #9
 8005bb0:	f7ff ff8e 	bl	8005ad0 <std>
 8005bb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bb8:	2202      	movs	r2, #2
 8005bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bbe:	2112      	movs	r1, #18
 8005bc0:	f7ff bf86 	b.w	8005ad0 <std>
 8005bc4:	20000454 	.word	0x20000454
 8005bc8:	2000031c 	.word	0x2000031c
 8005bcc:	08005b3d 	.word	0x08005b3d

08005bd0 <__sfp_lock_acquire>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	@ (8005bd8 <__sfp_lock_acquire+0x8>)
 8005bd2:	f000 ba24 	b.w	800601e <__retarget_lock_acquire_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	2000045d 	.word	0x2000045d

08005bdc <__sfp_lock_release>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	@ (8005be4 <__sfp_lock_release+0x8>)
 8005bde:	f000 ba1f 	b.w	8006020 <__retarget_lock_release_recursive>
 8005be2:	bf00      	nop
 8005be4:	2000045d 	.word	0x2000045d

08005be8 <__sinit>:
 8005be8:	b510      	push	{r4, lr}
 8005bea:	4604      	mov	r4, r0
 8005bec:	f7ff fff0 	bl	8005bd0 <__sfp_lock_acquire>
 8005bf0:	6a23      	ldr	r3, [r4, #32]
 8005bf2:	b11b      	cbz	r3, 8005bfc <__sinit+0x14>
 8005bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf8:	f7ff bff0 	b.w	8005bdc <__sfp_lock_release>
 8005bfc:	4b04      	ldr	r3, [pc, #16]	@ (8005c10 <__sinit+0x28>)
 8005bfe:	6223      	str	r3, [r4, #32]
 8005c00:	4b04      	ldr	r3, [pc, #16]	@ (8005c14 <__sinit+0x2c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f5      	bne.n	8005bf4 <__sinit+0xc>
 8005c08:	f7ff ffc4 	bl	8005b94 <global_stdio_init.part.0>
 8005c0c:	e7f2      	b.n	8005bf4 <__sinit+0xc>
 8005c0e:	bf00      	nop
 8005c10:	08005b55 	.word	0x08005b55
 8005c14:	20000454 	.word	0x20000454

08005c18 <_fwalk_sglue>:
 8005c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c1c:	4607      	mov	r7, r0
 8005c1e:	4688      	mov	r8, r1
 8005c20:	4614      	mov	r4, r2
 8005c22:	2600      	movs	r6, #0
 8005c24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c28:	f1b9 0901 	subs.w	r9, r9, #1
 8005c2c:	d505      	bpl.n	8005c3a <_fwalk_sglue+0x22>
 8005c2e:	6824      	ldr	r4, [r4, #0]
 8005c30:	2c00      	cmp	r4, #0
 8005c32:	d1f7      	bne.n	8005c24 <_fwalk_sglue+0xc>
 8005c34:	4630      	mov	r0, r6
 8005c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d907      	bls.n	8005c50 <_fwalk_sglue+0x38>
 8005c40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c44:	3301      	adds	r3, #1
 8005c46:	d003      	beq.n	8005c50 <_fwalk_sglue+0x38>
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	47c0      	blx	r8
 8005c4e:	4306      	orrs	r6, r0
 8005c50:	3568      	adds	r5, #104	@ 0x68
 8005c52:	e7e9      	b.n	8005c28 <_fwalk_sglue+0x10>

08005c54 <iprintf>:
 8005c54:	b40f      	push	{r0, r1, r2, r3}
 8005c56:	b507      	push	{r0, r1, r2, lr}
 8005c58:	4906      	ldr	r1, [pc, #24]	@ (8005c74 <iprintf+0x20>)
 8005c5a:	ab04      	add	r3, sp, #16
 8005c5c:	6808      	ldr	r0, [r1, #0]
 8005c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c62:	6881      	ldr	r1, [r0, #8]
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	f002 fde1 	bl	800882c <_vfiprintf_r>
 8005c6a:	b003      	add	sp, #12
 8005c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c70:	b004      	add	sp, #16
 8005c72:	4770      	bx	lr
 8005c74:	20000034 	.word	0x20000034

08005c78 <_puts_r>:
 8005c78:	6a03      	ldr	r3, [r0, #32]
 8005c7a:	b570      	push	{r4, r5, r6, lr}
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	460e      	mov	r6, r1
 8005c80:	6884      	ldr	r4, [r0, #8]
 8005c82:	b90b      	cbnz	r3, 8005c88 <_puts_r+0x10>
 8005c84:	f7ff ffb0 	bl	8005be8 <__sinit>
 8005c88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c8a:	07db      	lsls	r3, r3, #31
 8005c8c:	d405      	bmi.n	8005c9a <_puts_r+0x22>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	0598      	lsls	r0, r3, #22
 8005c92:	d402      	bmi.n	8005c9a <_puts_r+0x22>
 8005c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c96:	f000 f9c2 	bl	800601e <__retarget_lock_acquire_recursive>
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	0719      	lsls	r1, r3, #28
 8005c9e:	d502      	bpl.n	8005ca6 <_puts_r+0x2e>
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d135      	bne.n	8005d12 <_puts_r+0x9a>
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 f8e5 	bl	8005e78 <__swsetup_r>
 8005cae:	b380      	cbz	r0, 8005d12 <_puts_r+0x9a>
 8005cb0:	f04f 35ff 	mov.w	r5, #4294967295
 8005cb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cb6:	07da      	lsls	r2, r3, #31
 8005cb8:	d405      	bmi.n	8005cc6 <_puts_r+0x4e>
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	059b      	lsls	r3, r3, #22
 8005cbe:	d402      	bmi.n	8005cc6 <_puts_r+0x4e>
 8005cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cc2:	f000 f9ad 	bl	8006020 <__retarget_lock_release_recursive>
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	bd70      	pop	{r4, r5, r6, pc}
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	da04      	bge.n	8005cd8 <_puts_r+0x60>
 8005cce:	69a2      	ldr	r2, [r4, #24]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	dc17      	bgt.n	8005d04 <_puts_r+0x8c>
 8005cd4:	290a      	cmp	r1, #10
 8005cd6:	d015      	beq.n	8005d04 <_puts_r+0x8c>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	6022      	str	r2, [r4, #0]
 8005cde:	7019      	strb	r1, [r3, #0]
 8005ce0:	68a3      	ldr	r3, [r4, #8]
 8005ce2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	60a3      	str	r3, [r4, #8]
 8005cea:	2900      	cmp	r1, #0
 8005cec:	d1ed      	bne.n	8005cca <_puts_r+0x52>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	da11      	bge.n	8005d16 <_puts_r+0x9e>
 8005cf2:	4622      	mov	r2, r4
 8005cf4:	210a      	movs	r1, #10
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 f87f 	bl	8005dfa <__swbuf_r>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d0d7      	beq.n	8005cb0 <_puts_r+0x38>
 8005d00:	250a      	movs	r5, #10
 8005d02:	e7d7      	b.n	8005cb4 <_puts_r+0x3c>
 8005d04:	4622      	mov	r2, r4
 8005d06:	4628      	mov	r0, r5
 8005d08:	f000 f877 	bl	8005dfa <__swbuf_r>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d1e7      	bne.n	8005ce0 <_puts_r+0x68>
 8005d10:	e7ce      	b.n	8005cb0 <_puts_r+0x38>
 8005d12:	3e01      	subs	r6, #1
 8005d14:	e7e4      	b.n	8005ce0 <_puts_r+0x68>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	6022      	str	r2, [r4, #0]
 8005d1c:	220a      	movs	r2, #10
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e7ee      	b.n	8005d00 <_puts_r+0x88>
	...

08005d24 <puts>:
 8005d24:	4b02      	ldr	r3, [pc, #8]	@ (8005d30 <puts+0xc>)
 8005d26:	4601      	mov	r1, r0
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	f7ff bfa5 	b.w	8005c78 <_puts_r>
 8005d2e:	bf00      	nop
 8005d30:	20000034 	.word	0x20000034

08005d34 <siprintf>:
 8005d34:	b40e      	push	{r1, r2, r3}
 8005d36:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d3a:	b500      	push	{lr}
 8005d3c:	b09c      	sub	sp, #112	@ 0x70
 8005d3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d40:	9002      	str	r0, [sp, #8]
 8005d42:	9006      	str	r0, [sp, #24]
 8005d44:	9107      	str	r1, [sp, #28]
 8005d46:	9104      	str	r1, [sp, #16]
 8005d48:	4808      	ldr	r0, [pc, #32]	@ (8005d6c <siprintf+0x38>)
 8005d4a:	4909      	ldr	r1, [pc, #36]	@ (8005d70 <siprintf+0x3c>)
 8005d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d50:	9105      	str	r1, [sp, #20]
 8005d52:	6800      	ldr	r0, [r0, #0]
 8005d54:	a902      	add	r1, sp, #8
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	f002 fc44 	bl	80085e4 <_svfiprintf_r>
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	9b02      	ldr	r3, [sp, #8]
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	b01c      	add	sp, #112	@ 0x70
 8005d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d68:	b003      	add	sp, #12
 8005d6a:	4770      	bx	lr
 8005d6c:	20000034 	.word	0x20000034
 8005d70:	ffff0208 	.word	0xffff0208

08005d74 <__sread>:
 8005d74:	b510      	push	{r4, lr}
 8005d76:	460c      	mov	r4, r1
 8005d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7c:	f000 f900 	bl	8005f80 <_read_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	bfab      	itete	ge
 8005d84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d86:	89a3      	ldrhlt	r3, [r4, #12]
 8005d88:	181b      	addge	r3, r3, r0
 8005d8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d8e:	bfac      	ite	ge
 8005d90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d92:	81a3      	strhlt	r3, [r4, #12]
 8005d94:	bd10      	pop	{r4, pc}

08005d96 <__swrite>:
 8005d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9a:	461f      	mov	r7, r3
 8005d9c:	898b      	ldrh	r3, [r1, #12]
 8005d9e:	4605      	mov	r5, r0
 8005da0:	05db      	lsls	r3, r3, #23
 8005da2:	460c      	mov	r4, r1
 8005da4:	4616      	mov	r6, r2
 8005da6:	d505      	bpl.n	8005db4 <__swrite+0x1e>
 8005da8:	2302      	movs	r3, #2
 8005daa:	2200      	movs	r2, #0
 8005dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db0:	f000 f8d4 	bl	8005f5c <_lseek_r>
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	4632      	mov	r2, r6
 8005db8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dbc:	81a3      	strh	r3, [r4, #12]
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dca:	f000 b8eb 	b.w	8005fa4 <_write_r>

08005dce <__sseek>:
 8005dce:	b510      	push	{r4, lr}
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd6:	f000 f8c1 	bl	8005f5c <_lseek_r>
 8005dda:	1c43      	adds	r3, r0, #1
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	bf15      	itete	ne
 8005de0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005de2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005de6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dea:	81a3      	strheq	r3, [r4, #12]
 8005dec:	bf18      	it	ne
 8005dee:	81a3      	strhne	r3, [r4, #12]
 8005df0:	bd10      	pop	{r4, pc}

08005df2 <__sclose>:
 8005df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df6:	f000 b8a1 	b.w	8005f3c <_close_r>

08005dfa <__swbuf_r>:
 8005dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfc:	460e      	mov	r6, r1
 8005dfe:	4614      	mov	r4, r2
 8005e00:	4605      	mov	r5, r0
 8005e02:	b118      	cbz	r0, 8005e0c <__swbuf_r+0x12>
 8005e04:	6a03      	ldr	r3, [r0, #32]
 8005e06:	b90b      	cbnz	r3, 8005e0c <__swbuf_r+0x12>
 8005e08:	f7ff feee 	bl	8005be8 <__sinit>
 8005e0c:	69a3      	ldr	r3, [r4, #24]
 8005e0e:	60a3      	str	r3, [r4, #8]
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	071a      	lsls	r2, r3, #28
 8005e14:	d501      	bpl.n	8005e1a <__swbuf_r+0x20>
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	b943      	cbnz	r3, 8005e2c <__swbuf_r+0x32>
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f000 f82b 	bl	8005e78 <__swsetup_r>
 8005e22:	b118      	cbz	r0, 8005e2c <__swbuf_r+0x32>
 8005e24:	f04f 37ff 	mov.w	r7, #4294967295
 8005e28:	4638      	mov	r0, r7
 8005e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	6922      	ldr	r2, [r4, #16]
 8005e30:	b2f6      	uxtb	r6, r6
 8005e32:	1a98      	subs	r0, r3, r2
 8005e34:	6963      	ldr	r3, [r4, #20]
 8005e36:	4637      	mov	r7, r6
 8005e38:	4283      	cmp	r3, r0
 8005e3a:	dc05      	bgt.n	8005e48 <__swbuf_r+0x4e>
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f002 fe8c 	bl	8008b5c <_fflush_r>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d1ed      	bne.n	8005e24 <__swbuf_r+0x2a>
 8005e48:	68a3      	ldr	r3, [r4, #8]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	60a3      	str	r3, [r4, #8]
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	6022      	str	r2, [r4, #0]
 8005e54:	701e      	strb	r6, [r3, #0]
 8005e56:	6962      	ldr	r2, [r4, #20]
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d004      	beq.n	8005e68 <__swbuf_r+0x6e>
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	07db      	lsls	r3, r3, #31
 8005e62:	d5e1      	bpl.n	8005e28 <__swbuf_r+0x2e>
 8005e64:	2e0a      	cmp	r6, #10
 8005e66:	d1df      	bne.n	8005e28 <__swbuf_r+0x2e>
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f002 fe76 	bl	8008b5c <_fflush_r>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d0d9      	beq.n	8005e28 <__swbuf_r+0x2e>
 8005e74:	e7d6      	b.n	8005e24 <__swbuf_r+0x2a>
	...

08005e78 <__swsetup_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4b29      	ldr	r3, [pc, #164]	@ (8005f20 <__swsetup_r+0xa8>)
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	460c      	mov	r4, r1
 8005e82:	b118      	cbz	r0, 8005e8c <__swsetup_r+0x14>
 8005e84:	6a03      	ldr	r3, [r0, #32]
 8005e86:	b90b      	cbnz	r3, 8005e8c <__swsetup_r+0x14>
 8005e88:	f7ff feae 	bl	8005be8 <__sinit>
 8005e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e90:	0719      	lsls	r1, r3, #28
 8005e92:	d422      	bmi.n	8005eda <__swsetup_r+0x62>
 8005e94:	06da      	lsls	r2, r3, #27
 8005e96:	d407      	bmi.n	8005ea8 <__swsetup_r+0x30>
 8005e98:	2209      	movs	r2, #9
 8005e9a:	602a      	str	r2, [r5, #0]
 8005e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	e033      	b.n	8005f10 <__swsetup_r+0x98>
 8005ea8:	0758      	lsls	r0, r3, #29
 8005eaa:	d512      	bpl.n	8005ed2 <__swsetup_r+0x5a>
 8005eac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005eae:	b141      	cbz	r1, 8005ec2 <__swsetup_r+0x4a>
 8005eb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005eb4:	4299      	cmp	r1, r3
 8005eb6:	d002      	beq.n	8005ebe <__swsetup_r+0x46>
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f000 ff15 	bl	8006ce8 <_free_r>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ec8:	81a3      	strh	r3, [r4, #12]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6063      	str	r3, [r4, #4]
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	f043 0308 	orr.w	r3, r3, #8
 8005ed8:	81a3      	strh	r3, [r4, #12]
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	b94b      	cbnz	r3, 8005ef2 <__swsetup_r+0x7a>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee8:	d003      	beq.n	8005ef2 <__swsetup_r+0x7a>
 8005eea:	4621      	mov	r1, r4
 8005eec:	4628      	mov	r0, r5
 8005eee:	f002 fe82 	bl	8008bf6 <__smakebuf_r>
 8005ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef6:	f013 0201 	ands.w	r2, r3, #1
 8005efa:	d00a      	beq.n	8005f12 <__swsetup_r+0x9a>
 8005efc:	2200      	movs	r2, #0
 8005efe:	60a2      	str	r2, [r4, #8]
 8005f00:	6962      	ldr	r2, [r4, #20]
 8005f02:	4252      	negs	r2, r2
 8005f04:	61a2      	str	r2, [r4, #24]
 8005f06:	6922      	ldr	r2, [r4, #16]
 8005f08:	b942      	cbnz	r2, 8005f1c <__swsetup_r+0xa4>
 8005f0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f0e:	d1c5      	bne.n	8005e9c <__swsetup_r+0x24>
 8005f10:	bd38      	pop	{r3, r4, r5, pc}
 8005f12:	0799      	lsls	r1, r3, #30
 8005f14:	bf58      	it	pl
 8005f16:	6962      	ldrpl	r2, [r4, #20]
 8005f18:	60a2      	str	r2, [r4, #8]
 8005f1a:	e7f4      	b.n	8005f06 <__swsetup_r+0x8e>
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e7f7      	b.n	8005f10 <__swsetup_r+0x98>
 8005f20:	20000034 	.word	0x20000034

08005f24 <memset>:
 8005f24:	4603      	mov	r3, r0
 8005f26:	4402      	add	r2, r0
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d100      	bne.n	8005f2e <memset+0xa>
 8005f2c:	4770      	bx	lr
 8005f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f32:	e7f9      	b.n	8005f28 <memset+0x4>

08005f34 <_localeconv_r>:
 8005f34:	4800      	ldr	r0, [pc, #0]	@ (8005f38 <_localeconv_r+0x4>)
 8005f36:	4770      	bx	lr
 8005f38:	20000174 	.word	0x20000174

08005f3c <_close_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	2300      	movs	r3, #0
 8005f40:	4d05      	ldr	r5, [pc, #20]	@ (8005f58 <_close_r+0x1c>)
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	602b      	str	r3, [r5, #0]
 8005f48:	f7fc fd23 	bl	8002992 <_close>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_close_r+0x1a>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_close_r+0x1a>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	20000458 	.word	0x20000458

08005f5c <_lseek_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4604      	mov	r4, r0
 8005f60:	4608      	mov	r0, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	2200      	movs	r2, #0
 8005f66:	4d05      	ldr	r5, [pc, #20]	@ (8005f7c <_lseek_r+0x20>)
 8005f68:	602a      	str	r2, [r5, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f7fc fd35 	bl	80029da <_lseek>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_lseek_r+0x1e>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_lseek_r+0x1e>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20000458 	.word	0x20000458

08005f80 <_read_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4604      	mov	r4, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4d05      	ldr	r5, [pc, #20]	@ (8005fa0 <_read_r+0x20>)
 8005f8c:	602a      	str	r2, [r5, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f7fc fce2 	bl	8002958 <_read>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_read_r+0x1e>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_read_r+0x1e>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	20000458 	.word	0x20000458

08005fa4 <_write_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	2200      	movs	r2, #0
 8005fae:	4d05      	ldr	r5, [pc, #20]	@ (8005fc4 <_write_r+0x20>)
 8005fb0:	602a      	str	r2, [r5, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f7fc fa06 	bl	80023c4 <_write>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_write_r+0x1e>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_write_r+0x1e>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	20000458 	.word	0x20000458

08005fc8 <__errno>:
 8005fc8:	4b01      	ldr	r3, [pc, #4]	@ (8005fd0 <__errno+0x8>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000034 	.word	0x20000034

08005fd4 <__libc_init_array>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	2600      	movs	r6, #0
 8005fd8:	4d0c      	ldr	r5, [pc, #48]	@ (800600c <__libc_init_array+0x38>)
 8005fda:	4c0d      	ldr	r4, [pc, #52]	@ (8006010 <__libc_init_array+0x3c>)
 8005fdc:	1b64      	subs	r4, r4, r5
 8005fde:	10a4      	asrs	r4, r4, #2
 8005fe0:	42a6      	cmp	r6, r4
 8005fe2:	d109      	bne.n	8005ff8 <__libc_init_array+0x24>
 8005fe4:	f003 fcf8 	bl	80099d8 <_init>
 8005fe8:	2600      	movs	r6, #0
 8005fea:	4d0a      	ldr	r5, [pc, #40]	@ (8006014 <__libc_init_array+0x40>)
 8005fec:	4c0a      	ldr	r4, [pc, #40]	@ (8006018 <__libc_init_array+0x44>)
 8005fee:	1b64      	subs	r4, r4, r5
 8005ff0:	10a4      	asrs	r4, r4, #2
 8005ff2:	42a6      	cmp	r6, r4
 8005ff4:	d105      	bne.n	8006002 <__libc_init_array+0x2e>
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffc:	4798      	blx	r3
 8005ffe:	3601      	adds	r6, #1
 8006000:	e7ee      	b.n	8005fe0 <__libc_init_array+0xc>
 8006002:	f855 3b04 	ldr.w	r3, [r5], #4
 8006006:	4798      	blx	r3
 8006008:	3601      	adds	r6, #1
 800600a:	e7f2      	b.n	8005ff2 <__libc_init_array+0x1e>
 800600c:	08009f38 	.word	0x08009f38
 8006010:	08009f38 	.word	0x08009f38
 8006014:	08009f38 	.word	0x08009f38
 8006018:	08009f3c 	.word	0x08009f3c

0800601c <__retarget_lock_init_recursive>:
 800601c:	4770      	bx	lr

0800601e <__retarget_lock_acquire_recursive>:
 800601e:	4770      	bx	lr

08006020 <__retarget_lock_release_recursive>:
 8006020:	4770      	bx	lr

08006022 <memchr>:
 8006022:	4603      	mov	r3, r0
 8006024:	b510      	push	{r4, lr}
 8006026:	b2c9      	uxtb	r1, r1
 8006028:	4402      	add	r2, r0
 800602a:	4293      	cmp	r3, r2
 800602c:	4618      	mov	r0, r3
 800602e:	d101      	bne.n	8006034 <memchr+0x12>
 8006030:	2000      	movs	r0, #0
 8006032:	e003      	b.n	800603c <memchr+0x1a>
 8006034:	7804      	ldrb	r4, [r0, #0]
 8006036:	3301      	adds	r3, #1
 8006038:	428c      	cmp	r4, r1
 800603a:	d1f6      	bne.n	800602a <memchr+0x8>
 800603c:	bd10      	pop	{r4, pc}
	...

08006040 <nanf>:
 8006040:	4800      	ldr	r0, [pc, #0]	@ (8006044 <nanf+0x4>)
 8006042:	4770      	bx	lr
 8006044:	7fc00000 	.word	0x7fc00000

08006048 <quorem>:
 8006048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	6903      	ldr	r3, [r0, #16]
 800604e:	690c      	ldr	r4, [r1, #16]
 8006050:	4607      	mov	r7, r0
 8006052:	42a3      	cmp	r3, r4
 8006054:	db7e      	blt.n	8006154 <quorem+0x10c>
 8006056:	3c01      	subs	r4, #1
 8006058:	00a3      	lsls	r3, r4, #2
 800605a:	f100 0514 	add.w	r5, r0, #20
 800605e:	f101 0814 	add.w	r8, r1, #20
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800606e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006072:	3301      	adds	r3, #1
 8006074:	429a      	cmp	r2, r3
 8006076:	fbb2 f6f3 	udiv	r6, r2, r3
 800607a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800607e:	d32e      	bcc.n	80060de <quorem+0x96>
 8006080:	f04f 0a00 	mov.w	sl, #0
 8006084:	46c4      	mov	ip, r8
 8006086:	46ae      	mov	lr, r5
 8006088:	46d3      	mov	fp, sl
 800608a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800608e:	b298      	uxth	r0, r3
 8006090:	fb06 a000 	mla	r0, r6, r0, sl
 8006094:	0c1b      	lsrs	r3, r3, #16
 8006096:	0c02      	lsrs	r2, r0, #16
 8006098:	fb06 2303 	mla	r3, r6, r3, r2
 800609c:	f8de 2000 	ldr.w	r2, [lr]
 80060a0:	b280      	uxth	r0, r0
 80060a2:	b292      	uxth	r2, r2
 80060a4:	1a12      	subs	r2, r2, r0
 80060a6:	445a      	add	r2, fp
 80060a8:	f8de 0000 	ldr.w	r0, [lr]
 80060ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060ba:	b292      	uxth	r2, r2
 80060bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060c0:	45e1      	cmp	r9, ip
 80060c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060c6:	f84e 2b04 	str.w	r2, [lr], #4
 80060ca:	d2de      	bcs.n	800608a <quorem+0x42>
 80060cc:	9b00      	ldr	r3, [sp, #0]
 80060ce:	58eb      	ldr	r3, [r5, r3]
 80060d0:	b92b      	cbnz	r3, 80060de <quorem+0x96>
 80060d2:	9b01      	ldr	r3, [sp, #4]
 80060d4:	3b04      	subs	r3, #4
 80060d6:	429d      	cmp	r5, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	d32f      	bcc.n	800613c <quorem+0xf4>
 80060dc:	613c      	str	r4, [r7, #16]
 80060de:	4638      	mov	r0, r7
 80060e0:	f001 f9c2 	bl	8007468 <__mcmp>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	db25      	blt.n	8006134 <quorem+0xec>
 80060e8:	4629      	mov	r1, r5
 80060ea:	2000      	movs	r0, #0
 80060ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80060f0:	f8d1 c000 	ldr.w	ip, [r1]
 80060f4:	fa1f fe82 	uxth.w	lr, r2
 80060f8:	fa1f f38c 	uxth.w	r3, ip
 80060fc:	eba3 030e 	sub.w	r3, r3, lr
 8006100:	4403      	add	r3, r0
 8006102:	0c12      	lsrs	r2, r2, #16
 8006104:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006108:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800610c:	b29b      	uxth	r3, r3
 800610e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006112:	45c1      	cmp	r9, r8
 8006114:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006118:	f841 3b04 	str.w	r3, [r1], #4
 800611c:	d2e6      	bcs.n	80060ec <quorem+0xa4>
 800611e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006126:	b922      	cbnz	r2, 8006132 <quorem+0xea>
 8006128:	3b04      	subs	r3, #4
 800612a:	429d      	cmp	r5, r3
 800612c:	461a      	mov	r2, r3
 800612e:	d30b      	bcc.n	8006148 <quorem+0x100>
 8006130:	613c      	str	r4, [r7, #16]
 8006132:	3601      	adds	r6, #1
 8006134:	4630      	mov	r0, r6
 8006136:	b003      	add	sp, #12
 8006138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	3b04      	subs	r3, #4
 8006140:	2a00      	cmp	r2, #0
 8006142:	d1cb      	bne.n	80060dc <quorem+0x94>
 8006144:	3c01      	subs	r4, #1
 8006146:	e7c6      	b.n	80060d6 <quorem+0x8e>
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	3b04      	subs	r3, #4
 800614c:	2a00      	cmp	r2, #0
 800614e:	d1ef      	bne.n	8006130 <quorem+0xe8>
 8006150:	3c01      	subs	r4, #1
 8006152:	e7ea      	b.n	800612a <quorem+0xe2>
 8006154:	2000      	movs	r0, #0
 8006156:	e7ee      	b.n	8006136 <quorem+0xee>

08006158 <_dtoa_r>:
 8006158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	4614      	mov	r4, r2
 800615e:	461d      	mov	r5, r3
 8006160:	69c7      	ldr	r7, [r0, #28]
 8006162:	b097      	sub	sp, #92	@ 0x5c
 8006164:	4683      	mov	fp, r0
 8006166:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800616a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800616c:	b97f      	cbnz	r7, 800618e <_dtoa_r+0x36>
 800616e:	2010      	movs	r0, #16
 8006170:	f000 fe02 	bl	8006d78 <malloc>
 8006174:	4602      	mov	r2, r0
 8006176:	f8cb 001c 	str.w	r0, [fp, #28]
 800617a:	b920      	cbnz	r0, 8006186 <_dtoa_r+0x2e>
 800617c:	21ef      	movs	r1, #239	@ 0xef
 800617e:	4ba8      	ldr	r3, [pc, #672]	@ (8006420 <_dtoa_r+0x2c8>)
 8006180:	48a8      	ldr	r0, [pc, #672]	@ (8006424 <_dtoa_r+0x2cc>)
 8006182:	f002 fde7 	bl	8008d54 <__assert_func>
 8006186:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800618a:	6007      	str	r7, [r0, #0]
 800618c:	60c7      	str	r7, [r0, #12]
 800618e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	b159      	cbz	r1, 80061ae <_dtoa_r+0x56>
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	2301      	movs	r3, #1
 800619a:	4093      	lsls	r3, r2
 800619c:	604a      	str	r2, [r1, #4]
 800619e:	608b      	str	r3, [r1, #8]
 80061a0:	4658      	mov	r0, fp
 80061a2:	f000 fedf 	bl	8006f64 <_Bfree>
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	1e2b      	subs	r3, r5, #0
 80061b0:	bfaf      	iteee	ge
 80061b2:	2300      	movge	r3, #0
 80061b4:	2201      	movlt	r2, #1
 80061b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80061ba:	9303      	strlt	r3, [sp, #12]
 80061bc:	bfa8      	it	ge
 80061be:	6033      	strge	r3, [r6, #0]
 80061c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80061c4:	4b98      	ldr	r3, [pc, #608]	@ (8006428 <_dtoa_r+0x2d0>)
 80061c6:	bfb8      	it	lt
 80061c8:	6032      	strlt	r2, [r6, #0]
 80061ca:	ea33 0308 	bics.w	r3, r3, r8
 80061ce:	d112      	bne.n	80061f6 <_dtoa_r+0x9e>
 80061d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80061dc:	4323      	orrs	r3, r4
 80061de:	f000 8550 	beq.w	8006c82 <_dtoa_r+0xb2a>
 80061e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061e4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800642c <_dtoa_r+0x2d4>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 8552 	beq.w	8006c92 <_dtoa_r+0xb3a>
 80061ee:	f10a 0303 	add.w	r3, sl, #3
 80061f2:	f000 bd4c 	b.w	8006c8e <_dtoa_r+0xb36>
 80061f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80061fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006202:	2200      	movs	r2, #0
 8006204:	2300      	movs	r3, #0
 8006206:	f7fa fbcf 	bl	80009a8 <__aeabi_dcmpeq>
 800620a:	4607      	mov	r7, r0
 800620c:	b158      	cbz	r0, 8006226 <_dtoa_r+0xce>
 800620e:	2301      	movs	r3, #1
 8006210:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006216:	b113      	cbz	r3, 800621e <_dtoa_r+0xc6>
 8006218:	4b85      	ldr	r3, [pc, #532]	@ (8006430 <_dtoa_r+0x2d8>)
 800621a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006434 <_dtoa_r+0x2dc>
 8006222:	f000 bd36 	b.w	8006c92 <_dtoa_r+0xb3a>
 8006226:	ab14      	add	r3, sp, #80	@ 0x50
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	ab15      	add	r3, sp, #84	@ 0x54
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	4658      	mov	r0, fp
 8006230:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006234:	f001 fa30 	bl	8007698 <__d2b>
 8006238:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800623c:	4681      	mov	r9, r0
 800623e:	2e00      	cmp	r6, #0
 8006240:	d077      	beq.n	8006332 <_dtoa_r+0x1da>
 8006242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006248:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800624c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006250:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006254:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006258:	9712      	str	r7, [sp, #72]	@ 0x48
 800625a:	4619      	mov	r1, r3
 800625c:	2200      	movs	r2, #0
 800625e:	4b76      	ldr	r3, [pc, #472]	@ (8006438 <_dtoa_r+0x2e0>)
 8006260:	f7f9 ff82 	bl	8000168 <__aeabi_dsub>
 8006264:	a368      	add	r3, pc, #416	@ (adr r3, 8006408 <_dtoa_r+0x2b0>)
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	f7fa f935 	bl	80004d8 <__aeabi_dmul>
 800626e:	a368      	add	r3, pc, #416	@ (adr r3, 8006410 <_dtoa_r+0x2b8>)
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f7f9 ff7a 	bl	800016c <__adddf3>
 8006278:	4604      	mov	r4, r0
 800627a:	4630      	mov	r0, r6
 800627c:	460d      	mov	r5, r1
 800627e:	f7fa f8c1 	bl	8000404 <__aeabi_i2d>
 8006282:	a365      	add	r3, pc, #404	@ (adr r3, 8006418 <_dtoa_r+0x2c0>)
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f7fa f926 	bl	80004d8 <__aeabi_dmul>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7f9 ff6a 	bl	800016c <__adddf3>
 8006298:	4604      	mov	r4, r0
 800629a:	460d      	mov	r5, r1
 800629c:	f7fa fbcc 	bl	8000a38 <__aeabi_d2iz>
 80062a0:	2200      	movs	r2, #0
 80062a2:	4607      	mov	r7, r0
 80062a4:	2300      	movs	r3, #0
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7fa fb87 	bl	80009bc <__aeabi_dcmplt>
 80062ae:	b140      	cbz	r0, 80062c2 <_dtoa_r+0x16a>
 80062b0:	4638      	mov	r0, r7
 80062b2:	f7fa f8a7 	bl	8000404 <__aeabi_i2d>
 80062b6:	4622      	mov	r2, r4
 80062b8:	462b      	mov	r3, r5
 80062ba:	f7fa fb75 	bl	80009a8 <__aeabi_dcmpeq>
 80062be:	b900      	cbnz	r0, 80062c2 <_dtoa_r+0x16a>
 80062c0:	3f01      	subs	r7, #1
 80062c2:	2f16      	cmp	r7, #22
 80062c4:	d853      	bhi.n	800636e <_dtoa_r+0x216>
 80062c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062ca:	4b5c      	ldr	r3, [pc, #368]	@ (800643c <_dtoa_r+0x2e4>)
 80062cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7fa fb72 	bl	80009bc <__aeabi_dcmplt>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d04a      	beq.n	8006372 <_dtoa_r+0x21a>
 80062dc:	2300      	movs	r3, #0
 80062de:	3f01      	subs	r7, #1
 80062e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80062e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062e4:	1b9b      	subs	r3, r3, r6
 80062e6:	1e5a      	subs	r2, r3, #1
 80062e8:	bf46      	itte	mi
 80062ea:	f1c3 0801 	rsbmi	r8, r3, #1
 80062ee:	2300      	movmi	r3, #0
 80062f0:	f04f 0800 	movpl.w	r8, #0
 80062f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80062f6:	bf48      	it	mi
 80062f8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80062fa:	2f00      	cmp	r7, #0
 80062fc:	db3b      	blt.n	8006376 <_dtoa_r+0x21e>
 80062fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006300:	970e      	str	r7, [sp, #56]	@ 0x38
 8006302:	443b      	add	r3, r7
 8006304:	9309      	str	r3, [sp, #36]	@ 0x24
 8006306:	2300      	movs	r3, #0
 8006308:	930a      	str	r3, [sp, #40]	@ 0x28
 800630a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800630c:	2b09      	cmp	r3, #9
 800630e:	d866      	bhi.n	80063de <_dtoa_r+0x286>
 8006310:	2b05      	cmp	r3, #5
 8006312:	bfc4      	itt	gt
 8006314:	3b04      	subgt	r3, #4
 8006316:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006318:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800631a:	bfc8      	it	gt
 800631c:	2400      	movgt	r4, #0
 800631e:	f1a3 0302 	sub.w	r3, r3, #2
 8006322:	bfd8      	it	le
 8006324:	2401      	movle	r4, #1
 8006326:	2b03      	cmp	r3, #3
 8006328:	d864      	bhi.n	80063f4 <_dtoa_r+0x29c>
 800632a:	e8df f003 	tbb	[pc, r3]
 800632e:	382b      	.short	0x382b
 8006330:	5636      	.short	0x5636
 8006332:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006336:	441e      	add	r6, r3
 8006338:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800633c:	2b20      	cmp	r3, #32
 800633e:	bfc1      	itttt	gt
 8006340:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006344:	fa08 f803 	lslgt.w	r8, r8, r3
 8006348:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800634c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006350:	bfd6      	itet	le
 8006352:	f1c3 0320 	rsble	r3, r3, #32
 8006356:	ea48 0003 	orrgt.w	r0, r8, r3
 800635a:	fa04 f003 	lslle.w	r0, r4, r3
 800635e:	f7fa f841 	bl	80003e4 <__aeabi_ui2d>
 8006362:	2201      	movs	r2, #1
 8006364:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006368:	3e01      	subs	r6, #1
 800636a:	9212      	str	r2, [sp, #72]	@ 0x48
 800636c:	e775      	b.n	800625a <_dtoa_r+0x102>
 800636e:	2301      	movs	r3, #1
 8006370:	e7b6      	b.n	80062e0 <_dtoa_r+0x188>
 8006372:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006374:	e7b5      	b.n	80062e2 <_dtoa_r+0x18a>
 8006376:	427b      	negs	r3, r7
 8006378:	930a      	str	r3, [sp, #40]	@ 0x28
 800637a:	2300      	movs	r3, #0
 800637c:	eba8 0807 	sub.w	r8, r8, r7
 8006380:	930e      	str	r3, [sp, #56]	@ 0x38
 8006382:	e7c2      	b.n	800630a <_dtoa_r+0x1b2>
 8006384:	2300      	movs	r3, #0
 8006386:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006388:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800638a:	2b00      	cmp	r3, #0
 800638c:	dc35      	bgt.n	80063fa <_dtoa_r+0x2a2>
 800638e:	2301      	movs	r3, #1
 8006390:	461a      	mov	r2, r3
 8006392:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006396:	9221      	str	r2, [sp, #132]	@ 0x84
 8006398:	e00b      	b.n	80063b2 <_dtoa_r+0x25a>
 800639a:	2301      	movs	r3, #1
 800639c:	e7f3      	b.n	8006386 <_dtoa_r+0x22e>
 800639e:	2300      	movs	r3, #0
 80063a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	9308      	str	r3, [sp, #32]
 80063a8:	3301      	adds	r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	9307      	str	r3, [sp, #28]
 80063ae:	bfb8      	it	lt
 80063b0:	2301      	movlt	r3, #1
 80063b2:	2100      	movs	r1, #0
 80063b4:	2204      	movs	r2, #4
 80063b6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80063ba:	f102 0514 	add.w	r5, r2, #20
 80063be:	429d      	cmp	r5, r3
 80063c0:	d91f      	bls.n	8006402 <_dtoa_r+0x2aa>
 80063c2:	6041      	str	r1, [r0, #4]
 80063c4:	4658      	mov	r0, fp
 80063c6:	f000 fd8d 	bl	8006ee4 <_Balloc>
 80063ca:	4682      	mov	sl, r0
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d139      	bne.n	8006444 <_dtoa_r+0x2ec>
 80063d0:	4602      	mov	r2, r0
 80063d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80063d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006440 <_dtoa_r+0x2e8>)
 80063d8:	e6d2      	b.n	8006180 <_dtoa_r+0x28>
 80063da:	2301      	movs	r3, #1
 80063dc:	e7e0      	b.n	80063a0 <_dtoa_r+0x248>
 80063de:	2401      	movs	r4, #1
 80063e0:	2300      	movs	r3, #0
 80063e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80063e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80063e6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ea:	2200      	movs	r2, #0
 80063ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063f0:	2312      	movs	r3, #18
 80063f2:	e7d0      	b.n	8006396 <_dtoa_r+0x23e>
 80063f4:	2301      	movs	r3, #1
 80063f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063f8:	e7f5      	b.n	80063e6 <_dtoa_r+0x28e>
 80063fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006400:	e7d7      	b.n	80063b2 <_dtoa_r+0x25a>
 8006402:	3101      	adds	r1, #1
 8006404:	0052      	lsls	r2, r2, #1
 8006406:	e7d8      	b.n	80063ba <_dtoa_r+0x262>
 8006408:	636f4361 	.word	0x636f4361
 800640c:	3fd287a7 	.word	0x3fd287a7
 8006410:	8b60c8b3 	.word	0x8b60c8b3
 8006414:	3fc68a28 	.word	0x3fc68a28
 8006418:	509f79fb 	.word	0x509f79fb
 800641c:	3fd34413 	.word	0x3fd34413
 8006420:	08009b10 	.word	0x08009b10
 8006424:	08009b27 	.word	0x08009b27
 8006428:	7ff00000 	.word	0x7ff00000
 800642c:	08009b0c 	.word	0x08009b0c
 8006430:	08009adb 	.word	0x08009adb
 8006434:	08009ada 	.word	0x08009ada
 8006438:	3ff80000 	.word	0x3ff80000
 800643c:	08009c20 	.word	0x08009c20
 8006440:	08009b7f 	.word	0x08009b7f
 8006444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006448:	6018      	str	r0, [r3, #0]
 800644a:	9b07      	ldr	r3, [sp, #28]
 800644c:	2b0e      	cmp	r3, #14
 800644e:	f200 80a4 	bhi.w	800659a <_dtoa_r+0x442>
 8006452:	2c00      	cmp	r4, #0
 8006454:	f000 80a1 	beq.w	800659a <_dtoa_r+0x442>
 8006458:	2f00      	cmp	r7, #0
 800645a:	dd33      	ble.n	80064c4 <_dtoa_r+0x36c>
 800645c:	4b86      	ldr	r3, [pc, #536]	@ (8006678 <_dtoa_r+0x520>)
 800645e:	f007 020f 	and.w	r2, r7, #15
 8006462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006466:	05f8      	lsls	r0, r7, #23
 8006468:	e9d3 3400 	ldrd	r3, r4, [r3]
 800646c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006470:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006474:	d516      	bpl.n	80064a4 <_dtoa_r+0x34c>
 8006476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800647a:	4b80      	ldr	r3, [pc, #512]	@ (800667c <_dtoa_r+0x524>)
 800647c:	2603      	movs	r6, #3
 800647e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006482:	f7fa f953 	bl	800072c <__aeabi_ddiv>
 8006486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800648a:	f004 040f 	and.w	r4, r4, #15
 800648e:	4d7b      	ldr	r5, [pc, #492]	@ (800667c <_dtoa_r+0x524>)
 8006490:	b954      	cbnz	r4, 80064a8 <_dtoa_r+0x350>
 8006492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800649a:	f7fa f947 	bl	800072c <__aeabi_ddiv>
 800649e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a2:	e028      	b.n	80064f6 <_dtoa_r+0x39e>
 80064a4:	2602      	movs	r6, #2
 80064a6:	e7f2      	b.n	800648e <_dtoa_r+0x336>
 80064a8:	07e1      	lsls	r1, r4, #31
 80064aa:	d508      	bpl.n	80064be <_dtoa_r+0x366>
 80064ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064b4:	f7fa f810 	bl	80004d8 <__aeabi_dmul>
 80064b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064bc:	3601      	adds	r6, #1
 80064be:	1064      	asrs	r4, r4, #1
 80064c0:	3508      	adds	r5, #8
 80064c2:	e7e5      	b.n	8006490 <_dtoa_r+0x338>
 80064c4:	f000 80d2 	beq.w	800666c <_dtoa_r+0x514>
 80064c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064cc:	427c      	negs	r4, r7
 80064ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006678 <_dtoa_r+0x520>)
 80064d0:	f004 020f 	and.w	r2, r4, #15
 80064d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f7f9 fffc 	bl	80004d8 <__aeabi_dmul>
 80064e0:	2602      	movs	r6, #2
 80064e2:	2300      	movs	r3, #0
 80064e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e8:	4d64      	ldr	r5, [pc, #400]	@ (800667c <_dtoa_r+0x524>)
 80064ea:	1124      	asrs	r4, r4, #4
 80064ec:	2c00      	cmp	r4, #0
 80064ee:	f040 80b2 	bne.w	8006656 <_dtoa_r+0x4fe>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1d3      	bne.n	800649e <_dtoa_r+0x346>
 80064f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80b7 	beq.w	8006670 <_dtoa_r+0x518>
 8006502:	2200      	movs	r2, #0
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	4b5d      	ldr	r3, [pc, #372]	@ (8006680 <_dtoa_r+0x528>)
 800650a:	f7fa fa57 	bl	80009bc <__aeabi_dcmplt>
 800650e:	2800      	cmp	r0, #0
 8006510:	f000 80ae 	beq.w	8006670 <_dtoa_r+0x518>
 8006514:	9b07      	ldr	r3, [sp, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 80aa 	beq.w	8006670 <_dtoa_r+0x518>
 800651c:	9b08      	ldr	r3, [sp, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	dd37      	ble.n	8006592 <_dtoa_r+0x43a>
 8006522:	1e7b      	subs	r3, r7, #1
 8006524:	4620      	mov	r0, r4
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	2200      	movs	r2, #0
 800652a:	4629      	mov	r1, r5
 800652c:	4b55      	ldr	r3, [pc, #340]	@ (8006684 <_dtoa_r+0x52c>)
 800652e:	f7f9 ffd3 	bl	80004d8 <__aeabi_dmul>
 8006532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006536:	9c08      	ldr	r4, [sp, #32]
 8006538:	3601      	adds	r6, #1
 800653a:	4630      	mov	r0, r6
 800653c:	f7f9 ff62 	bl	8000404 <__aeabi_i2d>
 8006540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006544:	f7f9 ffc8 	bl	80004d8 <__aeabi_dmul>
 8006548:	2200      	movs	r2, #0
 800654a:	4b4f      	ldr	r3, [pc, #316]	@ (8006688 <_dtoa_r+0x530>)
 800654c:	f7f9 fe0e 	bl	800016c <__adddf3>
 8006550:	4605      	mov	r5, r0
 8006552:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006556:	2c00      	cmp	r4, #0
 8006558:	f040 809a 	bne.w	8006690 <_dtoa_r+0x538>
 800655c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006560:	2200      	movs	r2, #0
 8006562:	4b4a      	ldr	r3, [pc, #296]	@ (800668c <_dtoa_r+0x534>)
 8006564:	f7f9 fe00 	bl	8000168 <__aeabi_dsub>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006570:	462a      	mov	r2, r5
 8006572:	4633      	mov	r3, r6
 8006574:	f7fa fa40 	bl	80009f8 <__aeabi_dcmpgt>
 8006578:	2800      	cmp	r0, #0
 800657a:	f040 828e 	bne.w	8006a9a <_dtoa_r+0x942>
 800657e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006582:	462a      	mov	r2, r5
 8006584:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006588:	f7fa fa18 	bl	80009bc <__aeabi_dcmplt>
 800658c:	2800      	cmp	r0, #0
 800658e:	f040 8127 	bne.w	80067e0 <_dtoa_r+0x688>
 8006592:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006596:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800659a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800659c:	2b00      	cmp	r3, #0
 800659e:	f2c0 8163 	blt.w	8006868 <_dtoa_r+0x710>
 80065a2:	2f0e      	cmp	r7, #14
 80065a4:	f300 8160 	bgt.w	8006868 <_dtoa_r+0x710>
 80065a8:	4b33      	ldr	r3, [pc, #204]	@ (8006678 <_dtoa_r+0x520>)
 80065aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	da03      	bge.n	80065c4 <_dtoa_r+0x46c>
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f340 8100 	ble.w	80067c4 <_dtoa_r+0x66c>
 80065c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80065c8:	4656      	mov	r6, sl
 80065ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ce:	4620      	mov	r0, r4
 80065d0:	4629      	mov	r1, r5
 80065d2:	f7fa f8ab 	bl	800072c <__aeabi_ddiv>
 80065d6:	f7fa fa2f 	bl	8000a38 <__aeabi_d2iz>
 80065da:	4680      	mov	r8, r0
 80065dc:	f7f9 ff12 	bl	8000404 <__aeabi_i2d>
 80065e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065e4:	f7f9 ff78 	bl	80004d8 <__aeabi_dmul>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4620      	mov	r0, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7f9 fdba 	bl	8000168 <__aeabi_dsub>
 80065f4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80065f8:	9d07      	ldr	r5, [sp, #28]
 80065fa:	f806 4b01 	strb.w	r4, [r6], #1
 80065fe:	eba6 040a 	sub.w	r4, r6, sl
 8006602:	42a5      	cmp	r5, r4
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	f040 8116 	bne.w	8006838 <_dtoa_r+0x6e0>
 800660c:	f7f9 fdae 	bl	800016c <__adddf3>
 8006610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006614:	4604      	mov	r4, r0
 8006616:	460d      	mov	r5, r1
 8006618:	f7fa f9ee 	bl	80009f8 <__aeabi_dcmpgt>
 800661c:	2800      	cmp	r0, #0
 800661e:	f040 80f8 	bne.w	8006812 <_dtoa_r+0x6ba>
 8006622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	f7fa f9bd 	bl	80009a8 <__aeabi_dcmpeq>
 800662e:	b118      	cbz	r0, 8006638 <_dtoa_r+0x4e0>
 8006630:	f018 0f01 	tst.w	r8, #1
 8006634:	f040 80ed 	bne.w	8006812 <_dtoa_r+0x6ba>
 8006638:	4649      	mov	r1, r9
 800663a:	4658      	mov	r0, fp
 800663c:	f000 fc92 	bl	8006f64 <_Bfree>
 8006640:	2300      	movs	r3, #0
 8006642:	7033      	strb	r3, [r6, #0]
 8006644:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006646:	3701      	adds	r7, #1
 8006648:	601f      	str	r7, [r3, #0]
 800664a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8320 	beq.w	8006c92 <_dtoa_r+0xb3a>
 8006652:	601e      	str	r6, [r3, #0]
 8006654:	e31d      	b.n	8006c92 <_dtoa_r+0xb3a>
 8006656:	07e2      	lsls	r2, r4, #31
 8006658:	d505      	bpl.n	8006666 <_dtoa_r+0x50e>
 800665a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800665e:	f7f9 ff3b 	bl	80004d8 <__aeabi_dmul>
 8006662:	2301      	movs	r3, #1
 8006664:	3601      	adds	r6, #1
 8006666:	1064      	asrs	r4, r4, #1
 8006668:	3508      	adds	r5, #8
 800666a:	e73f      	b.n	80064ec <_dtoa_r+0x394>
 800666c:	2602      	movs	r6, #2
 800666e:	e742      	b.n	80064f6 <_dtoa_r+0x39e>
 8006670:	9c07      	ldr	r4, [sp, #28]
 8006672:	9704      	str	r7, [sp, #16]
 8006674:	e761      	b.n	800653a <_dtoa_r+0x3e2>
 8006676:	bf00      	nop
 8006678:	08009c20 	.word	0x08009c20
 800667c:	08009bf8 	.word	0x08009bf8
 8006680:	3ff00000 	.word	0x3ff00000
 8006684:	40240000 	.word	0x40240000
 8006688:	401c0000 	.word	0x401c0000
 800668c:	40140000 	.word	0x40140000
 8006690:	4b70      	ldr	r3, [pc, #448]	@ (8006854 <_dtoa_r+0x6fc>)
 8006692:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006694:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006698:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800669c:	4454      	add	r4, sl
 800669e:	2900      	cmp	r1, #0
 80066a0:	d045      	beq.n	800672e <_dtoa_r+0x5d6>
 80066a2:	2000      	movs	r0, #0
 80066a4:	496c      	ldr	r1, [pc, #432]	@ (8006858 <_dtoa_r+0x700>)
 80066a6:	f7fa f841 	bl	800072c <__aeabi_ddiv>
 80066aa:	4633      	mov	r3, r6
 80066ac:	462a      	mov	r2, r5
 80066ae:	f7f9 fd5b 	bl	8000168 <__aeabi_dsub>
 80066b2:	4656      	mov	r6, sl
 80066b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066bc:	f7fa f9bc 	bl	8000a38 <__aeabi_d2iz>
 80066c0:	4605      	mov	r5, r0
 80066c2:	f7f9 fe9f 	bl	8000404 <__aeabi_i2d>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ce:	f7f9 fd4b 	bl	8000168 <__aeabi_dsub>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	3530      	adds	r5, #48	@ 0x30
 80066d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066e0:	f806 5b01 	strb.w	r5, [r6], #1
 80066e4:	f7fa f96a 	bl	80009bc <__aeabi_dcmplt>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d163      	bne.n	80067b4 <_dtoa_r+0x65c>
 80066ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f0:	2000      	movs	r0, #0
 80066f2:	495a      	ldr	r1, [pc, #360]	@ (800685c <_dtoa_r+0x704>)
 80066f4:	f7f9 fd38 	bl	8000168 <__aeabi_dsub>
 80066f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066fc:	f7fa f95e 	bl	80009bc <__aeabi_dcmplt>
 8006700:	2800      	cmp	r0, #0
 8006702:	f040 8087 	bne.w	8006814 <_dtoa_r+0x6bc>
 8006706:	42a6      	cmp	r6, r4
 8006708:	f43f af43 	beq.w	8006592 <_dtoa_r+0x43a>
 800670c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006710:	2200      	movs	r2, #0
 8006712:	4b53      	ldr	r3, [pc, #332]	@ (8006860 <_dtoa_r+0x708>)
 8006714:	f7f9 fee0 	bl	80004d8 <__aeabi_dmul>
 8006718:	2200      	movs	r2, #0
 800671a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800671e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006722:	4b4f      	ldr	r3, [pc, #316]	@ (8006860 <_dtoa_r+0x708>)
 8006724:	f7f9 fed8 	bl	80004d8 <__aeabi_dmul>
 8006728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800672c:	e7c4      	b.n	80066b8 <_dtoa_r+0x560>
 800672e:	4631      	mov	r1, r6
 8006730:	4628      	mov	r0, r5
 8006732:	f7f9 fed1 	bl	80004d8 <__aeabi_dmul>
 8006736:	4656      	mov	r6, sl
 8006738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800673c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800673e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006742:	f7fa f979 	bl	8000a38 <__aeabi_d2iz>
 8006746:	4605      	mov	r5, r0
 8006748:	f7f9 fe5c 	bl	8000404 <__aeabi_i2d>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006754:	f7f9 fd08 	bl	8000168 <__aeabi_dsub>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	3530      	adds	r5, #48	@ 0x30
 800675e:	f806 5b01 	strb.w	r5, [r6], #1
 8006762:	42a6      	cmp	r6, r4
 8006764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	d124      	bne.n	80067b8 <_dtoa_r+0x660>
 800676e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006772:	4b39      	ldr	r3, [pc, #228]	@ (8006858 <_dtoa_r+0x700>)
 8006774:	f7f9 fcfa 	bl	800016c <__adddf3>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006780:	f7fa f93a 	bl	80009f8 <__aeabi_dcmpgt>
 8006784:	2800      	cmp	r0, #0
 8006786:	d145      	bne.n	8006814 <_dtoa_r+0x6bc>
 8006788:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800678c:	2000      	movs	r0, #0
 800678e:	4932      	ldr	r1, [pc, #200]	@ (8006858 <_dtoa_r+0x700>)
 8006790:	f7f9 fcea 	bl	8000168 <__aeabi_dsub>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679c:	f7fa f90e 	bl	80009bc <__aeabi_dcmplt>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	f43f aef6 	beq.w	8006592 <_dtoa_r+0x43a>
 80067a6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80067a8:	1e73      	subs	r3, r6, #1
 80067aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80067ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067b0:	2b30      	cmp	r3, #48	@ 0x30
 80067b2:	d0f8      	beq.n	80067a6 <_dtoa_r+0x64e>
 80067b4:	9f04      	ldr	r7, [sp, #16]
 80067b6:	e73f      	b.n	8006638 <_dtoa_r+0x4e0>
 80067b8:	4b29      	ldr	r3, [pc, #164]	@ (8006860 <_dtoa_r+0x708>)
 80067ba:	f7f9 fe8d 	bl	80004d8 <__aeabi_dmul>
 80067be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c2:	e7bc      	b.n	800673e <_dtoa_r+0x5e6>
 80067c4:	d10c      	bne.n	80067e0 <_dtoa_r+0x688>
 80067c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ca:	2200      	movs	r2, #0
 80067cc:	4b25      	ldr	r3, [pc, #148]	@ (8006864 <_dtoa_r+0x70c>)
 80067ce:	f7f9 fe83 	bl	80004d8 <__aeabi_dmul>
 80067d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067d6:	f7fa f905 	bl	80009e4 <__aeabi_dcmpge>
 80067da:	2800      	cmp	r0, #0
 80067dc:	f000 815b 	beq.w	8006a96 <_dtoa_r+0x93e>
 80067e0:	2400      	movs	r4, #0
 80067e2:	4625      	mov	r5, r4
 80067e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067e6:	4656      	mov	r6, sl
 80067e8:	43db      	mvns	r3, r3
 80067ea:	9304      	str	r3, [sp, #16]
 80067ec:	2700      	movs	r7, #0
 80067ee:	4621      	mov	r1, r4
 80067f0:	4658      	mov	r0, fp
 80067f2:	f000 fbb7 	bl	8006f64 <_Bfree>
 80067f6:	2d00      	cmp	r5, #0
 80067f8:	d0dc      	beq.n	80067b4 <_dtoa_r+0x65c>
 80067fa:	b12f      	cbz	r7, 8006808 <_dtoa_r+0x6b0>
 80067fc:	42af      	cmp	r7, r5
 80067fe:	d003      	beq.n	8006808 <_dtoa_r+0x6b0>
 8006800:	4639      	mov	r1, r7
 8006802:	4658      	mov	r0, fp
 8006804:	f000 fbae 	bl	8006f64 <_Bfree>
 8006808:	4629      	mov	r1, r5
 800680a:	4658      	mov	r0, fp
 800680c:	f000 fbaa 	bl	8006f64 <_Bfree>
 8006810:	e7d0      	b.n	80067b4 <_dtoa_r+0x65c>
 8006812:	9704      	str	r7, [sp, #16]
 8006814:	4633      	mov	r3, r6
 8006816:	461e      	mov	r6, r3
 8006818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800681c:	2a39      	cmp	r2, #57	@ 0x39
 800681e:	d107      	bne.n	8006830 <_dtoa_r+0x6d8>
 8006820:	459a      	cmp	sl, r3
 8006822:	d1f8      	bne.n	8006816 <_dtoa_r+0x6be>
 8006824:	9a04      	ldr	r2, [sp, #16]
 8006826:	3201      	adds	r2, #1
 8006828:	9204      	str	r2, [sp, #16]
 800682a:	2230      	movs	r2, #48	@ 0x30
 800682c:	f88a 2000 	strb.w	r2, [sl]
 8006830:	781a      	ldrb	r2, [r3, #0]
 8006832:	3201      	adds	r2, #1
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	e7bd      	b.n	80067b4 <_dtoa_r+0x65c>
 8006838:	2200      	movs	r2, #0
 800683a:	4b09      	ldr	r3, [pc, #36]	@ (8006860 <_dtoa_r+0x708>)
 800683c:	f7f9 fe4c 	bl	80004d8 <__aeabi_dmul>
 8006840:	2200      	movs	r2, #0
 8006842:	2300      	movs	r3, #0
 8006844:	4604      	mov	r4, r0
 8006846:	460d      	mov	r5, r1
 8006848:	f7fa f8ae 	bl	80009a8 <__aeabi_dcmpeq>
 800684c:	2800      	cmp	r0, #0
 800684e:	f43f aebc 	beq.w	80065ca <_dtoa_r+0x472>
 8006852:	e6f1      	b.n	8006638 <_dtoa_r+0x4e0>
 8006854:	08009c20 	.word	0x08009c20
 8006858:	3fe00000 	.word	0x3fe00000
 800685c:	3ff00000 	.word	0x3ff00000
 8006860:	40240000 	.word	0x40240000
 8006864:	40140000 	.word	0x40140000
 8006868:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800686a:	2a00      	cmp	r2, #0
 800686c:	f000 80db 	beq.w	8006a26 <_dtoa_r+0x8ce>
 8006870:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006872:	2a01      	cmp	r2, #1
 8006874:	f300 80bf 	bgt.w	80069f6 <_dtoa_r+0x89e>
 8006878:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800687a:	2a00      	cmp	r2, #0
 800687c:	f000 80b7 	beq.w	80069ee <_dtoa_r+0x896>
 8006880:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006884:	4646      	mov	r6, r8
 8006886:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800688a:	2101      	movs	r1, #1
 800688c:	441a      	add	r2, r3
 800688e:	4658      	mov	r0, fp
 8006890:	4498      	add	r8, r3
 8006892:	9209      	str	r2, [sp, #36]	@ 0x24
 8006894:	f000 fc64 	bl	8007160 <__i2b>
 8006898:	4605      	mov	r5, r0
 800689a:	b15e      	cbz	r6, 80068b4 <_dtoa_r+0x75c>
 800689c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	dd08      	ble.n	80068b4 <_dtoa_r+0x75c>
 80068a2:	42b3      	cmp	r3, r6
 80068a4:	bfa8      	it	ge
 80068a6:	4633      	movge	r3, r6
 80068a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068aa:	eba8 0803 	sub.w	r8, r8, r3
 80068ae:	1af6      	subs	r6, r6, r3
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80068b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068b6:	b1f3      	cbz	r3, 80068f6 <_dtoa_r+0x79e>
 80068b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80b7 	beq.w	8006a2e <_dtoa_r+0x8d6>
 80068c0:	b18c      	cbz	r4, 80068e6 <_dtoa_r+0x78e>
 80068c2:	4629      	mov	r1, r5
 80068c4:	4622      	mov	r2, r4
 80068c6:	4658      	mov	r0, fp
 80068c8:	f000 fd08 	bl	80072dc <__pow5mult>
 80068cc:	464a      	mov	r2, r9
 80068ce:	4601      	mov	r1, r0
 80068d0:	4605      	mov	r5, r0
 80068d2:	4658      	mov	r0, fp
 80068d4:	f000 fc5a 	bl	800718c <__multiply>
 80068d8:	4649      	mov	r1, r9
 80068da:	9004      	str	r0, [sp, #16]
 80068dc:	4658      	mov	r0, fp
 80068de:	f000 fb41 	bl	8006f64 <_Bfree>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	4699      	mov	r9, r3
 80068e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068e8:	1b1a      	subs	r2, r3, r4
 80068ea:	d004      	beq.n	80068f6 <_dtoa_r+0x79e>
 80068ec:	4649      	mov	r1, r9
 80068ee:	4658      	mov	r0, fp
 80068f0:	f000 fcf4 	bl	80072dc <__pow5mult>
 80068f4:	4681      	mov	r9, r0
 80068f6:	2101      	movs	r1, #1
 80068f8:	4658      	mov	r0, fp
 80068fa:	f000 fc31 	bl	8007160 <__i2b>
 80068fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006900:	4604      	mov	r4, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 81c9 	beq.w	8006c9a <_dtoa_r+0xb42>
 8006908:	461a      	mov	r2, r3
 800690a:	4601      	mov	r1, r0
 800690c:	4658      	mov	r0, fp
 800690e:	f000 fce5 	bl	80072dc <__pow5mult>
 8006912:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006914:	4604      	mov	r4, r0
 8006916:	2b01      	cmp	r3, #1
 8006918:	f300 808f 	bgt.w	8006a3a <_dtoa_r+0x8e2>
 800691c:	9b02      	ldr	r3, [sp, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 8087 	bne.w	8006a32 <_dtoa_r+0x8da>
 8006924:	9b03      	ldr	r3, [sp, #12]
 8006926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800692a:	2b00      	cmp	r3, #0
 800692c:	f040 8083 	bne.w	8006a36 <_dtoa_r+0x8de>
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006936:	0d1b      	lsrs	r3, r3, #20
 8006938:	051b      	lsls	r3, r3, #20
 800693a:	b12b      	cbz	r3, 8006948 <_dtoa_r+0x7f0>
 800693c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800693e:	f108 0801 	add.w	r8, r8, #1
 8006942:	3301      	adds	r3, #1
 8006944:	9309      	str	r3, [sp, #36]	@ 0x24
 8006946:	2301      	movs	r3, #1
 8006948:	930a      	str	r3, [sp, #40]	@ 0x28
 800694a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 81aa 	beq.w	8006ca6 <_dtoa_r+0xb4e>
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006958:	6918      	ldr	r0, [r3, #16]
 800695a:	f000 fbb5 	bl	80070c8 <__hi0bits>
 800695e:	f1c0 0020 	rsb	r0, r0, #32
 8006962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006964:	4418      	add	r0, r3
 8006966:	f010 001f 	ands.w	r0, r0, #31
 800696a:	d071      	beq.n	8006a50 <_dtoa_r+0x8f8>
 800696c:	f1c0 0320 	rsb	r3, r0, #32
 8006970:	2b04      	cmp	r3, #4
 8006972:	dd65      	ble.n	8006a40 <_dtoa_r+0x8e8>
 8006974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006976:	f1c0 001c 	rsb	r0, r0, #28
 800697a:	4403      	add	r3, r0
 800697c:	4480      	add	r8, r0
 800697e:	4406      	add	r6, r0
 8006980:	9309      	str	r3, [sp, #36]	@ 0x24
 8006982:	f1b8 0f00 	cmp.w	r8, #0
 8006986:	dd05      	ble.n	8006994 <_dtoa_r+0x83c>
 8006988:	4649      	mov	r1, r9
 800698a:	4642      	mov	r2, r8
 800698c:	4658      	mov	r0, fp
 800698e:	f000 fcff 	bl	8007390 <__lshift>
 8006992:	4681      	mov	r9, r0
 8006994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006996:	2b00      	cmp	r3, #0
 8006998:	dd05      	ble.n	80069a6 <_dtoa_r+0x84e>
 800699a:	4621      	mov	r1, r4
 800699c:	461a      	mov	r2, r3
 800699e:	4658      	mov	r0, fp
 80069a0:	f000 fcf6 	bl	8007390 <__lshift>
 80069a4:	4604      	mov	r4, r0
 80069a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d053      	beq.n	8006a54 <_dtoa_r+0x8fc>
 80069ac:	4621      	mov	r1, r4
 80069ae:	4648      	mov	r0, r9
 80069b0:	f000 fd5a 	bl	8007468 <__mcmp>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	da4d      	bge.n	8006a54 <_dtoa_r+0x8fc>
 80069b8:	1e7b      	subs	r3, r7, #1
 80069ba:	4649      	mov	r1, r9
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	220a      	movs	r2, #10
 80069c0:	2300      	movs	r3, #0
 80069c2:	4658      	mov	r0, fp
 80069c4:	f000 faf0 	bl	8006fa8 <__multadd>
 80069c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069ca:	4681      	mov	r9, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 816c 	beq.w	8006caa <_dtoa_r+0xb52>
 80069d2:	2300      	movs	r3, #0
 80069d4:	4629      	mov	r1, r5
 80069d6:	220a      	movs	r2, #10
 80069d8:	4658      	mov	r0, fp
 80069da:	f000 fae5 	bl	8006fa8 <__multadd>
 80069de:	9b08      	ldr	r3, [sp, #32]
 80069e0:	4605      	mov	r5, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dc61      	bgt.n	8006aaa <_dtoa_r+0x952>
 80069e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	dc3b      	bgt.n	8006a64 <_dtoa_r+0x90c>
 80069ec:	e05d      	b.n	8006aaa <_dtoa_r+0x952>
 80069ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069f0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80069f4:	e746      	b.n	8006884 <_dtoa_r+0x72c>
 80069f6:	9b07      	ldr	r3, [sp, #28]
 80069f8:	1e5c      	subs	r4, r3, #1
 80069fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	bfbf      	itttt	lt
 8006a00:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a02:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006a04:	1ae3      	sublt	r3, r4, r3
 8006a06:	18d2      	addlt	r2, r2, r3
 8006a08:	bfa8      	it	ge
 8006a0a:	1b1c      	subge	r4, r3, r4
 8006a0c:	9b07      	ldr	r3, [sp, #28]
 8006a0e:	bfbe      	ittt	lt
 8006a10:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a12:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006a14:	2400      	movlt	r4, #0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bfb5      	itete	lt
 8006a1a:	eba8 0603 	sublt.w	r6, r8, r3
 8006a1e:	4646      	movge	r6, r8
 8006a20:	2300      	movlt	r3, #0
 8006a22:	9b07      	ldrge	r3, [sp, #28]
 8006a24:	e730      	b.n	8006888 <_dtoa_r+0x730>
 8006a26:	4646      	mov	r6, r8
 8006a28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a2a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a2c:	e735      	b.n	800689a <_dtoa_r+0x742>
 8006a2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a30:	e75c      	b.n	80068ec <_dtoa_r+0x794>
 8006a32:	2300      	movs	r3, #0
 8006a34:	e788      	b.n	8006948 <_dtoa_r+0x7f0>
 8006a36:	9b02      	ldr	r3, [sp, #8]
 8006a38:	e786      	b.n	8006948 <_dtoa_r+0x7f0>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a3e:	e788      	b.n	8006952 <_dtoa_r+0x7fa>
 8006a40:	d09f      	beq.n	8006982 <_dtoa_r+0x82a>
 8006a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a44:	331c      	adds	r3, #28
 8006a46:	441a      	add	r2, r3
 8006a48:	4498      	add	r8, r3
 8006a4a:	441e      	add	r6, r3
 8006a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a4e:	e798      	b.n	8006982 <_dtoa_r+0x82a>
 8006a50:	4603      	mov	r3, r0
 8006a52:	e7f6      	b.n	8006a42 <_dtoa_r+0x8ea>
 8006a54:	9b07      	ldr	r3, [sp, #28]
 8006a56:	9704      	str	r7, [sp, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dc20      	bgt.n	8006a9e <_dtoa_r+0x946>
 8006a5c:	9308      	str	r3, [sp, #32]
 8006a5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	dd1e      	ble.n	8006aa2 <_dtoa_r+0x94a>
 8006a64:	9b08      	ldr	r3, [sp, #32]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f47f aebc 	bne.w	80067e4 <_dtoa_r+0x68c>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	2205      	movs	r2, #5
 8006a70:	4658      	mov	r0, fp
 8006a72:	f000 fa99 	bl	8006fa8 <__multadd>
 8006a76:	4601      	mov	r1, r0
 8006a78:	4604      	mov	r4, r0
 8006a7a:	4648      	mov	r0, r9
 8006a7c:	f000 fcf4 	bl	8007468 <__mcmp>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	f77f aeaf 	ble.w	80067e4 <_dtoa_r+0x68c>
 8006a86:	2331      	movs	r3, #49	@ 0x31
 8006a88:	4656      	mov	r6, sl
 8006a8a:	f806 3b01 	strb.w	r3, [r6], #1
 8006a8e:	9b04      	ldr	r3, [sp, #16]
 8006a90:	3301      	adds	r3, #1
 8006a92:	9304      	str	r3, [sp, #16]
 8006a94:	e6aa      	b.n	80067ec <_dtoa_r+0x694>
 8006a96:	9c07      	ldr	r4, [sp, #28]
 8006a98:	9704      	str	r7, [sp, #16]
 8006a9a:	4625      	mov	r5, r4
 8006a9c:	e7f3      	b.n	8006a86 <_dtoa_r+0x92e>
 8006a9e:	9b07      	ldr	r3, [sp, #28]
 8006aa0:	9308      	str	r3, [sp, #32]
 8006aa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8104 	beq.w	8006cb2 <_dtoa_r+0xb5a>
 8006aaa:	2e00      	cmp	r6, #0
 8006aac:	dd05      	ble.n	8006aba <_dtoa_r+0x962>
 8006aae:	4629      	mov	r1, r5
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	4658      	mov	r0, fp
 8006ab4:	f000 fc6c 	bl	8007390 <__lshift>
 8006ab8:	4605      	mov	r5, r0
 8006aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d05a      	beq.n	8006b76 <_dtoa_r+0xa1e>
 8006ac0:	4658      	mov	r0, fp
 8006ac2:	6869      	ldr	r1, [r5, #4]
 8006ac4:	f000 fa0e 	bl	8006ee4 <_Balloc>
 8006ac8:	4606      	mov	r6, r0
 8006aca:	b928      	cbnz	r0, 8006ad8 <_dtoa_r+0x980>
 8006acc:	4602      	mov	r2, r0
 8006ace:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ad2:	4b83      	ldr	r3, [pc, #524]	@ (8006ce0 <_dtoa_r+0xb88>)
 8006ad4:	f7ff bb54 	b.w	8006180 <_dtoa_r+0x28>
 8006ad8:	692a      	ldr	r2, [r5, #16]
 8006ada:	f105 010c 	add.w	r1, r5, #12
 8006ade:	3202      	adds	r2, #2
 8006ae0:	0092      	lsls	r2, r2, #2
 8006ae2:	300c      	adds	r0, #12
 8006ae4:	f002 f922 	bl	8008d2c <memcpy>
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4631      	mov	r1, r6
 8006aec:	4658      	mov	r0, fp
 8006aee:	f000 fc4f 	bl	8007390 <__lshift>
 8006af2:	462f      	mov	r7, r5
 8006af4:	4605      	mov	r5, r0
 8006af6:	f10a 0301 	add.w	r3, sl, #1
 8006afa:	9307      	str	r3, [sp, #28]
 8006afc:	9b08      	ldr	r3, [sp, #32]
 8006afe:	4453      	add	r3, sl
 8006b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b02:	9b02      	ldr	r3, [sp, #8]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b0a:	9b07      	ldr	r3, [sp, #28]
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4648      	mov	r0, r9
 8006b12:	9302      	str	r3, [sp, #8]
 8006b14:	f7ff fa98 	bl	8006048 <quorem>
 8006b18:	4639      	mov	r1, r7
 8006b1a:	9008      	str	r0, [sp, #32]
 8006b1c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b20:	4648      	mov	r0, r9
 8006b22:	f000 fca1 	bl	8007468 <__mcmp>
 8006b26:	462a      	mov	r2, r5
 8006b28:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	4658      	mov	r0, fp
 8006b2e:	f000 fcb7 	bl	80074a0 <__mdiff>
 8006b32:	68c2      	ldr	r2, [r0, #12]
 8006b34:	4606      	mov	r6, r0
 8006b36:	bb02      	cbnz	r2, 8006b7a <_dtoa_r+0xa22>
 8006b38:	4601      	mov	r1, r0
 8006b3a:	4648      	mov	r0, r9
 8006b3c:	f000 fc94 	bl	8007468 <__mcmp>
 8006b40:	4602      	mov	r2, r0
 8006b42:	4631      	mov	r1, r6
 8006b44:	4658      	mov	r0, fp
 8006b46:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b48:	f000 fa0c 	bl	8006f64 <_Bfree>
 8006b4c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b50:	9e07      	ldr	r6, [sp, #28]
 8006b52:	ea43 0102 	orr.w	r1, r3, r2
 8006b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b58:	4319      	orrs	r1, r3
 8006b5a:	d110      	bne.n	8006b7e <_dtoa_r+0xa26>
 8006b5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b60:	d029      	beq.n	8006bb6 <_dtoa_r+0xa5e>
 8006b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dd02      	ble.n	8006b6e <_dtoa_r+0xa16>
 8006b68:	9b08      	ldr	r3, [sp, #32]
 8006b6a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	f883 8000 	strb.w	r8, [r3]
 8006b74:	e63b      	b.n	80067ee <_dtoa_r+0x696>
 8006b76:	4628      	mov	r0, r5
 8006b78:	e7bb      	b.n	8006af2 <_dtoa_r+0x99a>
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	e7e1      	b.n	8006b42 <_dtoa_r+0x9ea>
 8006b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	db04      	blt.n	8006b8e <_dtoa_r+0xa36>
 8006b84:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006b86:	430b      	orrs	r3, r1
 8006b88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	d120      	bne.n	8006bd0 <_dtoa_r+0xa78>
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	dded      	ble.n	8006b6e <_dtoa_r+0xa16>
 8006b92:	4649      	mov	r1, r9
 8006b94:	2201      	movs	r2, #1
 8006b96:	4658      	mov	r0, fp
 8006b98:	f000 fbfa 	bl	8007390 <__lshift>
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4681      	mov	r9, r0
 8006ba0:	f000 fc62 	bl	8007468 <__mcmp>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	dc03      	bgt.n	8006bb0 <_dtoa_r+0xa58>
 8006ba8:	d1e1      	bne.n	8006b6e <_dtoa_r+0xa16>
 8006baa:	f018 0f01 	tst.w	r8, #1
 8006bae:	d0de      	beq.n	8006b6e <_dtoa_r+0xa16>
 8006bb0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bb4:	d1d8      	bne.n	8006b68 <_dtoa_r+0xa10>
 8006bb6:	2339      	movs	r3, #57	@ 0x39
 8006bb8:	9a02      	ldr	r2, [sp, #8]
 8006bba:	7013      	strb	r3, [r2, #0]
 8006bbc:	4633      	mov	r3, r6
 8006bbe:	461e      	mov	r6, r3
 8006bc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	2a39      	cmp	r2, #57	@ 0x39
 8006bc8:	d052      	beq.n	8006c70 <_dtoa_r+0xb18>
 8006bca:	3201      	adds	r2, #1
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	e60e      	b.n	80067ee <_dtoa_r+0x696>
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	dd07      	ble.n	8006be4 <_dtoa_r+0xa8c>
 8006bd4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bd8:	d0ed      	beq.n	8006bb6 <_dtoa_r+0xa5e>
 8006bda:	9a02      	ldr	r2, [sp, #8]
 8006bdc:	f108 0301 	add.w	r3, r8, #1
 8006be0:	7013      	strb	r3, [r2, #0]
 8006be2:	e604      	b.n	80067ee <_dtoa_r+0x696>
 8006be4:	9b07      	ldr	r3, [sp, #28]
 8006be6:	9a07      	ldr	r2, [sp, #28]
 8006be8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006bec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d028      	beq.n	8006c44 <_dtoa_r+0xaec>
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	220a      	movs	r2, #10
 8006bf8:	4658      	mov	r0, fp
 8006bfa:	f000 f9d5 	bl	8006fa8 <__multadd>
 8006bfe:	42af      	cmp	r7, r5
 8006c00:	4681      	mov	r9, r0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	f04f 020a 	mov.w	r2, #10
 8006c0a:	4639      	mov	r1, r7
 8006c0c:	4658      	mov	r0, fp
 8006c0e:	d107      	bne.n	8006c20 <_dtoa_r+0xac8>
 8006c10:	f000 f9ca 	bl	8006fa8 <__multadd>
 8006c14:	4607      	mov	r7, r0
 8006c16:	4605      	mov	r5, r0
 8006c18:	9b07      	ldr	r3, [sp, #28]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	9307      	str	r3, [sp, #28]
 8006c1e:	e774      	b.n	8006b0a <_dtoa_r+0x9b2>
 8006c20:	f000 f9c2 	bl	8006fa8 <__multadd>
 8006c24:	4629      	mov	r1, r5
 8006c26:	4607      	mov	r7, r0
 8006c28:	2300      	movs	r3, #0
 8006c2a:	220a      	movs	r2, #10
 8006c2c:	4658      	mov	r0, fp
 8006c2e:	f000 f9bb 	bl	8006fa8 <__multadd>
 8006c32:	4605      	mov	r5, r0
 8006c34:	e7f0      	b.n	8006c18 <_dtoa_r+0xac0>
 8006c36:	9b08      	ldr	r3, [sp, #32]
 8006c38:	2700      	movs	r7, #0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bfcc      	ite	gt
 8006c3e:	461e      	movgt	r6, r3
 8006c40:	2601      	movle	r6, #1
 8006c42:	4456      	add	r6, sl
 8006c44:	4649      	mov	r1, r9
 8006c46:	2201      	movs	r2, #1
 8006c48:	4658      	mov	r0, fp
 8006c4a:	f000 fba1 	bl	8007390 <__lshift>
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4681      	mov	r9, r0
 8006c52:	f000 fc09 	bl	8007468 <__mcmp>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	dcb0      	bgt.n	8006bbc <_dtoa_r+0xa64>
 8006c5a:	d102      	bne.n	8006c62 <_dtoa_r+0xb0a>
 8006c5c:	f018 0f01 	tst.w	r8, #1
 8006c60:	d1ac      	bne.n	8006bbc <_dtoa_r+0xa64>
 8006c62:	4633      	mov	r3, r6
 8006c64:	461e      	mov	r6, r3
 8006c66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c6a:	2a30      	cmp	r2, #48	@ 0x30
 8006c6c:	d0fa      	beq.n	8006c64 <_dtoa_r+0xb0c>
 8006c6e:	e5be      	b.n	80067ee <_dtoa_r+0x696>
 8006c70:	459a      	cmp	sl, r3
 8006c72:	d1a4      	bne.n	8006bbe <_dtoa_r+0xa66>
 8006c74:	9b04      	ldr	r3, [sp, #16]
 8006c76:	3301      	adds	r3, #1
 8006c78:	9304      	str	r3, [sp, #16]
 8006c7a:	2331      	movs	r3, #49	@ 0x31
 8006c7c:	f88a 3000 	strb.w	r3, [sl]
 8006c80:	e5b5      	b.n	80067ee <_dtoa_r+0x696>
 8006c82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c84:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006ce4 <_dtoa_r+0xb8c>
 8006c88:	b11b      	cbz	r3, 8006c92 <_dtoa_r+0xb3a>
 8006c8a:	f10a 0308 	add.w	r3, sl, #8
 8006c8e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	4650      	mov	r0, sl
 8006c94:	b017      	add	sp, #92	@ 0x5c
 8006c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	f77f ae3d 	ble.w	800691c <_dtoa_r+0x7c4>
 8006ca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	e65b      	b.n	8006962 <_dtoa_r+0x80a>
 8006caa:	9b08      	ldr	r3, [sp, #32]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f77f aed6 	ble.w	8006a5e <_dtoa_r+0x906>
 8006cb2:	4656      	mov	r6, sl
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4648      	mov	r0, r9
 8006cb8:	f7ff f9c6 	bl	8006048 <quorem>
 8006cbc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006cc0:	9b08      	ldr	r3, [sp, #32]
 8006cc2:	f806 8b01 	strb.w	r8, [r6], #1
 8006cc6:	eba6 020a 	sub.w	r2, r6, sl
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	ddb3      	ble.n	8006c36 <_dtoa_r+0xade>
 8006cce:	4649      	mov	r1, r9
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	220a      	movs	r2, #10
 8006cd4:	4658      	mov	r0, fp
 8006cd6:	f000 f967 	bl	8006fa8 <__multadd>
 8006cda:	4681      	mov	r9, r0
 8006cdc:	e7ea      	b.n	8006cb4 <_dtoa_r+0xb5c>
 8006cde:	bf00      	nop
 8006ce0:	08009b7f 	.word	0x08009b7f
 8006ce4:	08009b03 	.word	0x08009b03

08006ce8 <_free_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	4605      	mov	r5, r0
 8006cec:	2900      	cmp	r1, #0
 8006cee:	d040      	beq.n	8006d72 <_free_r+0x8a>
 8006cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf4:	1f0c      	subs	r4, r1, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfb8      	it	lt
 8006cfa:	18e4      	addlt	r4, r4, r3
 8006cfc:	f000 f8e6 	bl	8006ecc <__malloc_lock>
 8006d00:	4a1c      	ldr	r2, [pc, #112]	@ (8006d74 <_free_r+0x8c>)
 8006d02:	6813      	ldr	r3, [r2, #0]
 8006d04:	b933      	cbnz	r3, 8006d14 <_free_r+0x2c>
 8006d06:	6063      	str	r3, [r4, #4]
 8006d08:	6014      	str	r4, [r2, #0]
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d10:	f000 b8e2 	b.w	8006ed8 <__malloc_unlock>
 8006d14:	42a3      	cmp	r3, r4
 8006d16:	d908      	bls.n	8006d2a <_free_r+0x42>
 8006d18:	6820      	ldr	r0, [r4, #0]
 8006d1a:	1821      	adds	r1, r4, r0
 8006d1c:	428b      	cmp	r3, r1
 8006d1e:	bf01      	itttt	eq
 8006d20:	6819      	ldreq	r1, [r3, #0]
 8006d22:	685b      	ldreq	r3, [r3, #4]
 8006d24:	1809      	addeq	r1, r1, r0
 8006d26:	6021      	streq	r1, [r4, #0]
 8006d28:	e7ed      	b.n	8006d06 <_free_r+0x1e>
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	b10b      	cbz	r3, 8006d34 <_free_r+0x4c>
 8006d30:	42a3      	cmp	r3, r4
 8006d32:	d9fa      	bls.n	8006d2a <_free_r+0x42>
 8006d34:	6811      	ldr	r1, [r2, #0]
 8006d36:	1850      	adds	r0, r2, r1
 8006d38:	42a0      	cmp	r0, r4
 8006d3a:	d10b      	bne.n	8006d54 <_free_r+0x6c>
 8006d3c:	6820      	ldr	r0, [r4, #0]
 8006d3e:	4401      	add	r1, r0
 8006d40:	1850      	adds	r0, r2, r1
 8006d42:	4283      	cmp	r3, r0
 8006d44:	6011      	str	r1, [r2, #0]
 8006d46:	d1e0      	bne.n	8006d0a <_free_r+0x22>
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	4408      	add	r0, r1
 8006d4e:	6010      	str	r0, [r2, #0]
 8006d50:	6053      	str	r3, [r2, #4]
 8006d52:	e7da      	b.n	8006d0a <_free_r+0x22>
 8006d54:	d902      	bls.n	8006d5c <_free_r+0x74>
 8006d56:	230c      	movs	r3, #12
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	e7d6      	b.n	8006d0a <_free_r+0x22>
 8006d5c:	6820      	ldr	r0, [r4, #0]
 8006d5e:	1821      	adds	r1, r4, r0
 8006d60:	428b      	cmp	r3, r1
 8006d62:	bf01      	itttt	eq
 8006d64:	6819      	ldreq	r1, [r3, #0]
 8006d66:	685b      	ldreq	r3, [r3, #4]
 8006d68:	1809      	addeq	r1, r1, r0
 8006d6a:	6021      	streq	r1, [r4, #0]
 8006d6c:	6063      	str	r3, [r4, #4]
 8006d6e:	6054      	str	r4, [r2, #4]
 8006d70:	e7cb      	b.n	8006d0a <_free_r+0x22>
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20000464 	.word	0x20000464

08006d78 <malloc>:
 8006d78:	4b02      	ldr	r3, [pc, #8]	@ (8006d84 <malloc+0xc>)
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	f000 b825 	b.w	8006dcc <_malloc_r>
 8006d82:	bf00      	nop
 8006d84:	20000034 	.word	0x20000034

08006d88 <sbrk_aligned>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	4e0f      	ldr	r6, [pc, #60]	@ (8006dc8 <sbrk_aligned+0x40>)
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	6831      	ldr	r1, [r6, #0]
 8006d90:	4605      	mov	r5, r0
 8006d92:	b911      	cbnz	r1, 8006d9a <sbrk_aligned+0x12>
 8006d94:	f001 ffba 	bl	8008d0c <_sbrk_r>
 8006d98:	6030      	str	r0, [r6, #0]
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f001 ffb5 	bl	8008d0c <_sbrk_r>
 8006da2:	1c43      	adds	r3, r0, #1
 8006da4:	d103      	bne.n	8006dae <sbrk_aligned+0x26>
 8006da6:	f04f 34ff 	mov.w	r4, #4294967295
 8006daa:	4620      	mov	r0, r4
 8006dac:	bd70      	pop	{r4, r5, r6, pc}
 8006dae:	1cc4      	adds	r4, r0, #3
 8006db0:	f024 0403 	bic.w	r4, r4, #3
 8006db4:	42a0      	cmp	r0, r4
 8006db6:	d0f8      	beq.n	8006daa <sbrk_aligned+0x22>
 8006db8:	1a21      	subs	r1, r4, r0
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f001 ffa6 	bl	8008d0c <_sbrk_r>
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d1f2      	bne.n	8006daa <sbrk_aligned+0x22>
 8006dc4:	e7ef      	b.n	8006da6 <sbrk_aligned+0x1e>
 8006dc6:	bf00      	nop
 8006dc8:	20000460 	.word	0x20000460

08006dcc <_malloc_r>:
 8006dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd0:	1ccd      	adds	r5, r1, #3
 8006dd2:	f025 0503 	bic.w	r5, r5, #3
 8006dd6:	3508      	adds	r5, #8
 8006dd8:	2d0c      	cmp	r5, #12
 8006dda:	bf38      	it	cc
 8006ddc:	250c      	movcc	r5, #12
 8006dde:	2d00      	cmp	r5, #0
 8006de0:	4606      	mov	r6, r0
 8006de2:	db01      	blt.n	8006de8 <_malloc_r+0x1c>
 8006de4:	42a9      	cmp	r1, r5
 8006de6:	d904      	bls.n	8006df2 <_malloc_r+0x26>
 8006de8:	230c      	movs	r3, #12
 8006dea:	6033      	str	r3, [r6, #0]
 8006dec:	2000      	movs	r0, #0
 8006dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006df2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ec8 <_malloc_r+0xfc>
 8006df6:	f000 f869 	bl	8006ecc <__malloc_lock>
 8006dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8006dfe:	461c      	mov	r4, r3
 8006e00:	bb44      	cbnz	r4, 8006e54 <_malloc_r+0x88>
 8006e02:	4629      	mov	r1, r5
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7ff ffbf 	bl	8006d88 <sbrk_aligned>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	d158      	bne.n	8006ec2 <_malloc_r+0xf6>
 8006e10:	f8d8 4000 	ldr.w	r4, [r8]
 8006e14:	4627      	mov	r7, r4
 8006e16:	2f00      	cmp	r7, #0
 8006e18:	d143      	bne.n	8006ea2 <_malloc_r+0xd6>
 8006e1a:	2c00      	cmp	r4, #0
 8006e1c:	d04b      	beq.n	8006eb6 <_malloc_r+0xea>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	4639      	mov	r1, r7
 8006e22:	4630      	mov	r0, r6
 8006e24:	eb04 0903 	add.w	r9, r4, r3
 8006e28:	f001 ff70 	bl	8008d0c <_sbrk_r>
 8006e2c:	4581      	cmp	r9, r0
 8006e2e:	d142      	bne.n	8006eb6 <_malloc_r+0xea>
 8006e30:	6821      	ldr	r1, [r4, #0]
 8006e32:	4630      	mov	r0, r6
 8006e34:	1a6d      	subs	r5, r5, r1
 8006e36:	4629      	mov	r1, r5
 8006e38:	f7ff ffa6 	bl	8006d88 <sbrk_aligned>
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d03a      	beq.n	8006eb6 <_malloc_r+0xea>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	442b      	add	r3, r5
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	f8d8 3000 	ldr.w	r3, [r8]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	bb62      	cbnz	r2, 8006ea8 <_malloc_r+0xdc>
 8006e4e:	f8c8 7000 	str.w	r7, [r8]
 8006e52:	e00f      	b.n	8006e74 <_malloc_r+0xa8>
 8006e54:	6822      	ldr	r2, [r4, #0]
 8006e56:	1b52      	subs	r2, r2, r5
 8006e58:	d420      	bmi.n	8006e9c <_malloc_r+0xd0>
 8006e5a:	2a0b      	cmp	r2, #11
 8006e5c:	d917      	bls.n	8006e8e <_malloc_r+0xc2>
 8006e5e:	1961      	adds	r1, r4, r5
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	6025      	str	r5, [r4, #0]
 8006e64:	bf18      	it	ne
 8006e66:	6059      	strne	r1, [r3, #4]
 8006e68:	6863      	ldr	r3, [r4, #4]
 8006e6a:	bf08      	it	eq
 8006e6c:	f8c8 1000 	streq.w	r1, [r8]
 8006e70:	5162      	str	r2, [r4, r5]
 8006e72:	604b      	str	r3, [r1, #4]
 8006e74:	4630      	mov	r0, r6
 8006e76:	f000 f82f 	bl	8006ed8 <__malloc_unlock>
 8006e7a:	f104 000b 	add.w	r0, r4, #11
 8006e7e:	1d23      	adds	r3, r4, #4
 8006e80:	f020 0007 	bic.w	r0, r0, #7
 8006e84:	1ac2      	subs	r2, r0, r3
 8006e86:	bf1c      	itt	ne
 8006e88:	1a1b      	subne	r3, r3, r0
 8006e8a:	50a3      	strne	r3, [r4, r2]
 8006e8c:	e7af      	b.n	8006dee <_malloc_r+0x22>
 8006e8e:	6862      	ldr	r2, [r4, #4]
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	bf0c      	ite	eq
 8006e94:	f8c8 2000 	streq.w	r2, [r8]
 8006e98:	605a      	strne	r2, [r3, #4]
 8006e9a:	e7eb      	b.n	8006e74 <_malloc_r+0xa8>
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	6864      	ldr	r4, [r4, #4]
 8006ea0:	e7ae      	b.n	8006e00 <_malloc_r+0x34>
 8006ea2:	463c      	mov	r4, r7
 8006ea4:	687f      	ldr	r7, [r7, #4]
 8006ea6:	e7b6      	b.n	8006e16 <_malloc_r+0x4a>
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	d1fb      	bne.n	8006ea8 <_malloc_r+0xdc>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	6053      	str	r3, [r2, #4]
 8006eb4:	e7de      	b.n	8006e74 <_malloc_r+0xa8>
 8006eb6:	230c      	movs	r3, #12
 8006eb8:	4630      	mov	r0, r6
 8006eba:	6033      	str	r3, [r6, #0]
 8006ebc:	f000 f80c 	bl	8006ed8 <__malloc_unlock>
 8006ec0:	e794      	b.n	8006dec <_malloc_r+0x20>
 8006ec2:	6005      	str	r5, [r0, #0]
 8006ec4:	e7d6      	b.n	8006e74 <_malloc_r+0xa8>
 8006ec6:	bf00      	nop
 8006ec8:	20000464 	.word	0x20000464

08006ecc <__malloc_lock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	@ (8006ed4 <__malloc_lock+0x8>)
 8006ece:	f7ff b8a6 	b.w	800601e <__retarget_lock_acquire_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	2000045c 	.word	0x2000045c

08006ed8 <__malloc_unlock>:
 8006ed8:	4801      	ldr	r0, [pc, #4]	@ (8006ee0 <__malloc_unlock+0x8>)
 8006eda:	f7ff b8a1 	b.w	8006020 <__retarget_lock_release_recursive>
 8006ede:	bf00      	nop
 8006ee0:	2000045c 	.word	0x2000045c

08006ee4 <_Balloc>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	69c6      	ldr	r6, [r0, #28]
 8006ee8:	4604      	mov	r4, r0
 8006eea:	460d      	mov	r5, r1
 8006eec:	b976      	cbnz	r6, 8006f0c <_Balloc+0x28>
 8006eee:	2010      	movs	r0, #16
 8006ef0:	f7ff ff42 	bl	8006d78 <malloc>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	61e0      	str	r0, [r4, #28]
 8006ef8:	b920      	cbnz	r0, 8006f04 <_Balloc+0x20>
 8006efa:	216b      	movs	r1, #107	@ 0x6b
 8006efc:	4b17      	ldr	r3, [pc, #92]	@ (8006f5c <_Balloc+0x78>)
 8006efe:	4818      	ldr	r0, [pc, #96]	@ (8006f60 <_Balloc+0x7c>)
 8006f00:	f001 ff28 	bl	8008d54 <__assert_func>
 8006f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f08:	6006      	str	r6, [r0, #0]
 8006f0a:	60c6      	str	r6, [r0, #12]
 8006f0c:	69e6      	ldr	r6, [r4, #28]
 8006f0e:	68f3      	ldr	r3, [r6, #12]
 8006f10:	b183      	cbz	r3, 8006f34 <_Balloc+0x50>
 8006f12:	69e3      	ldr	r3, [r4, #28]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f1a:	b9b8      	cbnz	r0, 8006f4c <_Balloc+0x68>
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f22:	1d72      	adds	r2, r6, #5
 8006f24:	4620      	mov	r0, r4
 8006f26:	0092      	lsls	r2, r2, #2
 8006f28:	f001 ff32 	bl	8008d90 <_calloc_r>
 8006f2c:	b160      	cbz	r0, 8006f48 <_Balloc+0x64>
 8006f2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f32:	e00e      	b.n	8006f52 <_Balloc+0x6e>
 8006f34:	2221      	movs	r2, #33	@ 0x21
 8006f36:	2104      	movs	r1, #4
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f001 ff29 	bl	8008d90 <_calloc_r>
 8006f3e:	69e3      	ldr	r3, [r4, #28]
 8006f40:	60f0      	str	r0, [r6, #12]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e4      	bne.n	8006f12 <_Balloc+0x2e>
 8006f48:	2000      	movs	r0, #0
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	6802      	ldr	r2, [r0, #0]
 8006f4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f52:	2300      	movs	r3, #0
 8006f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f58:	e7f7      	b.n	8006f4a <_Balloc+0x66>
 8006f5a:	bf00      	nop
 8006f5c:	08009b10 	.word	0x08009b10
 8006f60:	08009b90 	.word	0x08009b90

08006f64 <_Bfree>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	69c6      	ldr	r6, [r0, #28]
 8006f68:	4605      	mov	r5, r0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	b976      	cbnz	r6, 8006f8c <_Bfree+0x28>
 8006f6e:	2010      	movs	r0, #16
 8006f70:	f7ff ff02 	bl	8006d78 <malloc>
 8006f74:	4602      	mov	r2, r0
 8006f76:	61e8      	str	r0, [r5, #28]
 8006f78:	b920      	cbnz	r0, 8006f84 <_Bfree+0x20>
 8006f7a:	218f      	movs	r1, #143	@ 0x8f
 8006f7c:	4b08      	ldr	r3, [pc, #32]	@ (8006fa0 <_Bfree+0x3c>)
 8006f7e:	4809      	ldr	r0, [pc, #36]	@ (8006fa4 <_Bfree+0x40>)
 8006f80:	f001 fee8 	bl	8008d54 <__assert_func>
 8006f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f88:	6006      	str	r6, [r0, #0]
 8006f8a:	60c6      	str	r6, [r0, #12]
 8006f8c:	b13c      	cbz	r4, 8006f9e <_Bfree+0x3a>
 8006f8e:	69eb      	ldr	r3, [r5, #28]
 8006f90:	6862      	ldr	r2, [r4, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f98:	6021      	str	r1, [r4, #0]
 8006f9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	08009b10 	.word	0x08009b10
 8006fa4:	08009b90 	.word	0x08009b90

08006fa8 <__multadd>:
 8006fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fac:	4607      	mov	r7, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	461e      	mov	r6, r3
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	690d      	ldr	r5, [r1, #16]
 8006fb6:	f101 0c14 	add.w	ip, r1, #20
 8006fba:	f8dc 3000 	ldr.w	r3, [ip]
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	b299      	uxth	r1, r3
 8006fc2:	fb02 6101 	mla	r1, r2, r1, r6
 8006fc6:	0c1e      	lsrs	r6, r3, #16
 8006fc8:	0c0b      	lsrs	r3, r1, #16
 8006fca:	fb02 3306 	mla	r3, r2, r6, r3
 8006fce:	b289      	uxth	r1, r1
 8006fd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fd4:	4285      	cmp	r5, r0
 8006fd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fda:	f84c 1b04 	str.w	r1, [ip], #4
 8006fde:	dcec      	bgt.n	8006fba <__multadd+0x12>
 8006fe0:	b30e      	cbz	r6, 8007026 <__multadd+0x7e>
 8006fe2:	68a3      	ldr	r3, [r4, #8]
 8006fe4:	42ab      	cmp	r3, r5
 8006fe6:	dc19      	bgt.n	800701c <__multadd+0x74>
 8006fe8:	6861      	ldr	r1, [r4, #4]
 8006fea:	4638      	mov	r0, r7
 8006fec:	3101      	adds	r1, #1
 8006fee:	f7ff ff79 	bl	8006ee4 <_Balloc>
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	b928      	cbnz	r0, 8007002 <__multadd+0x5a>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	21ba      	movs	r1, #186	@ 0xba
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800702c <__multadd+0x84>)
 8006ffc:	480c      	ldr	r0, [pc, #48]	@ (8007030 <__multadd+0x88>)
 8006ffe:	f001 fea9 	bl	8008d54 <__assert_func>
 8007002:	6922      	ldr	r2, [r4, #16]
 8007004:	f104 010c 	add.w	r1, r4, #12
 8007008:	3202      	adds	r2, #2
 800700a:	0092      	lsls	r2, r2, #2
 800700c:	300c      	adds	r0, #12
 800700e:	f001 fe8d 	bl	8008d2c <memcpy>
 8007012:	4621      	mov	r1, r4
 8007014:	4638      	mov	r0, r7
 8007016:	f7ff ffa5 	bl	8006f64 <_Bfree>
 800701a:	4644      	mov	r4, r8
 800701c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007020:	3501      	adds	r5, #1
 8007022:	615e      	str	r6, [r3, #20]
 8007024:	6125      	str	r5, [r4, #16]
 8007026:	4620      	mov	r0, r4
 8007028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800702c:	08009b7f 	.word	0x08009b7f
 8007030:	08009b90 	.word	0x08009b90

08007034 <__s2b>:
 8007034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007038:	4615      	mov	r5, r2
 800703a:	2209      	movs	r2, #9
 800703c:	461f      	mov	r7, r3
 800703e:	3308      	adds	r3, #8
 8007040:	460c      	mov	r4, r1
 8007042:	fb93 f3f2 	sdiv	r3, r3, r2
 8007046:	4606      	mov	r6, r0
 8007048:	2201      	movs	r2, #1
 800704a:	2100      	movs	r1, #0
 800704c:	429a      	cmp	r2, r3
 800704e:	db09      	blt.n	8007064 <__s2b+0x30>
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff ff47 	bl	8006ee4 <_Balloc>
 8007056:	b940      	cbnz	r0, 800706a <__s2b+0x36>
 8007058:	4602      	mov	r2, r0
 800705a:	21d3      	movs	r1, #211	@ 0xd3
 800705c:	4b18      	ldr	r3, [pc, #96]	@ (80070c0 <__s2b+0x8c>)
 800705e:	4819      	ldr	r0, [pc, #100]	@ (80070c4 <__s2b+0x90>)
 8007060:	f001 fe78 	bl	8008d54 <__assert_func>
 8007064:	0052      	lsls	r2, r2, #1
 8007066:	3101      	adds	r1, #1
 8007068:	e7f0      	b.n	800704c <__s2b+0x18>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	2d09      	cmp	r5, #9
 800706e:	6143      	str	r3, [r0, #20]
 8007070:	f04f 0301 	mov.w	r3, #1
 8007074:	6103      	str	r3, [r0, #16]
 8007076:	dd16      	ble.n	80070a6 <__s2b+0x72>
 8007078:	f104 0909 	add.w	r9, r4, #9
 800707c:	46c8      	mov	r8, r9
 800707e:	442c      	add	r4, r5
 8007080:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007084:	4601      	mov	r1, r0
 8007086:	220a      	movs	r2, #10
 8007088:	4630      	mov	r0, r6
 800708a:	3b30      	subs	r3, #48	@ 0x30
 800708c:	f7ff ff8c 	bl	8006fa8 <__multadd>
 8007090:	45a0      	cmp	r8, r4
 8007092:	d1f5      	bne.n	8007080 <__s2b+0x4c>
 8007094:	f1a5 0408 	sub.w	r4, r5, #8
 8007098:	444c      	add	r4, r9
 800709a:	1b2d      	subs	r5, r5, r4
 800709c:	1963      	adds	r3, r4, r5
 800709e:	42bb      	cmp	r3, r7
 80070a0:	db04      	blt.n	80070ac <__s2b+0x78>
 80070a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a6:	2509      	movs	r5, #9
 80070a8:	340a      	adds	r4, #10
 80070aa:	e7f6      	b.n	800709a <__s2b+0x66>
 80070ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80070b0:	4601      	mov	r1, r0
 80070b2:	220a      	movs	r2, #10
 80070b4:	4630      	mov	r0, r6
 80070b6:	3b30      	subs	r3, #48	@ 0x30
 80070b8:	f7ff ff76 	bl	8006fa8 <__multadd>
 80070bc:	e7ee      	b.n	800709c <__s2b+0x68>
 80070be:	bf00      	nop
 80070c0:	08009b7f 	.word	0x08009b7f
 80070c4:	08009b90 	.word	0x08009b90

080070c8 <__hi0bits>:
 80070c8:	4603      	mov	r3, r0
 80070ca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070ce:	bf3a      	itte	cc
 80070d0:	0403      	lslcc	r3, r0, #16
 80070d2:	2010      	movcc	r0, #16
 80070d4:	2000      	movcs	r0, #0
 80070d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070da:	bf3c      	itt	cc
 80070dc:	021b      	lslcc	r3, r3, #8
 80070de:	3008      	addcc	r0, #8
 80070e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070e4:	bf3c      	itt	cc
 80070e6:	011b      	lslcc	r3, r3, #4
 80070e8:	3004      	addcc	r0, #4
 80070ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ee:	bf3c      	itt	cc
 80070f0:	009b      	lslcc	r3, r3, #2
 80070f2:	3002      	addcc	r0, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	db05      	blt.n	8007104 <__hi0bits+0x3c>
 80070f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070fc:	f100 0001 	add.w	r0, r0, #1
 8007100:	bf08      	it	eq
 8007102:	2020      	moveq	r0, #32
 8007104:	4770      	bx	lr

08007106 <__lo0bits>:
 8007106:	6803      	ldr	r3, [r0, #0]
 8007108:	4602      	mov	r2, r0
 800710a:	f013 0007 	ands.w	r0, r3, #7
 800710e:	d00b      	beq.n	8007128 <__lo0bits+0x22>
 8007110:	07d9      	lsls	r1, r3, #31
 8007112:	d421      	bmi.n	8007158 <__lo0bits+0x52>
 8007114:	0798      	lsls	r0, r3, #30
 8007116:	bf49      	itett	mi
 8007118:	085b      	lsrmi	r3, r3, #1
 800711a:	089b      	lsrpl	r3, r3, #2
 800711c:	2001      	movmi	r0, #1
 800711e:	6013      	strmi	r3, [r2, #0]
 8007120:	bf5c      	itt	pl
 8007122:	2002      	movpl	r0, #2
 8007124:	6013      	strpl	r3, [r2, #0]
 8007126:	4770      	bx	lr
 8007128:	b299      	uxth	r1, r3
 800712a:	b909      	cbnz	r1, 8007130 <__lo0bits+0x2a>
 800712c:	2010      	movs	r0, #16
 800712e:	0c1b      	lsrs	r3, r3, #16
 8007130:	b2d9      	uxtb	r1, r3
 8007132:	b909      	cbnz	r1, 8007138 <__lo0bits+0x32>
 8007134:	3008      	adds	r0, #8
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	0719      	lsls	r1, r3, #28
 800713a:	bf04      	itt	eq
 800713c:	091b      	lsreq	r3, r3, #4
 800713e:	3004      	addeq	r0, #4
 8007140:	0799      	lsls	r1, r3, #30
 8007142:	bf04      	itt	eq
 8007144:	089b      	lsreq	r3, r3, #2
 8007146:	3002      	addeq	r0, #2
 8007148:	07d9      	lsls	r1, r3, #31
 800714a:	d403      	bmi.n	8007154 <__lo0bits+0x4e>
 800714c:	085b      	lsrs	r3, r3, #1
 800714e:	f100 0001 	add.w	r0, r0, #1
 8007152:	d003      	beq.n	800715c <__lo0bits+0x56>
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	4770      	bx	lr
 8007158:	2000      	movs	r0, #0
 800715a:	4770      	bx	lr
 800715c:	2020      	movs	r0, #32
 800715e:	4770      	bx	lr

08007160 <__i2b>:
 8007160:	b510      	push	{r4, lr}
 8007162:	460c      	mov	r4, r1
 8007164:	2101      	movs	r1, #1
 8007166:	f7ff febd 	bl	8006ee4 <_Balloc>
 800716a:	4602      	mov	r2, r0
 800716c:	b928      	cbnz	r0, 800717a <__i2b+0x1a>
 800716e:	f240 1145 	movw	r1, #325	@ 0x145
 8007172:	4b04      	ldr	r3, [pc, #16]	@ (8007184 <__i2b+0x24>)
 8007174:	4804      	ldr	r0, [pc, #16]	@ (8007188 <__i2b+0x28>)
 8007176:	f001 fded 	bl	8008d54 <__assert_func>
 800717a:	2301      	movs	r3, #1
 800717c:	6144      	str	r4, [r0, #20]
 800717e:	6103      	str	r3, [r0, #16]
 8007180:	bd10      	pop	{r4, pc}
 8007182:	bf00      	nop
 8007184:	08009b7f 	.word	0x08009b7f
 8007188:	08009b90 	.word	0x08009b90

0800718c <__multiply>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	4614      	mov	r4, r2
 8007192:	690a      	ldr	r2, [r1, #16]
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	460f      	mov	r7, r1
 8007198:	429a      	cmp	r2, r3
 800719a:	bfa2      	ittt	ge
 800719c:	4623      	movge	r3, r4
 800719e:	460c      	movge	r4, r1
 80071a0:	461f      	movge	r7, r3
 80071a2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80071a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80071aa:	68a3      	ldr	r3, [r4, #8]
 80071ac:	6861      	ldr	r1, [r4, #4]
 80071ae:	eb0a 0609 	add.w	r6, sl, r9
 80071b2:	42b3      	cmp	r3, r6
 80071b4:	b085      	sub	sp, #20
 80071b6:	bfb8      	it	lt
 80071b8:	3101      	addlt	r1, #1
 80071ba:	f7ff fe93 	bl	8006ee4 <_Balloc>
 80071be:	b930      	cbnz	r0, 80071ce <__multiply+0x42>
 80071c0:	4602      	mov	r2, r0
 80071c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071c6:	4b43      	ldr	r3, [pc, #268]	@ (80072d4 <__multiply+0x148>)
 80071c8:	4843      	ldr	r0, [pc, #268]	@ (80072d8 <__multiply+0x14c>)
 80071ca:	f001 fdc3 	bl	8008d54 <__assert_func>
 80071ce:	f100 0514 	add.w	r5, r0, #20
 80071d2:	462b      	mov	r3, r5
 80071d4:	2200      	movs	r2, #0
 80071d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071da:	4543      	cmp	r3, r8
 80071dc:	d321      	bcc.n	8007222 <__multiply+0x96>
 80071de:	f107 0114 	add.w	r1, r7, #20
 80071e2:	f104 0214 	add.w	r2, r4, #20
 80071e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80071ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071ee:	9302      	str	r3, [sp, #8]
 80071f0:	1b13      	subs	r3, r2, r4
 80071f2:	3b15      	subs	r3, #21
 80071f4:	f023 0303 	bic.w	r3, r3, #3
 80071f8:	3304      	adds	r3, #4
 80071fa:	f104 0715 	add.w	r7, r4, #21
 80071fe:	42ba      	cmp	r2, r7
 8007200:	bf38      	it	cc
 8007202:	2304      	movcc	r3, #4
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	9b02      	ldr	r3, [sp, #8]
 8007208:	9103      	str	r1, [sp, #12]
 800720a:	428b      	cmp	r3, r1
 800720c:	d80c      	bhi.n	8007228 <__multiply+0x9c>
 800720e:	2e00      	cmp	r6, #0
 8007210:	dd03      	ble.n	800721a <__multiply+0x8e>
 8007212:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007216:	2b00      	cmp	r3, #0
 8007218:	d05a      	beq.n	80072d0 <__multiply+0x144>
 800721a:	6106      	str	r6, [r0, #16]
 800721c:	b005      	add	sp, #20
 800721e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007222:	f843 2b04 	str.w	r2, [r3], #4
 8007226:	e7d8      	b.n	80071da <__multiply+0x4e>
 8007228:	f8b1 a000 	ldrh.w	sl, [r1]
 800722c:	f1ba 0f00 	cmp.w	sl, #0
 8007230:	d023      	beq.n	800727a <__multiply+0xee>
 8007232:	46a9      	mov	r9, r5
 8007234:	f04f 0c00 	mov.w	ip, #0
 8007238:	f104 0e14 	add.w	lr, r4, #20
 800723c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007240:	f8d9 3000 	ldr.w	r3, [r9]
 8007244:	fa1f fb87 	uxth.w	fp, r7
 8007248:	b29b      	uxth	r3, r3
 800724a:	fb0a 330b 	mla	r3, sl, fp, r3
 800724e:	4463      	add	r3, ip
 8007250:	f8d9 c000 	ldr.w	ip, [r9]
 8007254:	0c3f      	lsrs	r7, r7, #16
 8007256:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800725a:	fb0a c707 	mla	r7, sl, r7, ip
 800725e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007268:	4572      	cmp	r2, lr
 800726a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800726e:	f849 3b04 	str.w	r3, [r9], #4
 8007272:	d8e3      	bhi.n	800723c <__multiply+0xb0>
 8007274:	9b01      	ldr	r3, [sp, #4]
 8007276:	f845 c003 	str.w	ip, [r5, r3]
 800727a:	9b03      	ldr	r3, [sp, #12]
 800727c:	3104      	adds	r1, #4
 800727e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007282:	f1b9 0f00 	cmp.w	r9, #0
 8007286:	d021      	beq.n	80072cc <__multiply+0x140>
 8007288:	46ae      	mov	lr, r5
 800728a:	f04f 0a00 	mov.w	sl, #0
 800728e:	682b      	ldr	r3, [r5, #0]
 8007290:	f104 0c14 	add.w	ip, r4, #20
 8007294:	f8bc b000 	ldrh.w	fp, [ip]
 8007298:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800729c:	b29b      	uxth	r3, r3
 800729e:	fb09 770b 	mla	r7, r9, fp, r7
 80072a2:	4457      	add	r7, sl
 80072a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80072a8:	f84e 3b04 	str.w	r3, [lr], #4
 80072ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072b4:	f8be 3000 	ldrh.w	r3, [lr]
 80072b8:	4562      	cmp	r2, ip
 80072ba:	fb09 330a 	mla	r3, r9, sl, r3
 80072be:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80072c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072c6:	d8e5      	bhi.n	8007294 <__multiply+0x108>
 80072c8:	9f01      	ldr	r7, [sp, #4]
 80072ca:	51eb      	str	r3, [r5, r7]
 80072cc:	3504      	adds	r5, #4
 80072ce:	e79a      	b.n	8007206 <__multiply+0x7a>
 80072d0:	3e01      	subs	r6, #1
 80072d2:	e79c      	b.n	800720e <__multiply+0x82>
 80072d4:	08009b7f 	.word	0x08009b7f
 80072d8:	08009b90 	.word	0x08009b90

080072dc <__pow5mult>:
 80072dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e0:	4615      	mov	r5, r2
 80072e2:	f012 0203 	ands.w	r2, r2, #3
 80072e6:	4607      	mov	r7, r0
 80072e8:	460e      	mov	r6, r1
 80072ea:	d007      	beq.n	80072fc <__pow5mult+0x20>
 80072ec:	4c25      	ldr	r4, [pc, #148]	@ (8007384 <__pow5mult+0xa8>)
 80072ee:	3a01      	subs	r2, #1
 80072f0:	2300      	movs	r3, #0
 80072f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072f6:	f7ff fe57 	bl	8006fa8 <__multadd>
 80072fa:	4606      	mov	r6, r0
 80072fc:	10ad      	asrs	r5, r5, #2
 80072fe:	d03d      	beq.n	800737c <__pow5mult+0xa0>
 8007300:	69fc      	ldr	r4, [r7, #28]
 8007302:	b97c      	cbnz	r4, 8007324 <__pow5mult+0x48>
 8007304:	2010      	movs	r0, #16
 8007306:	f7ff fd37 	bl	8006d78 <malloc>
 800730a:	4602      	mov	r2, r0
 800730c:	61f8      	str	r0, [r7, #28]
 800730e:	b928      	cbnz	r0, 800731c <__pow5mult+0x40>
 8007310:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007314:	4b1c      	ldr	r3, [pc, #112]	@ (8007388 <__pow5mult+0xac>)
 8007316:	481d      	ldr	r0, [pc, #116]	@ (800738c <__pow5mult+0xb0>)
 8007318:	f001 fd1c 	bl	8008d54 <__assert_func>
 800731c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007320:	6004      	str	r4, [r0, #0]
 8007322:	60c4      	str	r4, [r0, #12]
 8007324:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800732c:	b94c      	cbnz	r4, 8007342 <__pow5mult+0x66>
 800732e:	f240 2171 	movw	r1, #625	@ 0x271
 8007332:	4638      	mov	r0, r7
 8007334:	f7ff ff14 	bl	8007160 <__i2b>
 8007338:	2300      	movs	r3, #0
 800733a:	4604      	mov	r4, r0
 800733c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007340:	6003      	str	r3, [r0, #0]
 8007342:	f04f 0900 	mov.w	r9, #0
 8007346:	07eb      	lsls	r3, r5, #31
 8007348:	d50a      	bpl.n	8007360 <__pow5mult+0x84>
 800734a:	4631      	mov	r1, r6
 800734c:	4622      	mov	r2, r4
 800734e:	4638      	mov	r0, r7
 8007350:	f7ff ff1c 	bl	800718c <__multiply>
 8007354:	4680      	mov	r8, r0
 8007356:	4631      	mov	r1, r6
 8007358:	4638      	mov	r0, r7
 800735a:	f7ff fe03 	bl	8006f64 <_Bfree>
 800735e:	4646      	mov	r6, r8
 8007360:	106d      	asrs	r5, r5, #1
 8007362:	d00b      	beq.n	800737c <__pow5mult+0xa0>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	b938      	cbnz	r0, 8007378 <__pow5mult+0x9c>
 8007368:	4622      	mov	r2, r4
 800736a:	4621      	mov	r1, r4
 800736c:	4638      	mov	r0, r7
 800736e:	f7ff ff0d 	bl	800718c <__multiply>
 8007372:	6020      	str	r0, [r4, #0]
 8007374:	f8c0 9000 	str.w	r9, [r0]
 8007378:	4604      	mov	r4, r0
 800737a:	e7e4      	b.n	8007346 <__pow5mult+0x6a>
 800737c:	4630      	mov	r0, r6
 800737e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007382:	bf00      	nop
 8007384:	08009bec 	.word	0x08009bec
 8007388:	08009b10 	.word	0x08009b10
 800738c:	08009b90 	.word	0x08009b90

08007390 <__lshift>:
 8007390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007394:	460c      	mov	r4, r1
 8007396:	4607      	mov	r7, r0
 8007398:	4691      	mov	r9, r2
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	6849      	ldr	r1, [r1, #4]
 800739e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073a2:	68a3      	ldr	r3, [r4, #8]
 80073a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073a8:	f108 0601 	add.w	r6, r8, #1
 80073ac:	42b3      	cmp	r3, r6
 80073ae:	db0b      	blt.n	80073c8 <__lshift+0x38>
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7ff fd97 	bl	8006ee4 <_Balloc>
 80073b6:	4605      	mov	r5, r0
 80073b8:	b948      	cbnz	r0, 80073ce <__lshift+0x3e>
 80073ba:	4602      	mov	r2, r0
 80073bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073c0:	4b27      	ldr	r3, [pc, #156]	@ (8007460 <__lshift+0xd0>)
 80073c2:	4828      	ldr	r0, [pc, #160]	@ (8007464 <__lshift+0xd4>)
 80073c4:	f001 fcc6 	bl	8008d54 <__assert_func>
 80073c8:	3101      	adds	r1, #1
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	e7ee      	b.n	80073ac <__lshift+0x1c>
 80073ce:	2300      	movs	r3, #0
 80073d0:	f100 0114 	add.w	r1, r0, #20
 80073d4:	f100 0210 	add.w	r2, r0, #16
 80073d8:	4618      	mov	r0, r3
 80073da:	4553      	cmp	r3, sl
 80073dc:	db33      	blt.n	8007446 <__lshift+0xb6>
 80073de:	6920      	ldr	r0, [r4, #16]
 80073e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073e4:	f104 0314 	add.w	r3, r4, #20
 80073e8:	f019 091f 	ands.w	r9, r9, #31
 80073ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073f4:	d02b      	beq.n	800744e <__lshift+0xbe>
 80073f6:	468a      	mov	sl, r1
 80073f8:	2200      	movs	r2, #0
 80073fa:	f1c9 0e20 	rsb	lr, r9, #32
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	fa00 f009 	lsl.w	r0, r0, r9
 8007404:	4310      	orrs	r0, r2
 8007406:	f84a 0b04 	str.w	r0, [sl], #4
 800740a:	f853 2b04 	ldr.w	r2, [r3], #4
 800740e:	459c      	cmp	ip, r3
 8007410:	fa22 f20e 	lsr.w	r2, r2, lr
 8007414:	d8f3      	bhi.n	80073fe <__lshift+0x6e>
 8007416:	ebac 0304 	sub.w	r3, ip, r4
 800741a:	3b15      	subs	r3, #21
 800741c:	f023 0303 	bic.w	r3, r3, #3
 8007420:	3304      	adds	r3, #4
 8007422:	f104 0015 	add.w	r0, r4, #21
 8007426:	4584      	cmp	ip, r0
 8007428:	bf38      	it	cc
 800742a:	2304      	movcc	r3, #4
 800742c:	50ca      	str	r2, [r1, r3]
 800742e:	b10a      	cbz	r2, 8007434 <__lshift+0xa4>
 8007430:	f108 0602 	add.w	r6, r8, #2
 8007434:	3e01      	subs	r6, #1
 8007436:	4638      	mov	r0, r7
 8007438:	4621      	mov	r1, r4
 800743a:	612e      	str	r6, [r5, #16]
 800743c:	f7ff fd92 	bl	8006f64 <_Bfree>
 8007440:	4628      	mov	r0, r5
 8007442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007446:	f842 0f04 	str.w	r0, [r2, #4]!
 800744a:	3301      	adds	r3, #1
 800744c:	e7c5      	b.n	80073da <__lshift+0x4a>
 800744e:	3904      	subs	r1, #4
 8007450:	f853 2b04 	ldr.w	r2, [r3], #4
 8007454:	459c      	cmp	ip, r3
 8007456:	f841 2f04 	str.w	r2, [r1, #4]!
 800745a:	d8f9      	bhi.n	8007450 <__lshift+0xc0>
 800745c:	e7ea      	b.n	8007434 <__lshift+0xa4>
 800745e:	bf00      	nop
 8007460:	08009b7f 	.word	0x08009b7f
 8007464:	08009b90 	.word	0x08009b90

08007468 <__mcmp>:
 8007468:	4603      	mov	r3, r0
 800746a:	690a      	ldr	r2, [r1, #16]
 800746c:	6900      	ldr	r0, [r0, #16]
 800746e:	b530      	push	{r4, r5, lr}
 8007470:	1a80      	subs	r0, r0, r2
 8007472:	d10e      	bne.n	8007492 <__mcmp+0x2a>
 8007474:	3314      	adds	r3, #20
 8007476:	3114      	adds	r1, #20
 8007478:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800747c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007480:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007484:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007488:	4295      	cmp	r5, r2
 800748a:	d003      	beq.n	8007494 <__mcmp+0x2c>
 800748c:	d205      	bcs.n	800749a <__mcmp+0x32>
 800748e:	f04f 30ff 	mov.w	r0, #4294967295
 8007492:	bd30      	pop	{r4, r5, pc}
 8007494:	42a3      	cmp	r3, r4
 8007496:	d3f3      	bcc.n	8007480 <__mcmp+0x18>
 8007498:	e7fb      	b.n	8007492 <__mcmp+0x2a>
 800749a:	2001      	movs	r0, #1
 800749c:	e7f9      	b.n	8007492 <__mcmp+0x2a>
	...

080074a0 <__mdiff>:
 80074a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	4689      	mov	r9, r1
 80074a6:	4606      	mov	r6, r0
 80074a8:	4611      	mov	r1, r2
 80074aa:	4648      	mov	r0, r9
 80074ac:	4614      	mov	r4, r2
 80074ae:	f7ff ffdb 	bl	8007468 <__mcmp>
 80074b2:	1e05      	subs	r5, r0, #0
 80074b4:	d112      	bne.n	80074dc <__mdiff+0x3c>
 80074b6:	4629      	mov	r1, r5
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff fd13 	bl	8006ee4 <_Balloc>
 80074be:	4602      	mov	r2, r0
 80074c0:	b928      	cbnz	r0, 80074ce <__mdiff+0x2e>
 80074c2:	f240 2137 	movw	r1, #567	@ 0x237
 80074c6:	4b3e      	ldr	r3, [pc, #248]	@ (80075c0 <__mdiff+0x120>)
 80074c8:	483e      	ldr	r0, [pc, #248]	@ (80075c4 <__mdiff+0x124>)
 80074ca:	f001 fc43 	bl	8008d54 <__assert_func>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074d4:	4610      	mov	r0, r2
 80074d6:	b003      	add	sp, #12
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	bfbc      	itt	lt
 80074de:	464b      	movlt	r3, r9
 80074e0:	46a1      	movlt	r9, r4
 80074e2:	4630      	mov	r0, r6
 80074e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074e8:	bfba      	itte	lt
 80074ea:	461c      	movlt	r4, r3
 80074ec:	2501      	movlt	r5, #1
 80074ee:	2500      	movge	r5, #0
 80074f0:	f7ff fcf8 	bl	8006ee4 <_Balloc>
 80074f4:	4602      	mov	r2, r0
 80074f6:	b918      	cbnz	r0, 8007500 <__mdiff+0x60>
 80074f8:	f240 2145 	movw	r1, #581	@ 0x245
 80074fc:	4b30      	ldr	r3, [pc, #192]	@ (80075c0 <__mdiff+0x120>)
 80074fe:	e7e3      	b.n	80074c8 <__mdiff+0x28>
 8007500:	f100 0b14 	add.w	fp, r0, #20
 8007504:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007508:	f109 0310 	add.w	r3, r9, #16
 800750c:	60c5      	str	r5, [r0, #12]
 800750e:	f04f 0c00 	mov.w	ip, #0
 8007512:	f109 0514 	add.w	r5, r9, #20
 8007516:	46d9      	mov	r9, fp
 8007518:	6926      	ldr	r6, [r4, #16]
 800751a:	f104 0e14 	add.w	lr, r4, #20
 800751e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007522:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	9b01      	ldr	r3, [sp, #4]
 800752a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800752e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007532:	b281      	uxth	r1, r0
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	fa1f f38a 	uxth.w	r3, sl
 800753a:	1a5b      	subs	r3, r3, r1
 800753c:	0c00      	lsrs	r0, r0, #16
 800753e:	4463      	add	r3, ip
 8007540:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007544:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007548:	b29b      	uxth	r3, r3
 800754a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800754e:	4576      	cmp	r6, lr
 8007550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007554:	f849 3b04 	str.w	r3, [r9], #4
 8007558:	d8e6      	bhi.n	8007528 <__mdiff+0x88>
 800755a:	1b33      	subs	r3, r6, r4
 800755c:	3b15      	subs	r3, #21
 800755e:	f023 0303 	bic.w	r3, r3, #3
 8007562:	3415      	adds	r4, #21
 8007564:	3304      	adds	r3, #4
 8007566:	42a6      	cmp	r6, r4
 8007568:	bf38      	it	cc
 800756a:	2304      	movcc	r3, #4
 800756c:	441d      	add	r5, r3
 800756e:	445b      	add	r3, fp
 8007570:	461e      	mov	r6, r3
 8007572:	462c      	mov	r4, r5
 8007574:	4544      	cmp	r4, r8
 8007576:	d30e      	bcc.n	8007596 <__mdiff+0xf6>
 8007578:	f108 0103 	add.w	r1, r8, #3
 800757c:	1b49      	subs	r1, r1, r5
 800757e:	f021 0103 	bic.w	r1, r1, #3
 8007582:	3d03      	subs	r5, #3
 8007584:	45a8      	cmp	r8, r5
 8007586:	bf38      	it	cc
 8007588:	2100      	movcc	r1, #0
 800758a:	440b      	add	r3, r1
 800758c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007590:	b199      	cbz	r1, 80075ba <__mdiff+0x11a>
 8007592:	6117      	str	r7, [r2, #16]
 8007594:	e79e      	b.n	80074d4 <__mdiff+0x34>
 8007596:	46e6      	mov	lr, ip
 8007598:	f854 1b04 	ldr.w	r1, [r4], #4
 800759c:	fa1f fc81 	uxth.w	ip, r1
 80075a0:	44f4      	add	ip, lr
 80075a2:	0c08      	lsrs	r0, r1, #16
 80075a4:	4471      	add	r1, lr
 80075a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80075aa:	b289      	uxth	r1, r1
 80075ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075b4:	f846 1b04 	str.w	r1, [r6], #4
 80075b8:	e7dc      	b.n	8007574 <__mdiff+0xd4>
 80075ba:	3f01      	subs	r7, #1
 80075bc:	e7e6      	b.n	800758c <__mdiff+0xec>
 80075be:	bf00      	nop
 80075c0:	08009b7f 	.word	0x08009b7f
 80075c4:	08009b90 	.word	0x08009b90

080075c8 <__ulp>:
 80075c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007604 <__ulp+0x3c>)
 80075ca:	400b      	ands	r3, r1
 80075cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dc08      	bgt.n	80075e6 <__ulp+0x1e>
 80075d4:	425b      	negs	r3, r3
 80075d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80075da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80075de:	da04      	bge.n	80075ea <__ulp+0x22>
 80075e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80075e4:	4113      	asrs	r3, r2
 80075e6:	2200      	movs	r2, #0
 80075e8:	e008      	b.n	80075fc <__ulp+0x34>
 80075ea:	f1a2 0314 	sub.w	r3, r2, #20
 80075ee:	2b1e      	cmp	r3, #30
 80075f0:	bfd6      	itet	le
 80075f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80075f6:	2201      	movgt	r2, #1
 80075f8:	40da      	lsrle	r2, r3
 80075fa:	2300      	movs	r3, #0
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	7ff00000 	.word	0x7ff00000

08007608 <__b2d>:
 8007608:	6902      	ldr	r2, [r0, #16]
 800760a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760c:	f100 0614 	add.w	r6, r0, #20
 8007610:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007614:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007618:	4f1e      	ldr	r7, [pc, #120]	@ (8007694 <__b2d+0x8c>)
 800761a:	4620      	mov	r0, r4
 800761c:	f7ff fd54 	bl	80070c8 <__hi0bits>
 8007620:	4603      	mov	r3, r0
 8007622:	f1c0 0020 	rsb	r0, r0, #32
 8007626:	2b0a      	cmp	r3, #10
 8007628:	f1a2 0504 	sub.w	r5, r2, #4
 800762c:	6008      	str	r0, [r1, #0]
 800762e:	dc12      	bgt.n	8007656 <__b2d+0x4e>
 8007630:	42ae      	cmp	r6, r5
 8007632:	bf2c      	ite	cs
 8007634:	2200      	movcs	r2, #0
 8007636:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800763a:	f1c3 0c0b 	rsb	ip, r3, #11
 800763e:	3315      	adds	r3, #21
 8007640:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007644:	fa04 f303 	lsl.w	r3, r4, r3
 8007648:	fa22 f20c 	lsr.w	r2, r2, ip
 800764c:	ea4e 0107 	orr.w	r1, lr, r7
 8007650:	431a      	orrs	r2, r3
 8007652:	4610      	mov	r0, r2
 8007654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007656:	42ae      	cmp	r6, r5
 8007658:	bf36      	itet	cc
 800765a:	f1a2 0508 	subcc.w	r5, r2, #8
 800765e:	2200      	movcs	r2, #0
 8007660:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007664:	3b0b      	subs	r3, #11
 8007666:	d012      	beq.n	800768e <__b2d+0x86>
 8007668:	f1c3 0720 	rsb	r7, r3, #32
 800766c:	fa22 f107 	lsr.w	r1, r2, r7
 8007670:	409c      	lsls	r4, r3
 8007672:	430c      	orrs	r4, r1
 8007674:	42b5      	cmp	r5, r6
 8007676:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800767a:	bf94      	ite	ls
 800767c:	2400      	movls	r4, #0
 800767e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007682:	409a      	lsls	r2, r3
 8007684:	40fc      	lsrs	r4, r7
 8007686:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800768a:	4322      	orrs	r2, r4
 800768c:	e7e1      	b.n	8007652 <__b2d+0x4a>
 800768e:	ea44 0107 	orr.w	r1, r4, r7
 8007692:	e7de      	b.n	8007652 <__b2d+0x4a>
 8007694:	3ff00000 	.word	0x3ff00000

08007698 <__d2b>:
 8007698:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800769c:	2101      	movs	r1, #1
 800769e:	4690      	mov	r8, r2
 80076a0:	4699      	mov	r9, r3
 80076a2:	9e08      	ldr	r6, [sp, #32]
 80076a4:	f7ff fc1e 	bl	8006ee4 <_Balloc>
 80076a8:	4604      	mov	r4, r0
 80076aa:	b930      	cbnz	r0, 80076ba <__d2b+0x22>
 80076ac:	4602      	mov	r2, r0
 80076ae:	f240 310f 	movw	r1, #783	@ 0x30f
 80076b2:	4b23      	ldr	r3, [pc, #140]	@ (8007740 <__d2b+0xa8>)
 80076b4:	4823      	ldr	r0, [pc, #140]	@ (8007744 <__d2b+0xac>)
 80076b6:	f001 fb4d 	bl	8008d54 <__assert_func>
 80076ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076c2:	b10d      	cbz	r5, 80076c8 <__d2b+0x30>
 80076c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	f1b8 0300 	subs.w	r3, r8, #0
 80076ce:	d024      	beq.n	800771a <__d2b+0x82>
 80076d0:	4668      	mov	r0, sp
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	f7ff fd17 	bl	8007106 <__lo0bits>
 80076d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80076dc:	b1d8      	cbz	r0, 8007716 <__d2b+0x7e>
 80076de:	f1c0 0320 	rsb	r3, r0, #32
 80076e2:	fa02 f303 	lsl.w	r3, r2, r3
 80076e6:	430b      	orrs	r3, r1
 80076e8:	40c2      	lsrs	r2, r0
 80076ea:	6163      	str	r3, [r4, #20]
 80076ec:	9201      	str	r2, [sp, #4]
 80076ee:	9b01      	ldr	r3, [sp, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bf0c      	ite	eq
 80076f4:	2201      	moveq	r2, #1
 80076f6:	2202      	movne	r2, #2
 80076f8:	61a3      	str	r3, [r4, #24]
 80076fa:	6122      	str	r2, [r4, #16]
 80076fc:	b1ad      	cbz	r5, 800772a <__d2b+0x92>
 80076fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007702:	4405      	add	r5, r0
 8007704:	6035      	str	r5, [r6, #0]
 8007706:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800770a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800770c:	6018      	str	r0, [r3, #0]
 800770e:	4620      	mov	r0, r4
 8007710:	b002      	add	sp, #8
 8007712:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007716:	6161      	str	r1, [r4, #20]
 8007718:	e7e9      	b.n	80076ee <__d2b+0x56>
 800771a:	a801      	add	r0, sp, #4
 800771c:	f7ff fcf3 	bl	8007106 <__lo0bits>
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	6163      	str	r3, [r4, #20]
 8007726:	3020      	adds	r0, #32
 8007728:	e7e7      	b.n	80076fa <__d2b+0x62>
 800772a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800772e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007732:	6030      	str	r0, [r6, #0]
 8007734:	6918      	ldr	r0, [r3, #16]
 8007736:	f7ff fcc7 	bl	80070c8 <__hi0bits>
 800773a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800773e:	e7e4      	b.n	800770a <__d2b+0x72>
 8007740:	08009b7f 	.word	0x08009b7f
 8007744:	08009b90 	.word	0x08009b90

08007748 <__ratio>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	b085      	sub	sp, #20
 800774e:	e9cd 1000 	strd	r1, r0, [sp]
 8007752:	a902      	add	r1, sp, #8
 8007754:	f7ff ff58 	bl	8007608 <__b2d>
 8007758:	468b      	mov	fp, r1
 800775a:	4606      	mov	r6, r0
 800775c:	460f      	mov	r7, r1
 800775e:	9800      	ldr	r0, [sp, #0]
 8007760:	a903      	add	r1, sp, #12
 8007762:	f7ff ff51 	bl	8007608 <__b2d>
 8007766:	460d      	mov	r5, r1
 8007768:	9b01      	ldr	r3, [sp, #4]
 800776a:	4689      	mov	r9, r1
 800776c:	6919      	ldr	r1, [r3, #16]
 800776e:	9b00      	ldr	r3, [sp, #0]
 8007770:	4604      	mov	r4, r0
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	4630      	mov	r0, r6
 8007776:	1ac9      	subs	r1, r1, r3
 8007778:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800777c:	1a9b      	subs	r3, r3, r2
 800777e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007782:	2b00      	cmp	r3, #0
 8007784:	bfcd      	iteet	gt
 8007786:	463a      	movgt	r2, r7
 8007788:	462a      	movle	r2, r5
 800778a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800778e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007792:	bfd8      	it	le
 8007794:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007798:	464b      	mov	r3, r9
 800779a:	4622      	mov	r2, r4
 800779c:	4659      	mov	r1, fp
 800779e:	f7f8 ffc5 	bl	800072c <__aeabi_ddiv>
 80077a2:	b005      	add	sp, #20
 80077a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077a8 <__copybits>:
 80077a8:	3901      	subs	r1, #1
 80077aa:	b570      	push	{r4, r5, r6, lr}
 80077ac:	1149      	asrs	r1, r1, #5
 80077ae:	6914      	ldr	r4, [r2, #16]
 80077b0:	3101      	adds	r1, #1
 80077b2:	f102 0314 	add.w	r3, r2, #20
 80077b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80077ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80077be:	1f05      	subs	r5, r0, #4
 80077c0:	42a3      	cmp	r3, r4
 80077c2:	d30c      	bcc.n	80077de <__copybits+0x36>
 80077c4:	1aa3      	subs	r3, r4, r2
 80077c6:	3b11      	subs	r3, #17
 80077c8:	f023 0303 	bic.w	r3, r3, #3
 80077cc:	3211      	adds	r2, #17
 80077ce:	42a2      	cmp	r2, r4
 80077d0:	bf88      	it	hi
 80077d2:	2300      	movhi	r3, #0
 80077d4:	4418      	add	r0, r3
 80077d6:	2300      	movs	r3, #0
 80077d8:	4288      	cmp	r0, r1
 80077da:	d305      	bcc.n	80077e8 <__copybits+0x40>
 80077dc:	bd70      	pop	{r4, r5, r6, pc}
 80077de:	f853 6b04 	ldr.w	r6, [r3], #4
 80077e2:	f845 6f04 	str.w	r6, [r5, #4]!
 80077e6:	e7eb      	b.n	80077c0 <__copybits+0x18>
 80077e8:	f840 3b04 	str.w	r3, [r0], #4
 80077ec:	e7f4      	b.n	80077d8 <__copybits+0x30>

080077ee <__any_on>:
 80077ee:	f100 0214 	add.w	r2, r0, #20
 80077f2:	6900      	ldr	r0, [r0, #16]
 80077f4:	114b      	asrs	r3, r1, #5
 80077f6:	4298      	cmp	r0, r3
 80077f8:	b510      	push	{r4, lr}
 80077fa:	db11      	blt.n	8007820 <__any_on+0x32>
 80077fc:	dd0a      	ble.n	8007814 <__any_on+0x26>
 80077fe:	f011 011f 	ands.w	r1, r1, #31
 8007802:	d007      	beq.n	8007814 <__any_on+0x26>
 8007804:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007808:	fa24 f001 	lsr.w	r0, r4, r1
 800780c:	fa00 f101 	lsl.w	r1, r0, r1
 8007810:	428c      	cmp	r4, r1
 8007812:	d10b      	bne.n	800782c <__any_on+0x3e>
 8007814:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007818:	4293      	cmp	r3, r2
 800781a:	d803      	bhi.n	8007824 <__any_on+0x36>
 800781c:	2000      	movs	r0, #0
 800781e:	bd10      	pop	{r4, pc}
 8007820:	4603      	mov	r3, r0
 8007822:	e7f7      	b.n	8007814 <__any_on+0x26>
 8007824:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007828:	2900      	cmp	r1, #0
 800782a:	d0f5      	beq.n	8007818 <__any_on+0x2a>
 800782c:	2001      	movs	r0, #1
 800782e:	e7f6      	b.n	800781e <__any_on+0x30>

08007830 <sulp>:
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	460f      	mov	r7, r1
 8007836:	4690      	mov	r8, r2
 8007838:	f7ff fec6 	bl	80075c8 <__ulp>
 800783c:	4604      	mov	r4, r0
 800783e:	460d      	mov	r5, r1
 8007840:	f1b8 0f00 	cmp.w	r8, #0
 8007844:	d011      	beq.n	800786a <sulp+0x3a>
 8007846:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800784a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800784e:	2b00      	cmp	r3, #0
 8007850:	dd0b      	ble.n	800786a <sulp+0x3a>
 8007852:	2400      	movs	r4, #0
 8007854:	051b      	lsls	r3, r3, #20
 8007856:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800785a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800785e:	4622      	mov	r2, r4
 8007860:	462b      	mov	r3, r5
 8007862:	f7f8 fe39 	bl	80004d8 <__aeabi_dmul>
 8007866:	4604      	mov	r4, r0
 8007868:	460d      	mov	r5, r1
 800786a:	4620      	mov	r0, r4
 800786c:	4629      	mov	r1, r5
 800786e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007872:	0000      	movs	r0, r0
 8007874:	0000      	movs	r0, r0
	...

08007878 <_strtod_l>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	b09f      	sub	sp, #124	@ 0x7c
 800787e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007880:	2200      	movs	r2, #0
 8007882:	460c      	mov	r4, r1
 8007884:	921a      	str	r2, [sp, #104]	@ 0x68
 8007886:	f04f 0a00 	mov.w	sl, #0
 800788a:	f04f 0b00 	mov.w	fp, #0
 800788e:	460a      	mov	r2, r1
 8007890:	9005      	str	r0, [sp, #20]
 8007892:	9219      	str	r2, [sp, #100]	@ 0x64
 8007894:	7811      	ldrb	r1, [r2, #0]
 8007896:	292b      	cmp	r1, #43	@ 0x2b
 8007898:	d048      	beq.n	800792c <_strtod_l+0xb4>
 800789a:	d836      	bhi.n	800790a <_strtod_l+0x92>
 800789c:	290d      	cmp	r1, #13
 800789e:	d830      	bhi.n	8007902 <_strtod_l+0x8a>
 80078a0:	2908      	cmp	r1, #8
 80078a2:	d830      	bhi.n	8007906 <_strtod_l+0x8e>
 80078a4:	2900      	cmp	r1, #0
 80078a6:	d039      	beq.n	800791c <_strtod_l+0xa4>
 80078a8:	2200      	movs	r2, #0
 80078aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80078ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80078ae:	782a      	ldrb	r2, [r5, #0]
 80078b0:	2a30      	cmp	r2, #48	@ 0x30
 80078b2:	f040 80b1 	bne.w	8007a18 <_strtod_l+0x1a0>
 80078b6:	786a      	ldrb	r2, [r5, #1]
 80078b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80078bc:	2a58      	cmp	r2, #88	@ 0x58
 80078be:	d16c      	bne.n	800799a <_strtod_l+0x122>
 80078c0:	9302      	str	r3, [sp, #8]
 80078c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007b00 <_strtod_l+0x288>)
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	ab1a      	add	r3, sp, #104	@ 0x68
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	9805      	ldr	r0, [sp, #20]
 80078ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80078d0:	a919      	add	r1, sp, #100	@ 0x64
 80078d2:	f001 fad9 	bl	8008e88 <__gethex>
 80078d6:	f010 060f 	ands.w	r6, r0, #15
 80078da:	4604      	mov	r4, r0
 80078dc:	d005      	beq.n	80078ea <_strtod_l+0x72>
 80078de:	2e06      	cmp	r6, #6
 80078e0:	d126      	bne.n	8007930 <_strtod_l+0xb8>
 80078e2:	2300      	movs	r3, #0
 80078e4:	3501      	adds	r5, #1
 80078e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80078e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 8584 	bne.w	80083fa <_strtod_l+0xb82>
 80078f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078f4:	b1bb      	cbz	r3, 8007926 <_strtod_l+0xae>
 80078f6:	4650      	mov	r0, sl
 80078f8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80078fc:	b01f      	add	sp, #124	@ 0x7c
 80078fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007902:	2920      	cmp	r1, #32
 8007904:	d1d0      	bne.n	80078a8 <_strtod_l+0x30>
 8007906:	3201      	adds	r2, #1
 8007908:	e7c3      	b.n	8007892 <_strtod_l+0x1a>
 800790a:	292d      	cmp	r1, #45	@ 0x2d
 800790c:	d1cc      	bne.n	80078a8 <_strtod_l+0x30>
 800790e:	2101      	movs	r1, #1
 8007910:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007912:	1c51      	adds	r1, r2, #1
 8007914:	9119      	str	r1, [sp, #100]	@ 0x64
 8007916:	7852      	ldrb	r2, [r2, #1]
 8007918:	2a00      	cmp	r2, #0
 800791a:	d1c7      	bne.n	80078ac <_strtod_l+0x34>
 800791c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800791e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007920:	2b00      	cmp	r3, #0
 8007922:	f040 8568 	bne.w	80083f6 <_strtod_l+0xb7e>
 8007926:	4650      	mov	r0, sl
 8007928:	4659      	mov	r1, fp
 800792a:	e7e7      	b.n	80078fc <_strtod_l+0x84>
 800792c:	2100      	movs	r1, #0
 800792e:	e7ef      	b.n	8007910 <_strtod_l+0x98>
 8007930:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007932:	b13a      	cbz	r2, 8007944 <_strtod_l+0xcc>
 8007934:	2135      	movs	r1, #53	@ 0x35
 8007936:	a81c      	add	r0, sp, #112	@ 0x70
 8007938:	f7ff ff36 	bl	80077a8 <__copybits>
 800793c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800793e:	9805      	ldr	r0, [sp, #20]
 8007940:	f7ff fb10 	bl	8006f64 <_Bfree>
 8007944:	3e01      	subs	r6, #1
 8007946:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007948:	2e04      	cmp	r6, #4
 800794a:	d806      	bhi.n	800795a <_strtod_l+0xe2>
 800794c:	e8df f006 	tbb	[pc, r6]
 8007950:	201d0314 	.word	0x201d0314
 8007954:	14          	.byte	0x14
 8007955:	00          	.byte	0x00
 8007956:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800795a:	05e1      	lsls	r1, r4, #23
 800795c:	bf48      	it	mi
 800795e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007962:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007966:	0d1b      	lsrs	r3, r3, #20
 8007968:	051b      	lsls	r3, r3, #20
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1bd      	bne.n	80078ea <_strtod_l+0x72>
 800796e:	f7fe fb2b 	bl	8005fc8 <__errno>
 8007972:	2322      	movs	r3, #34	@ 0x22
 8007974:	6003      	str	r3, [r0, #0]
 8007976:	e7b8      	b.n	80078ea <_strtod_l+0x72>
 8007978:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800797c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007980:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007984:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007988:	e7e7      	b.n	800795a <_strtod_l+0xe2>
 800798a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007b04 <_strtod_l+0x28c>
 800798e:	e7e4      	b.n	800795a <_strtod_l+0xe2>
 8007990:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007994:	f04f 3aff 	mov.w	sl, #4294967295
 8007998:	e7df      	b.n	800795a <_strtod_l+0xe2>
 800799a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	9219      	str	r2, [sp, #100]	@ 0x64
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b30      	cmp	r3, #48	@ 0x30
 80079a4:	d0f9      	beq.n	800799a <_strtod_l+0x122>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d09f      	beq.n	80078ea <_strtod_l+0x72>
 80079aa:	2301      	movs	r3, #1
 80079ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079b0:	220a      	movs	r2, #10
 80079b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80079b4:	2300      	movs	r3, #0
 80079b6:	461f      	mov	r7, r3
 80079b8:	9308      	str	r3, [sp, #32]
 80079ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80079bc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80079be:	7805      	ldrb	r5, [r0, #0]
 80079c0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80079c4:	b2d9      	uxtb	r1, r3
 80079c6:	2909      	cmp	r1, #9
 80079c8:	d928      	bls.n	8007a1c <_strtod_l+0x1a4>
 80079ca:	2201      	movs	r2, #1
 80079cc:	494e      	ldr	r1, [pc, #312]	@ (8007b08 <_strtod_l+0x290>)
 80079ce:	f001 f968 	bl	8008ca2 <strncmp>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d032      	beq.n	8007a3c <_strtod_l+0x1c4>
 80079d6:	2000      	movs	r0, #0
 80079d8:	462a      	mov	r2, r5
 80079da:	4681      	mov	r9, r0
 80079dc:	463d      	mov	r5, r7
 80079de:	4603      	mov	r3, r0
 80079e0:	2a65      	cmp	r2, #101	@ 0x65
 80079e2:	d001      	beq.n	80079e8 <_strtod_l+0x170>
 80079e4:	2a45      	cmp	r2, #69	@ 0x45
 80079e6:	d114      	bne.n	8007a12 <_strtod_l+0x19a>
 80079e8:	b91d      	cbnz	r5, 80079f2 <_strtod_l+0x17a>
 80079ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ec:	4302      	orrs	r2, r0
 80079ee:	d095      	beq.n	800791c <_strtod_l+0xa4>
 80079f0:	2500      	movs	r5, #0
 80079f2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80079f4:	1c62      	adds	r2, r4, #1
 80079f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80079f8:	7862      	ldrb	r2, [r4, #1]
 80079fa:	2a2b      	cmp	r2, #43	@ 0x2b
 80079fc:	d077      	beq.n	8007aee <_strtod_l+0x276>
 80079fe:	2a2d      	cmp	r2, #45	@ 0x2d
 8007a00:	d07b      	beq.n	8007afa <_strtod_l+0x282>
 8007a02:	f04f 0c00 	mov.w	ip, #0
 8007a06:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007a0a:	2909      	cmp	r1, #9
 8007a0c:	f240 8082 	bls.w	8007b14 <_strtod_l+0x29c>
 8007a10:	9419      	str	r4, [sp, #100]	@ 0x64
 8007a12:	f04f 0800 	mov.w	r8, #0
 8007a16:	e0a2      	b.n	8007b5e <_strtod_l+0x2e6>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e7c7      	b.n	80079ac <_strtod_l+0x134>
 8007a1c:	2f08      	cmp	r7, #8
 8007a1e:	bfd5      	itete	le
 8007a20:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007a22:	9908      	ldrgt	r1, [sp, #32]
 8007a24:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a28:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007a2c:	f100 0001 	add.w	r0, r0, #1
 8007a30:	bfd4      	ite	le
 8007a32:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007a34:	9308      	strgt	r3, [sp, #32]
 8007a36:	3701      	adds	r7, #1
 8007a38:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a3a:	e7bf      	b.n	80079bc <_strtod_l+0x144>
 8007a3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a42:	785a      	ldrb	r2, [r3, #1]
 8007a44:	b37f      	cbz	r7, 8007aa6 <_strtod_l+0x22e>
 8007a46:	4681      	mov	r9, r0
 8007a48:	463d      	mov	r5, r7
 8007a4a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007a4e:	2b09      	cmp	r3, #9
 8007a50:	d912      	bls.n	8007a78 <_strtod_l+0x200>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e7c4      	b.n	80079e0 <_strtod_l+0x168>
 8007a56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a58:	3001      	adds	r0, #1
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a5e:	785a      	ldrb	r2, [r3, #1]
 8007a60:	2a30      	cmp	r2, #48	@ 0x30
 8007a62:	d0f8      	beq.n	8007a56 <_strtod_l+0x1de>
 8007a64:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	f200 84cb 	bhi.w	8008404 <_strtod_l+0xb8c>
 8007a6e:	4681      	mov	r9, r0
 8007a70:	2000      	movs	r0, #0
 8007a72:	4605      	mov	r5, r0
 8007a74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a76:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a78:	3a30      	subs	r2, #48	@ 0x30
 8007a7a:	f100 0301 	add.w	r3, r0, #1
 8007a7e:	d02a      	beq.n	8007ad6 <_strtod_l+0x25e>
 8007a80:	4499      	add	r9, r3
 8007a82:	210a      	movs	r1, #10
 8007a84:	462b      	mov	r3, r5
 8007a86:	eb00 0c05 	add.w	ip, r0, r5
 8007a8a:	4563      	cmp	r3, ip
 8007a8c:	d10d      	bne.n	8007aaa <_strtod_l+0x232>
 8007a8e:	1c69      	adds	r1, r5, #1
 8007a90:	4401      	add	r1, r0
 8007a92:	4428      	add	r0, r5
 8007a94:	2808      	cmp	r0, #8
 8007a96:	dc16      	bgt.n	8007ac6 <_strtod_l+0x24e>
 8007a98:	230a      	movs	r3, #10
 8007a9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a9c:	fb03 2300 	mla	r3, r3, r0, r2
 8007aa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e018      	b.n	8007ad8 <_strtod_l+0x260>
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	e7da      	b.n	8007a60 <_strtod_l+0x1e8>
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	f103 0301 	add.w	r3, r3, #1
 8007ab0:	dc03      	bgt.n	8007aba <_strtod_l+0x242>
 8007ab2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007ab4:	434e      	muls	r6, r1
 8007ab6:	960a      	str	r6, [sp, #40]	@ 0x28
 8007ab8:	e7e7      	b.n	8007a8a <_strtod_l+0x212>
 8007aba:	2b10      	cmp	r3, #16
 8007abc:	bfde      	ittt	le
 8007abe:	9e08      	ldrle	r6, [sp, #32]
 8007ac0:	434e      	mulle	r6, r1
 8007ac2:	9608      	strle	r6, [sp, #32]
 8007ac4:	e7e1      	b.n	8007a8a <_strtod_l+0x212>
 8007ac6:	280f      	cmp	r0, #15
 8007ac8:	dceb      	bgt.n	8007aa2 <_strtod_l+0x22a>
 8007aca:	230a      	movs	r3, #10
 8007acc:	9808      	ldr	r0, [sp, #32]
 8007ace:	fb03 2300 	mla	r3, r3, r0, r2
 8007ad2:	9308      	str	r3, [sp, #32]
 8007ad4:	e7e5      	b.n	8007aa2 <_strtod_l+0x22a>
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ada:	460d      	mov	r5, r1
 8007adc:	1c50      	adds	r0, r2, #1
 8007ade:	9019      	str	r0, [sp, #100]	@ 0x64
 8007ae0:	7852      	ldrb	r2, [r2, #1]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	e7b1      	b.n	8007a4a <_strtod_l+0x1d2>
 8007ae6:	f04f 0900 	mov.w	r9, #0
 8007aea:	2301      	movs	r3, #1
 8007aec:	e77d      	b.n	80079ea <_strtod_l+0x172>
 8007aee:	f04f 0c00 	mov.w	ip, #0
 8007af2:	1ca2      	adds	r2, r4, #2
 8007af4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007af6:	78a2      	ldrb	r2, [r4, #2]
 8007af8:	e785      	b.n	8007a06 <_strtod_l+0x18e>
 8007afa:	f04f 0c01 	mov.w	ip, #1
 8007afe:	e7f8      	b.n	8007af2 <_strtod_l+0x27a>
 8007b00:	08009d00 	.word	0x08009d00
 8007b04:	7ff00000 	.word	0x7ff00000
 8007b08:	08009ce8 	.word	0x08009ce8
 8007b0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b0e:	1c51      	adds	r1, r2, #1
 8007b10:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b12:	7852      	ldrb	r2, [r2, #1]
 8007b14:	2a30      	cmp	r2, #48	@ 0x30
 8007b16:	d0f9      	beq.n	8007b0c <_strtod_l+0x294>
 8007b18:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007b1c:	2908      	cmp	r1, #8
 8007b1e:	f63f af78 	bhi.w	8007a12 <_strtod_l+0x19a>
 8007b22:	f04f 080a 	mov.w	r8, #10
 8007b26:	3a30      	subs	r2, #48	@ 0x30
 8007b28:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007b2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b30:	1c56      	adds	r6, r2, #1
 8007b32:	9619      	str	r6, [sp, #100]	@ 0x64
 8007b34:	7852      	ldrb	r2, [r2, #1]
 8007b36:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007b3a:	f1be 0f09 	cmp.w	lr, #9
 8007b3e:	d939      	bls.n	8007bb4 <_strtod_l+0x33c>
 8007b40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007b42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007b46:	1a76      	subs	r6, r6, r1
 8007b48:	2e08      	cmp	r6, #8
 8007b4a:	dc03      	bgt.n	8007b54 <_strtod_l+0x2dc>
 8007b4c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007b4e:	4588      	cmp	r8, r1
 8007b50:	bfa8      	it	ge
 8007b52:	4688      	movge	r8, r1
 8007b54:	f1bc 0f00 	cmp.w	ip, #0
 8007b58:	d001      	beq.n	8007b5e <_strtod_l+0x2e6>
 8007b5a:	f1c8 0800 	rsb	r8, r8, #0
 8007b5e:	2d00      	cmp	r5, #0
 8007b60:	d14e      	bne.n	8007c00 <_strtod_l+0x388>
 8007b62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b64:	4308      	orrs	r0, r1
 8007b66:	f47f aec0 	bne.w	80078ea <_strtod_l+0x72>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f47f aed6 	bne.w	800791c <_strtod_l+0xa4>
 8007b70:	2a69      	cmp	r2, #105	@ 0x69
 8007b72:	d028      	beq.n	8007bc6 <_strtod_l+0x34e>
 8007b74:	dc25      	bgt.n	8007bc2 <_strtod_l+0x34a>
 8007b76:	2a49      	cmp	r2, #73	@ 0x49
 8007b78:	d025      	beq.n	8007bc6 <_strtod_l+0x34e>
 8007b7a:	2a4e      	cmp	r2, #78	@ 0x4e
 8007b7c:	f47f aece 	bne.w	800791c <_strtod_l+0xa4>
 8007b80:	499a      	ldr	r1, [pc, #616]	@ (8007dec <_strtod_l+0x574>)
 8007b82:	a819      	add	r0, sp, #100	@ 0x64
 8007b84:	f001 fba2 	bl	80092cc <__match>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	f43f aec7 	beq.w	800791c <_strtod_l+0xa4>
 8007b8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b28      	cmp	r3, #40	@ 0x28
 8007b94:	d12e      	bne.n	8007bf4 <_strtod_l+0x37c>
 8007b96:	4996      	ldr	r1, [pc, #600]	@ (8007df0 <_strtod_l+0x578>)
 8007b98:	aa1c      	add	r2, sp, #112	@ 0x70
 8007b9a:	a819      	add	r0, sp, #100	@ 0x64
 8007b9c:	f001 fbaa 	bl	80092f4 <__hexnan>
 8007ba0:	2805      	cmp	r0, #5
 8007ba2:	d127      	bne.n	8007bf4 <_strtod_l+0x37c>
 8007ba4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ba6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007baa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007bae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007bb2:	e69a      	b.n	80078ea <_strtod_l+0x72>
 8007bb4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007bb6:	fb08 2101 	mla	r1, r8, r1, r2
 8007bba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007bbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bc0:	e7b5      	b.n	8007b2e <_strtod_l+0x2b6>
 8007bc2:	2a6e      	cmp	r2, #110	@ 0x6e
 8007bc4:	e7da      	b.n	8007b7c <_strtod_l+0x304>
 8007bc6:	498b      	ldr	r1, [pc, #556]	@ (8007df4 <_strtod_l+0x57c>)
 8007bc8:	a819      	add	r0, sp, #100	@ 0x64
 8007bca:	f001 fb7f 	bl	80092cc <__match>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f43f aea4 	beq.w	800791c <_strtod_l+0xa4>
 8007bd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bd6:	4988      	ldr	r1, [pc, #544]	@ (8007df8 <_strtod_l+0x580>)
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	a819      	add	r0, sp, #100	@ 0x64
 8007bdc:	9319      	str	r3, [sp, #100]	@ 0x64
 8007bde:	f001 fb75 	bl	80092cc <__match>
 8007be2:	b910      	cbnz	r0, 8007bea <_strtod_l+0x372>
 8007be4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007be6:	3301      	adds	r3, #1
 8007be8:	9319      	str	r3, [sp, #100]	@ 0x64
 8007bea:	f04f 0a00 	mov.w	sl, #0
 8007bee:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007dfc <_strtod_l+0x584>
 8007bf2:	e67a      	b.n	80078ea <_strtod_l+0x72>
 8007bf4:	4882      	ldr	r0, [pc, #520]	@ (8007e00 <_strtod_l+0x588>)
 8007bf6:	f001 f8a7 	bl	8008d48 <nan>
 8007bfa:	4682      	mov	sl, r0
 8007bfc:	468b      	mov	fp, r1
 8007bfe:	e674      	b.n	80078ea <_strtod_l+0x72>
 8007c00:	eba8 0309 	sub.w	r3, r8, r9
 8007c04:	2f00      	cmp	r7, #0
 8007c06:	bf08      	it	eq
 8007c08:	462f      	moveq	r7, r5
 8007c0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c0c:	2d10      	cmp	r5, #16
 8007c0e:	462c      	mov	r4, r5
 8007c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c12:	bfa8      	it	ge
 8007c14:	2410      	movge	r4, #16
 8007c16:	f7f8 fbe5 	bl	80003e4 <__aeabi_ui2d>
 8007c1a:	2d09      	cmp	r5, #9
 8007c1c:	4682      	mov	sl, r0
 8007c1e:	468b      	mov	fp, r1
 8007c20:	dc11      	bgt.n	8007c46 <_strtod_l+0x3ce>
 8007c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f43f ae60 	beq.w	80078ea <_strtod_l+0x72>
 8007c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2c:	dd76      	ble.n	8007d1c <_strtod_l+0x4a4>
 8007c2e:	2b16      	cmp	r3, #22
 8007c30:	dc5d      	bgt.n	8007cee <_strtod_l+0x476>
 8007c32:	4974      	ldr	r1, [pc, #464]	@ (8007e04 <_strtod_l+0x58c>)
 8007c34:	4652      	mov	r2, sl
 8007c36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c3a:	465b      	mov	r3, fp
 8007c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c40:	f7f8 fc4a 	bl	80004d8 <__aeabi_dmul>
 8007c44:	e7d9      	b.n	8007bfa <_strtod_l+0x382>
 8007c46:	4b6f      	ldr	r3, [pc, #444]	@ (8007e04 <_strtod_l+0x58c>)
 8007c48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007c50:	f7f8 fc42 	bl	80004d8 <__aeabi_dmul>
 8007c54:	4682      	mov	sl, r0
 8007c56:	9808      	ldr	r0, [sp, #32]
 8007c58:	468b      	mov	fp, r1
 8007c5a:	f7f8 fbc3 	bl	80003e4 <__aeabi_ui2d>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4650      	mov	r0, sl
 8007c64:	4659      	mov	r1, fp
 8007c66:	f7f8 fa81 	bl	800016c <__adddf3>
 8007c6a:	2d0f      	cmp	r5, #15
 8007c6c:	4682      	mov	sl, r0
 8007c6e:	468b      	mov	fp, r1
 8007c70:	ddd7      	ble.n	8007c22 <_strtod_l+0x3aa>
 8007c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c74:	1b2c      	subs	r4, r5, r4
 8007c76:	441c      	add	r4, r3
 8007c78:	2c00      	cmp	r4, #0
 8007c7a:	f340 8096 	ble.w	8007daa <_strtod_l+0x532>
 8007c7e:	f014 030f 	ands.w	r3, r4, #15
 8007c82:	d00a      	beq.n	8007c9a <_strtod_l+0x422>
 8007c84:	495f      	ldr	r1, [pc, #380]	@ (8007e04 <_strtod_l+0x58c>)
 8007c86:	4652      	mov	r2, sl
 8007c88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c90:	465b      	mov	r3, fp
 8007c92:	f7f8 fc21 	bl	80004d8 <__aeabi_dmul>
 8007c96:	4682      	mov	sl, r0
 8007c98:	468b      	mov	fp, r1
 8007c9a:	f034 040f 	bics.w	r4, r4, #15
 8007c9e:	d073      	beq.n	8007d88 <_strtod_l+0x510>
 8007ca0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007ca4:	dd48      	ble.n	8007d38 <_strtod_l+0x4c0>
 8007ca6:	2400      	movs	r4, #0
 8007ca8:	46a0      	mov	r8, r4
 8007caa:	46a1      	mov	r9, r4
 8007cac:	940a      	str	r4, [sp, #40]	@ 0x28
 8007cae:	2322      	movs	r3, #34	@ 0x22
 8007cb0:	f04f 0a00 	mov.w	sl, #0
 8007cb4:	9a05      	ldr	r2, [sp, #20]
 8007cb6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007dfc <_strtod_l+0x584>
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f43f ae13 	beq.w	80078ea <_strtod_l+0x72>
 8007cc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cc6:	9805      	ldr	r0, [sp, #20]
 8007cc8:	f7ff f94c 	bl	8006f64 <_Bfree>
 8007ccc:	4649      	mov	r1, r9
 8007cce:	9805      	ldr	r0, [sp, #20]
 8007cd0:	f7ff f948 	bl	8006f64 <_Bfree>
 8007cd4:	4641      	mov	r1, r8
 8007cd6:	9805      	ldr	r0, [sp, #20]
 8007cd8:	f7ff f944 	bl	8006f64 <_Bfree>
 8007cdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cde:	9805      	ldr	r0, [sp, #20]
 8007ce0:	f7ff f940 	bl	8006f64 <_Bfree>
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	9805      	ldr	r0, [sp, #20]
 8007ce8:	f7ff f93c 	bl	8006f64 <_Bfree>
 8007cec:	e5fd      	b.n	80078ea <_strtod_l+0x72>
 8007cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cf0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	dbbc      	blt.n	8007c72 <_strtod_l+0x3fa>
 8007cf8:	4c42      	ldr	r4, [pc, #264]	@ (8007e04 <_strtod_l+0x58c>)
 8007cfa:	f1c5 050f 	rsb	r5, r5, #15
 8007cfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d02:	4652      	mov	r2, sl
 8007d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d08:	465b      	mov	r3, fp
 8007d0a:	f7f8 fbe5 	bl	80004d8 <__aeabi_dmul>
 8007d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d10:	1b5d      	subs	r5, r3, r5
 8007d12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d1a:	e791      	b.n	8007c40 <_strtod_l+0x3c8>
 8007d1c:	3316      	adds	r3, #22
 8007d1e:	dba8      	blt.n	8007c72 <_strtod_l+0x3fa>
 8007d20:	4b38      	ldr	r3, [pc, #224]	@ (8007e04 <_strtod_l+0x58c>)
 8007d22:	eba9 0808 	sub.w	r8, r9, r8
 8007d26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007d2a:	4650      	mov	r0, sl
 8007d2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007d30:	4659      	mov	r1, fp
 8007d32:	f7f8 fcfb 	bl	800072c <__aeabi_ddiv>
 8007d36:	e760      	b.n	8007bfa <_strtod_l+0x382>
 8007d38:	4b33      	ldr	r3, [pc, #204]	@ (8007e08 <_strtod_l+0x590>)
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	9308      	str	r3, [sp, #32]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	4659      	mov	r1, fp
 8007d42:	461e      	mov	r6, r3
 8007d44:	1124      	asrs	r4, r4, #4
 8007d46:	2c01      	cmp	r4, #1
 8007d48:	dc21      	bgt.n	8007d8e <_strtod_l+0x516>
 8007d4a:	b10b      	cbz	r3, 8007d50 <_strtod_l+0x4d8>
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	468b      	mov	fp, r1
 8007d50:	492d      	ldr	r1, [pc, #180]	@ (8007e08 <_strtod_l+0x590>)
 8007d52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007d56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007d5a:	4652      	mov	r2, sl
 8007d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d60:	465b      	mov	r3, fp
 8007d62:	f7f8 fbb9 	bl	80004d8 <__aeabi_dmul>
 8007d66:	4b25      	ldr	r3, [pc, #148]	@ (8007dfc <_strtod_l+0x584>)
 8007d68:	460a      	mov	r2, r1
 8007d6a:	400b      	ands	r3, r1
 8007d6c:	4927      	ldr	r1, [pc, #156]	@ (8007e0c <_strtod_l+0x594>)
 8007d6e:	4682      	mov	sl, r0
 8007d70:	428b      	cmp	r3, r1
 8007d72:	d898      	bhi.n	8007ca6 <_strtod_l+0x42e>
 8007d74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007d78:	428b      	cmp	r3, r1
 8007d7a:	bf86      	itte	hi
 8007d7c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007d80:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007e10 <_strtod_l+0x598>
 8007d84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9308      	str	r3, [sp, #32]
 8007d8c:	e07a      	b.n	8007e84 <_strtod_l+0x60c>
 8007d8e:	07e2      	lsls	r2, r4, #31
 8007d90:	d505      	bpl.n	8007d9e <_strtod_l+0x526>
 8007d92:	9b08      	ldr	r3, [sp, #32]
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f7f8 fb9e 	bl	80004d8 <__aeabi_dmul>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	9a08      	ldr	r2, [sp, #32]
 8007da0:	3601      	adds	r6, #1
 8007da2:	3208      	adds	r2, #8
 8007da4:	1064      	asrs	r4, r4, #1
 8007da6:	9208      	str	r2, [sp, #32]
 8007da8:	e7cd      	b.n	8007d46 <_strtod_l+0x4ce>
 8007daa:	d0ed      	beq.n	8007d88 <_strtod_l+0x510>
 8007dac:	4264      	negs	r4, r4
 8007dae:	f014 020f 	ands.w	r2, r4, #15
 8007db2:	d00a      	beq.n	8007dca <_strtod_l+0x552>
 8007db4:	4b13      	ldr	r3, [pc, #76]	@ (8007e04 <_strtod_l+0x58c>)
 8007db6:	4650      	mov	r0, sl
 8007db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f7f8 fcb3 	bl	800072c <__aeabi_ddiv>
 8007dc6:	4682      	mov	sl, r0
 8007dc8:	468b      	mov	fp, r1
 8007dca:	1124      	asrs	r4, r4, #4
 8007dcc:	d0dc      	beq.n	8007d88 <_strtod_l+0x510>
 8007dce:	2c1f      	cmp	r4, #31
 8007dd0:	dd20      	ble.n	8007e14 <_strtod_l+0x59c>
 8007dd2:	2400      	movs	r4, #0
 8007dd4:	46a0      	mov	r8, r4
 8007dd6:	46a1      	mov	r9, r4
 8007dd8:	940a      	str	r4, [sp, #40]	@ 0x28
 8007dda:	2322      	movs	r3, #34	@ 0x22
 8007ddc:	9a05      	ldr	r2, [sp, #20]
 8007dde:	f04f 0a00 	mov.w	sl, #0
 8007de2:	f04f 0b00 	mov.w	fp, #0
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	e768      	b.n	8007cbc <_strtod_l+0x444>
 8007dea:	bf00      	nop
 8007dec:	08009ad7 	.word	0x08009ad7
 8007df0:	08009cec 	.word	0x08009cec
 8007df4:	08009acf 	.word	0x08009acf
 8007df8:	08009b06 	.word	0x08009b06
 8007dfc:	7ff00000 	.word	0x7ff00000
 8007e00:	08009e95 	.word	0x08009e95
 8007e04:	08009c20 	.word	0x08009c20
 8007e08:	08009bf8 	.word	0x08009bf8
 8007e0c:	7ca00000 	.word	0x7ca00000
 8007e10:	7fefffff 	.word	0x7fefffff
 8007e14:	f014 0310 	ands.w	r3, r4, #16
 8007e18:	bf18      	it	ne
 8007e1a:	236a      	movne	r3, #106	@ 0x6a
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	9308      	str	r3, [sp, #32]
 8007e20:	4659      	mov	r1, fp
 8007e22:	2300      	movs	r3, #0
 8007e24:	4ea9      	ldr	r6, [pc, #676]	@ (80080cc <_strtod_l+0x854>)
 8007e26:	07e2      	lsls	r2, r4, #31
 8007e28:	d504      	bpl.n	8007e34 <_strtod_l+0x5bc>
 8007e2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e2e:	f7f8 fb53 	bl	80004d8 <__aeabi_dmul>
 8007e32:	2301      	movs	r3, #1
 8007e34:	1064      	asrs	r4, r4, #1
 8007e36:	f106 0608 	add.w	r6, r6, #8
 8007e3a:	d1f4      	bne.n	8007e26 <_strtod_l+0x5ae>
 8007e3c:	b10b      	cbz	r3, 8007e42 <_strtod_l+0x5ca>
 8007e3e:	4682      	mov	sl, r0
 8007e40:	468b      	mov	fp, r1
 8007e42:	9b08      	ldr	r3, [sp, #32]
 8007e44:	b1b3      	cbz	r3, 8007e74 <_strtod_l+0x5fc>
 8007e46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007e4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	4659      	mov	r1, fp
 8007e52:	dd0f      	ble.n	8007e74 <_strtod_l+0x5fc>
 8007e54:	2b1f      	cmp	r3, #31
 8007e56:	dd57      	ble.n	8007f08 <_strtod_l+0x690>
 8007e58:	2b34      	cmp	r3, #52	@ 0x34
 8007e5a:	bfd8      	it	le
 8007e5c:	f04f 33ff 	movle.w	r3, #4294967295
 8007e60:	f04f 0a00 	mov.w	sl, #0
 8007e64:	bfcf      	iteee	gt
 8007e66:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007e6a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007e6e:	4093      	lslle	r3, r2
 8007e70:	ea03 0b01 	andle.w	fp, r3, r1
 8007e74:	2200      	movs	r2, #0
 8007e76:	2300      	movs	r3, #0
 8007e78:	4650      	mov	r0, sl
 8007e7a:	4659      	mov	r1, fp
 8007e7c:	f7f8 fd94 	bl	80009a8 <__aeabi_dcmpeq>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d1a6      	bne.n	8007dd2 <_strtod_l+0x55a>
 8007e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e86:	463a      	mov	r2, r7
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	9805      	ldr	r0, [sp, #20]
 8007e90:	f7ff f8d0 	bl	8007034 <__s2b>
 8007e94:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f43f af05 	beq.w	8007ca6 <_strtod_l+0x42e>
 8007e9c:	2400      	movs	r4, #0
 8007e9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ea0:	eba9 0308 	sub.w	r3, r9, r8
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	bfa8      	it	ge
 8007ea8:	2300      	movge	r3, #0
 8007eaa:	46a0      	mov	r8, r4
 8007eac:	9312      	str	r3, [sp, #72]	@ 0x48
 8007eae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007eb2:	9316      	str	r3, [sp, #88]	@ 0x58
 8007eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eb6:	9805      	ldr	r0, [sp, #20]
 8007eb8:	6859      	ldr	r1, [r3, #4]
 8007eba:	f7ff f813 	bl	8006ee4 <_Balloc>
 8007ebe:	4681      	mov	r9, r0
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f43f aef4 	beq.w	8007cae <_strtod_l+0x436>
 8007ec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ec8:	300c      	adds	r0, #12
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	f103 010c 	add.w	r1, r3, #12
 8007ed0:	3202      	adds	r2, #2
 8007ed2:	0092      	lsls	r2, r2, #2
 8007ed4:	f000 ff2a 	bl	8008d2c <memcpy>
 8007ed8:	ab1c      	add	r3, sp, #112	@ 0x70
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	465b      	mov	r3, fp
 8007ee4:	9805      	ldr	r0, [sp, #20]
 8007ee6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007eea:	f7ff fbd5 	bl	8007698 <__d2b>
 8007eee:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f43f aedc 	beq.w	8007cae <_strtod_l+0x436>
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	9805      	ldr	r0, [sp, #20]
 8007efa:	f7ff f931 	bl	8007160 <__i2b>
 8007efe:	4680      	mov	r8, r0
 8007f00:	b948      	cbnz	r0, 8007f16 <_strtod_l+0x69e>
 8007f02:	f04f 0800 	mov.w	r8, #0
 8007f06:	e6d2      	b.n	8007cae <_strtod_l+0x436>
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f10:	ea03 0a0a 	and.w	sl, r3, sl
 8007f14:	e7ae      	b.n	8007e74 <_strtod_l+0x5fc>
 8007f16:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007f18:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007f1a:	2d00      	cmp	r5, #0
 8007f1c:	bfab      	itete	ge
 8007f1e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007f20:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007f22:	18ef      	addge	r7, r5, r3
 8007f24:	1b5e      	sublt	r6, r3, r5
 8007f26:	9b08      	ldr	r3, [sp, #32]
 8007f28:	bfa8      	it	ge
 8007f2a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007f2c:	eba5 0503 	sub.w	r5, r5, r3
 8007f30:	4415      	add	r5, r2
 8007f32:	4b67      	ldr	r3, [pc, #412]	@ (80080d0 <_strtod_l+0x858>)
 8007f34:	f105 35ff 	add.w	r5, r5, #4294967295
 8007f38:	bfb8      	it	lt
 8007f3a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007f3c:	429d      	cmp	r5, r3
 8007f3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007f42:	da50      	bge.n	8007fe6 <_strtod_l+0x76e>
 8007f44:	1b5b      	subs	r3, r3, r5
 8007f46:	2b1f      	cmp	r3, #31
 8007f48:	f04f 0101 	mov.w	r1, #1
 8007f4c:	eba2 0203 	sub.w	r2, r2, r3
 8007f50:	dc3d      	bgt.n	8007fce <_strtod_l+0x756>
 8007f52:	fa01 f303 	lsl.w	r3, r1, r3
 8007f56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f5c:	18bd      	adds	r5, r7, r2
 8007f5e:	9b08      	ldr	r3, [sp, #32]
 8007f60:	42af      	cmp	r7, r5
 8007f62:	4416      	add	r6, r2
 8007f64:	441e      	add	r6, r3
 8007f66:	463b      	mov	r3, r7
 8007f68:	bfa8      	it	ge
 8007f6a:	462b      	movge	r3, r5
 8007f6c:	42b3      	cmp	r3, r6
 8007f6e:	bfa8      	it	ge
 8007f70:	4633      	movge	r3, r6
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bfc2      	ittt	gt
 8007f76:	1aed      	subgt	r5, r5, r3
 8007f78:	1af6      	subgt	r6, r6, r3
 8007f7a:	1aff      	subgt	r7, r7, r3
 8007f7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dd16      	ble.n	8007fb0 <_strtod_l+0x738>
 8007f82:	4641      	mov	r1, r8
 8007f84:	461a      	mov	r2, r3
 8007f86:	9805      	ldr	r0, [sp, #20]
 8007f88:	f7ff f9a8 	bl	80072dc <__pow5mult>
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d0b7      	beq.n	8007f02 <_strtod_l+0x68a>
 8007f92:	4601      	mov	r1, r0
 8007f94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f96:	9805      	ldr	r0, [sp, #20]
 8007f98:	f7ff f8f8 	bl	800718c <__multiply>
 8007f9c:	900e      	str	r0, [sp, #56]	@ 0x38
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f43f ae85 	beq.w	8007cae <_strtod_l+0x436>
 8007fa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fa6:	9805      	ldr	r0, [sp, #20]
 8007fa8:	f7fe ffdc 	bl	8006f64 <_Bfree>
 8007fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fae:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fb0:	2d00      	cmp	r5, #0
 8007fb2:	dc1d      	bgt.n	8007ff0 <_strtod_l+0x778>
 8007fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd23      	ble.n	8008002 <_strtod_l+0x78a>
 8007fba:	4649      	mov	r1, r9
 8007fbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007fbe:	9805      	ldr	r0, [sp, #20]
 8007fc0:	f7ff f98c 	bl	80072dc <__pow5mult>
 8007fc4:	4681      	mov	r9, r0
 8007fc6:	b9e0      	cbnz	r0, 8008002 <_strtod_l+0x78a>
 8007fc8:	f04f 0900 	mov.w	r9, #0
 8007fcc:	e66f      	b.n	8007cae <_strtod_l+0x436>
 8007fce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007fd2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007fd6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007fda:	35e2      	adds	r5, #226	@ 0xe2
 8007fdc:	fa01 f305 	lsl.w	r3, r1, r5
 8007fe0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fe2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007fe4:	e7ba      	b.n	8007f5c <_strtod_l+0x6e4>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fea:	2301      	movs	r3, #1
 8007fec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fee:	e7b5      	b.n	8007f5c <_strtod_l+0x6e4>
 8007ff0:	462a      	mov	r2, r5
 8007ff2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ff4:	9805      	ldr	r0, [sp, #20]
 8007ff6:	f7ff f9cb 	bl	8007390 <__lshift>
 8007ffa:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d1d9      	bne.n	8007fb4 <_strtod_l+0x73c>
 8008000:	e655      	b.n	8007cae <_strtod_l+0x436>
 8008002:	2e00      	cmp	r6, #0
 8008004:	dd07      	ble.n	8008016 <_strtod_l+0x79e>
 8008006:	4649      	mov	r1, r9
 8008008:	4632      	mov	r2, r6
 800800a:	9805      	ldr	r0, [sp, #20]
 800800c:	f7ff f9c0 	bl	8007390 <__lshift>
 8008010:	4681      	mov	r9, r0
 8008012:	2800      	cmp	r0, #0
 8008014:	d0d8      	beq.n	8007fc8 <_strtod_l+0x750>
 8008016:	2f00      	cmp	r7, #0
 8008018:	dd08      	ble.n	800802c <_strtod_l+0x7b4>
 800801a:	4641      	mov	r1, r8
 800801c:	463a      	mov	r2, r7
 800801e:	9805      	ldr	r0, [sp, #20]
 8008020:	f7ff f9b6 	bl	8007390 <__lshift>
 8008024:	4680      	mov	r8, r0
 8008026:	2800      	cmp	r0, #0
 8008028:	f43f ae41 	beq.w	8007cae <_strtod_l+0x436>
 800802c:	464a      	mov	r2, r9
 800802e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008030:	9805      	ldr	r0, [sp, #20]
 8008032:	f7ff fa35 	bl	80074a0 <__mdiff>
 8008036:	4604      	mov	r4, r0
 8008038:	2800      	cmp	r0, #0
 800803a:	f43f ae38 	beq.w	8007cae <_strtod_l+0x436>
 800803e:	68c3      	ldr	r3, [r0, #12]
 8008040:	4641      	mov	r1, r8
 8008042:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008044:	2300      	movs	r3, #0
 8008046:	60c3      	str	r3, [r0, #12]
 8008048:	f7ff fa0e 	bl	8007468 <__mcmp>
 800804c:	2800      	cmp	r0, #0
 800804e:	da45      	bge.n	80080dc <_strtod_l+0x864>
 8008050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008052:	ea53 030a 	orrs.w	r3, r3, sl
 8008056:	d16b      	bne.n	8008130 <_strtod_l+0x8b8>
 8008058:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800805c:	2b00      	cmp	r3, #0
 800805e:	d167      	bne.n	8008130 <_strtod_l+0x8b8>
 8008060:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008064:	0d1b      	lsrs	r3, r3, #20
 8008066:	051b      	lsls	r3, r3, #20
 8008068:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800806c:	d960      	bls.n	8008130 <_strtod_l+0x8b8>
 800806e:	6963      	ldr	r3, [r4, #20]
 8008070:	b913      	cbnz	r3, 8008078 <_strtod_l+0x800>
 8008072:	6923      	ldr	r3, [r4, #16]
 8008074:	2b01      	cmp	r3, #1
 8008076:	dd5b      	ble.n	8008130 <_strtod_l+0x8b8>
 8008078:	4621      	mov	r1, r4
 800807a:	2201      	movs	r2, #1
 800807c:	9805      	ldr	r0, [sp, #20]
 800807e:	f7ff f987 	bl	8007390 <__lshift>
 8008082:	4641      	mov	r1, r8
 8008084:	4604      	mov	r4, r0
 8008086:	f7ff f9ef 	bl	8007468 <__mcmp>
 800808a:	2800      	cmp	r0, #0
 800808c:	dd50      	ble.n	8008130 <_strtod_l+0x8b8>
 800808e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008092:	9a08      	ldr	r2, [sp, #32]
 8008094:	0d1b      	lsrs	r3, r3, #20
 8008096:	051b      	lsls	r3, r3, #20
 8008098:	2a00      	cmp	r2, #0
 800809a:	d06a      	beq.n	8008172 <_strtod_l+0x8fa>
 800809c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80080a0:	d867      	bhi.n	8008172 <_strtod_l+0x8fa>
 80080a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80080a6:	f67f ae98 	bls.w	8007dda <_strtod_l+0x562>
 80080aa:	4650      	mov	r0, sl
 80080ac:	4659      	mov	r1, fp
 80080ae:	4b09      	ldr	r3, [pc, #36]	@ (80080d4 <_strtod_l+0x85c>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	f7f8 fa11 	bl	80004d8 <__aeabi_dmul>
 80080b6:	4b08      	ldr	r3, [pc, #32]	@ (80080d8 <_strtod_l+0x860>)
 80080b8:	4682      	mov	sl, r0
 80080ba:	400b      	ands	r3, r1
 80080bc:	468b      	mov	fp, r1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f47f ae00 	bne.w	8007cc4 <_strtod_l+0x44c>
 80080c4:	2322      	movs	r3, #34	@ 0x22
 80080c6:	9a05      	ldr	r2, [sp, #20]
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	e5fb      	b.n	8007cc4 <_strtod_l+0x44c>
 80080cc:	08009d18 	.word	0x08009d18
 80080d0:	fffffc02 	.word	0xfffffc02
 80080d4:	39500000 	.word	0x39500000
 80080d8:	7ff00000 	.word	0x7ff00000
 80080dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80080e0:	d165      	bne.n	80081ae <_strtod_l+0x936>
 80080e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80080e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080e8:	b35a      	cbz	r2, 8008142 <_strtod_l+0x8ca>
 80080ea:	4a99      	ldr	r2, [pc, #612]	@ (8008350 <_strtod_l+0xad8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d12b      	bne.n	8008148 <_strtod_l+0x8d0>
 80080f0:	9b08      	ldr	r3, [sp, #32]
 80080f2:	4651      	mov	r1, sl
 80080f4:	b303      	cbz	r3, 8008138 <_strtod_l+0x8c0>
 80080f6:	465a      	mov	r2, fp
 80080f8:	4b96      	ldr	r3, [pc, #600]	@ (8008354 <_strtod_l+0xadc>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008100:	f04f 32ff 	mov.w	r2, #4294967295
 8008104:	d81b      	bhi.n	800813e <_strtod_l+0x8c6>
 8008106:	0d1b      	lsrs	r3, r3, #20
 8008108:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	4299      	cmp	r1, r3
 8008112:	d119      	bne.n	8008148 <_strtod_l+0x8d0>
 8008114:	4b90      	ldr	r3, [pc, #576]	@ (8008358 <_strtod_l+0xae0>)
 8008116:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008118:	429a      	cmp	r2, r3
 800811a:	d102      	bne.n	8008122 <_strtod_l+0x8aa>
 800811c:	3101      	adds	r1, #1
 800811e:	f43f adc6 	beq.w	8007cae <_strtod_l+0x436>
 8008122:	f04f 0a00 	mov.w	sl, #0
 8008126:	4b8b      	ldr	r3, [pc, #556]	@ (8008354 <_strtod_l+0xadc>)
 8008128:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800812a:	401a      	ands	r2, r3
 800812c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008130:	9b08      	ldr	r3, [sp, #32]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1b9      	bne.n	80080aa <_strtod_l+0x832>
 8008136:	e5c5      	b.n	8007cc4 <_strtod_l+0x44c>
 8008138:	f04f 33ff 	mov.w	r3, #4294967295
 800813c:	e7e8      	b.n	8008110 <_strtod_l+0x898>
 800813e:	4613      	mov	r3, r2
 8008140:	e7e6      	b.n	8008110 <_strtod_l+0x898>
 8008142:	ea53 030a 	orrs.w	r3, r3, sl
 8008146:	d0a2      	beq.n	800808e <_strtod_l+0x816>
 8008148:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800814a:	b1db      	cbz	r3, 8008184 <_strtod_l+0x90c>
 800814c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800814e:	4213      	tst	r3, r2
 8008150:	d0ee      	beq.n	8008130 <_strtod_l+0x8b8>
 8008152:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008154:	4650      	mov	r0, sl
 8008156:	4659      	mov	r1, fp
 8008158:	9a08      	ldr	r2, [sp, #32]
 800815a:	b1bb      	cbz	r3, 800818c <_strtod_l+0x914>
 800815c:	f7ff fb68 	bl	8007830 <sulp>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008168:	f7f8 f800 	bl	800016c <__adddf3>
 800816c:	4682      	mov	sl, r0
 800816e:	468b      	mov	fp, r1
 8008170:	e7de      	b.n	8008130 <_strtod_l+0x8b8>
 8008172:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008176:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800817a:	f04f 3aff 	mov.w	sl, #4294967295
 800817e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008182:	e7d5      	b.n	8008130 <_strtod_l+0x8b8>
 8008184:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008186:	ea13 0f0a 	tst.w	r3, sl
 800818a:	e7e1      	b.n	8008150 <_strtod_l+0x8d8>
 800818c:	f7ff fb50 	bl	8007830 <sulp>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008198:	f7f7 ffe6 	bl	8000168 <__aeabi_dsub>
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	4682      	mov	sl, r0
 80081a2:	468b      	mov	fp, r1
 80081a4:	f7f8 fc00 	bl	80009a8 <__aeabi_dcmpeq>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d0c1      	beq.n	8008130 <_strtod_l+0x8b8>
 80081ac:	e615      	b.n	8007dda <_strtod_l+0x562>
 80081ae:	4641      	mov	r1, r8
 80081b0:	4620      	mov	r0, r4
 80081b2:	f7ff fac9 	bl	8007748 <__ratio>
 80081b6:	2200      	movs	r2, #0
 80081b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80081bc:	4606      	mov	r6, r0
 80081be:	460f      	mov	r7, r1
 80081c0:	f7f8 fc06 	bl	80009d0 <__aeabi_dcmple>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d06d      	beq.n	80082a4 <_strtod_l+0xa2c>
 80081c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d178      	bne.n	80082c0 <_strtod_l+0xa48>
 80081ce:	f1ba 0f00 	cmp.w	sl, #0
 80081d2:	d156      	bne.n	8008282 <_strtod_l+0xa0a>
 80081d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d158      	bne.n	8008290 <_strtod_l+0xa18>
 80081de:	2200      	movs	r2, #0
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	4b5d      	ldr	r3, [pc, #372]	@ (800835c <_strtod_l+0xae4>)
 80081e6:	f7f8 fbe9 	bl	80009bc <__aeabi_dcmplt>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d157      	bne.n	800829e <_strtod_l+0xa26>
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	2200      	movs	r2, #0
 80081f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008360 <_strtod_l+0xae8>)
 80081f6:	f7f8 f96f 	bl	80004d8 <__aeabi_dmul>
 80081fa:	4606      	mov	r6, r0
 80081fc:	460f      	mov	r7, r1
 80081fe:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008202:	9606      	str	r6, [sp, #24]
 8008204:	9307      	str	r3, [sp, #28]
 8008206:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800820a:	4d52      	ldr	r5, [pc, #328]	@ (8008354 <_strtod_l+0xadc>)
 800820c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008210:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008212:	401d      	ands	r5, r3
 8008214:	4b53      	ldr	r3, [pc, #332]	@ (8008364 <_strtod_l+0xaec>)
 8008216:	429d      	cmp	r5, r3
 8008218:	f040 80aa 	bne.w	8008370 <_strtod_l+0xaf8>
 800821c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800821e:	4650      	mov	r0, sl
 8008220:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008224:	4659      	mov	r1, fp
 8008226:	f7ff f9cf 	bl	80075c8 <__ulp>
 800822a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800822e:	f7f8 f953 	bl	80004d8 <__aeabi_dmul>
 8008232:	4652      	mov	r2, sl
 8008234:	465b      	mov	r3, fp
 8008236:	f7f7 ff99 	bl	800016c <__adddf3>
 800823a:	460b      	mov	r3, r1
 800823c:	4945      	ldr	r1, [pc, #276]	@ (8008354 <_strtod_l+0xadc>)
 800823e:	4a4a      	ldr	r2, [pc, #296]	@ (8008368 <_strtod_l+0xaf0>)
 8008240:	4019      	ands	r1, r3
 8008242:	4291      	cmp	r1, r2
 8008244:	4682      	mov	sl, r0
 8008246:	d942      	bls.n	80082ce <_strtod_l+0xa56>
 8008248:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800824a:	4b43      	ldr	r3, [pc, #268]	@ (8008358 <_strtod_l+0xae0>)
 800824c:	429a      	cmp	r2, r3
 800824e:	d103      	bne.n	8008258 <_strtod_l+0x9e0>
 8008250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008252:	3301      	adds	r3, #1
 8008254:	f43f ad2b 	beq.w	8007cae <_strtod_l+0x436>
 8008258:	f04f 3aff 	mov.w	sl, #4294967295
 800825c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008358 <_strtod_l+0xae0>
 8008260:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008262:	9805      	ldr	r0, [sp, #20]
 8008264:	f7fe fe7e 	bl	8006f64 <_Bfree>
 8008268:	4649      	mov	r1, r9
 800826a:	9805      	ldr	r0, [sp, #20]
 800826c:	f7fe fe7a 	bl	8006f64 <_Bfree>
 8008270:	4641      	mov	r1, r8
 8008272:	9805      	ldr	r0, [sp, #20]
 8008274:	f7fe fe76 	bl	8006f64 <_Bfree>
 8008278:	4621      	mov	r1, r4
 800827a:	9805      	ldr	r0, [sp, #20]
 800827c:	f7fe fe72 	bl	8006f64 <_Bfree>
 8008280:	e618      	b.n	8007eb4 <_strtod_l+0x63c>
 8008282:	f1ba 0f01 	cmp.w	sl, #1
 8008286:	d103      	bne.n	8008290 <_strtod_l+0xa18>
 8008288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800828a:	2b00      	cmp	r3, #0
 800828c:	f43f ada5 	beq.w	8007dda <_strtod_l+0x562>
 8008290:	2200      	movs	r2, #0
 8008292:	4b36      	ldr	r3, [pc, #216]	@ (800836c <_strtod_l+0xaf4>)
 8008294:	2600      	movs	r6, #0
 8008296:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800829a:	4f30      	ldr	r7, [pc, #192]	@ (800835c <_strtod_l+0xae4>)
 800829c:	e7b3      	b.n	8008206 <_strtod_l+0x98e>
 800829e:	2600      	movs	r6, #0
 80082a0:	4f2f      	ldr	r7, [pc, #188]	@ (8008360 <_strtod_l+0xae8>)
 80082a2:	e7ac      	b.n	80081fe <_strtod_l+0x986>
 80082a4:	4630      	mov	r0, r6
 80082a6:	4639      	mov	r1, r7
 80082a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008360 <_strtod_l+0xae8>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	f7f8 f914 	bl	80004d8 <__aeabi_dmul>
 80082b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082b2:	4606      	mov	r6, r0
 80082b4:	460f      	mov	r7, r1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0a1      	beq.n	80081fe <_strtod_l+0x986>
 80082ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80082be:	e7a2      	b.n	8008206 <_strtod_l+0x98e>
 80082c0:	2200      	movs	r2, #0
 80082c2:	4b26      	ldr	r3, [pc, #152]	@ (800835c <_strtod_l+0xae4>)
 80082c4:	4616      	mov	r6, r2
 80082c6:	461f      	mov	r7, r3
 80082c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082cc:	e79b      	b.n	8008206 <_strtod_l+0x98e>
 80082ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80082d2:	9b08      	ldr	r3, [sp, #32]
 80082d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1c1      	bne.n	8008260 <_strtod_l+0x9e8>
 80082dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082e0:	0d1b      	lsrs	r3, r3, #20
 80082e2:	051b      	lsls	r3, r3, #20
 80082e4:	429d      	cmp	r5, r3
 80082e6:	d1bb      	bne.n	8008260 <_strtod_l+0x9e8>
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f8 ff26 	bl	800113c <__aeabi_d2lz>
 80082f0:	f7f8 f8c4 	bl	800047c <__aeabi_l2d>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4630      	mov	r0, r6
 80082fa:	4639      	mov	r1, r7
 80082fc:	f7f7 ff34 	bl	8000168 <__aeabi_dsub>
 8008300:	460b      	mov	r3, r1
 8008302:	4602      	mov	r2, r0
 8008304:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008308:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800830c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800830e:	ea46 060a 	orr.w	r6, r6, sl
 8008312:	431e      	orrs	r6, r3
 8008314:	d069      	beq.n	80083ea <_strtod_l+0xb72>
 8008316:	a30a      	add	r3, pc, #40	@ (adr r3, 8008340 <_strtod_l+0xac8>)
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f7f8 fb4e 	bl	80009bc <__aeabi_dcmplt>
 8008320:	2800      	cmp	r0, #0
 8008322:	f47f accf 	bne.w	8007cc4 <_strtod_l+0x44c>
 8008326:	a308      	add	r3, pc, #32	@ (adr r3, 8008348 <_strtod_l+0xad0>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008330:	f7f8 fb62 	bl	80009f8 <__aeabi_dcmpgt>
 8008334:	2800      	cmp	r0, #0
 8008336:	d093      	beq.n	8008260 <_strtod_l+0x9e8>
 8008338:	e4c4      	b.n	8007cc4 <_strtod_l+0x44c>
 800833a:	bf00      	nop
 800833c:	f3af 8000 	nop.w
 8008340:	94a03595 	.word	0x94a03595
 8008344:	3fdfffff 	.word	0x3fdfffff
 8008348:	35afe535 	.word	0x35afe535
 800834c:	3fe00000 	.word	0x3fe00000
 8008350:	000fffff 	.word	0x000fffff
 8008354:	7ff00000 	.word	0x7ff00000
 8008358:	7fefffff 	.word	0x7fefffff
 800835c:	3ff00000 	.word	0x3ff00000
 8008360:	3fe00000 	.word	0x3fe00000
 8008364:	7fe00000 	.word	0x7fe00000
 8008368:	7c9fffff 	.word	0x7c9fffff
 800836c:	bff00000 	.word	0xbff00000
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	b323      	cbz	r3, 80083be <_strtod_l+0xb46>
 8008374:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008378:	d821      	bhi.n	80083be <_strtod_l+0xb46>
 800837a:	a327      	add	r3, pc, #156	@ (adr r3, 8008418 <_strtod_l+0xba0>)
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	4630      	mov	r0, r6
 8008382:	4639      	mov	r1, r7
 8008384:	f7f8 fb24 	bl	80009d0 <__aeabi_dcmple>
 8008388:	b1a0      	cbz	r0, 80083b4 <_strtod_l+0xb3c>
 800838a:	4639      	mov	r1, r7
 800838c:	4630      	mov	r0, r6
 800838e:	f7f8 fb7b 	bl	8000a88 <__aeabi_d2uiz>
 8008392:	2801      	cmp	r0, #1
 8008394:	bf38      	it	cc
 8008396:	2001      	movcc	r0, #1
 8008398:	f7f8 f824 	bl	80003e4 <__aeabi_ui2d>
 800839c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	b9fb      	cbnz	r3, 80083e4 <_strtod_l+0xb6c>
 80083a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80083a8:	9014      	str	r0, [sp, #80]	@ 0x50
 80083aa:	9315      	str	r3, [sp, #84]	@ 0x54
 80083ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80083b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80083b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80083b6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80083ba:	1b5b      	subs	r3, r3, r5
 80083bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80083be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083c2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80083c6:	f7ff f8ff 	bl	80075c8 <__ulp>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4650      	mov	r0, sl
 80083d0:	4659      	mov	r1, fp
 80083d2:	f7f8 f881 	bl	80004d8 <__aeabi_dmul>
 80083d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80083da:	f7f7 fec7 	bl	800016c <__adddf3>
 80083de:	4682      	mov	sl, r0
 80083e0:	468b      	mov	fp, r1
 80083e2:	e776      	b.n	80082d2 <_strtod_l+0xa5a>
 80083e4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80083e8:	e7e0      	b.n	80083ac <_strtod_l+0xb34>
 80083ea:	a30d      	add	r3, pc, #52	@ (adr r3, 8008420 <_strtod_l+0xba8>)
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f7f8 fae4 	bl	80009bc <__aeabi_dcmplt>
 80083f4:	e79e      	b.n	8008334 <_strtod_l+0xabc>
 80083f6:	2300      	movs	r3, #0
 80083f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083fc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	f7ff ba77 	b.w	80078f2 <_strtod_l+0x7a>
 8008404:	2a65      	cmp	r2, #101	@ 0x65
 8008406:	f43f ab6e 	beq.w	8007ae6 <_strtod_l+0x26e>
 800840a:	2a45      	cmp	r2, #69	@ 0x45
 800840c:	f43f ab6b 	beq.w	8007ae6 <_strtod_l+0x26e>
 8008410:	2301      	movs	r3, #1
 8008412:	f7ff bba6 	b.w	8007b62 <_strtod_l+0x2ea>
 8008416:	bf00      	nop
 8008418:	ffc00000 	.word	0xffc00000
 800841c:	41dfffff 	.word	0x41dfffff
 8008420:	94a03595 	.word	0x94a03595
 8008424:	3fcfffff 	.word	0x3fcfffff

08008428 <_strtod_r>:
 8008428:	4b01      	ldr	r3, [pc, #4]	@ (8008430 <_strtod_r+0x8>)
 800842a:	f7ff ba25 	b.w	8007878 <_strtod_l>
 800842e:	bf00      	nop
 8008430:	20000084 	.word	0x20000084

08008434 <_strtol_l.constprop.0>:
 8008434:	2b24      	cmp	r3, #36	@ 0x24
 8008436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800843a:	4686      	mov	lr, r0
 800843c:	4690      	mov	r8, r2
 800843e:	d801      	bhi.n	8008444 <_strtol_l.constprop.0+0x10>
 8008440:	2b01      	cmp	r3, #1
 8008442:	d106      	bne.n	8008452 <_strtol_l.constprop.0+0x1e>
 8008444:	f7fd fdc0 	bl	8005fc8 <__errno>
 8008448:	2316      	movs	r3, #22
 800844a:	6003      	str	r3, [r0, #0]
 800844c:	2000      	movs	r0, #0
 800844e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008452:	460d      	mov	r5, r1
 8008454:	4833      	ldr	r0, [pc, #204]	@ (8008524 <_strtol_l.constprop.0+0xf0>)
 8008456:	462a      	mov	r2, r5
 8008458:	f815 4b01 	ldrb.w	r4, [r5], #1
 800845c:	5d06      	ldrb	r6, [r0, r4]
 800845e:	f016 0608 	ands.w	r6, r6, #8
 8008462:	d1f8      	bne.n	8008456 <_strtol_l.constprop.0+0x22>
 8008464:	2c2d      	cmp	r4, #45	@ 0x2d
 8008466:	d12d      	bne.n	80084c4 <_strtol_l.constprop.0+0x90>
 8008468:	2601      	movs	r6, #1
 800846a:	782c      	ldrb	r4, [r5, #0]
 800846c:	1c95      	adds	r5, r2, #2
 800846e:	f033 0210 	bics.w	r2, r3, #16
 8008472:	d109      	bne.n	8008488 <_strtol_l.constprop.0+0x54>
 8008474:	2c30      	cmp	r4, #48	@ 0x30
 8008476:	d12a      	bne.n	80084ce <_strtol_l.constprop.0+0x9a>
 8008478:	782a      	ldrb	r2, [r5, #0]
 800847a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800847e:	2a58      	cmp	r2, #88	@ 0x58
 8008480:	d125      	bne.n	80084ce <_strtol_l.constprop.0+0x9a>
 8008482:	2310      	movs	r3, #16
 8008484:	786c      	ldrb	r4, [r5, #1]
 8008486:	3502      	adds	r5, #2
 8008488:	2200      	movs	r2, #0
 800848a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800848e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008492:	fbbc f9f3 	udiv	r9, ip, r3
 8008496:	4610      	mov	r0, r2
 8008498:	fb03 ca19 	mls	sl, r3, r9, ip
 800849c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80084a0:	2f09      	cmp	r7, #9
 80084a2:	d81b      	bhi.n	80084dc <_strtol_l.constprop.0+0xa8>
 80084a4:	463c      	mov	r4, r7
 80084a6:	42a3      	cmp	r3, r4
 80084a8:	dd27      	ble.n	80084fa <_strtol_l.constprop.0+0xc6>
 80084aa:	1c57      	adds	r7, r2, #1
 80084ac:	d007      	beq.n	80084be <_strtol_l.constprop.0+0x8a>
 80084ae:	4581      	cmp	r9, r0
 80084b0:	d320      	bcc.n	80084f4 <_strtol_l.constprop.0+0xc0>
 80084b2:	d101      	bne.n	80084b8 <_strtol_l.constprop.0+0x84>
 80084b4:	45a2      	cmp	sl, r4
 80084b6:	db1d      	blt.n	80084f4 <_strtol_l.constprop.0+0xc0>
 80084b8:	2201      	movs	r2, #1
 80084ba:	fb00 4003 	mla	r0, r0, r3, r4
 80084be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084c2:	e7eb      	b.n	800849c <_strtol_l.constprop.0+0x68>
 80084c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80084c6:	bf04      	itt	eq
 80084c8:	782c      	ldrbeq	r4, [r5, #0]
 80084ca:	1c95      	addeq	r5, r2, #2
 80084cc:	e7cf      	b.n	800846e <_strtol_l.constprop.0+0x3a>
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1da      	bne.n	8008488 <_strtol_l.constprop.0+0x54>
 80084d2:	2c30      	cmp	r4, #48	@ 0x30
 80084d4:	bf0c      	ite	eq
 80084d6:	2308      	moveq	r3, #8
 80084d8:	230a      	movne	r3, #10
 80084da:	e7d5      	b.n	8008488 <_strtol_l.constprop.0+0x54>
 80084dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80084e0:	2f19      	cmp	r7, #25
 80084e2:	d801      	bhi.n	80084e8 <_strtol_l.constprop.0+0xb4>
 80084e4:	3c37      	subs	r4, #55	@ 0x37
 80084e6:	e7de      	b.n	80084a6 <_strtol_l.constprop.0+0x72>
 80084e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80084ec:	2f19      	cmp	r7, #25
 80084ee:	d804      	bhi.n	80084fa <_strtol_l.constprop.0+0xc6>
 80084f0:	3c57      	subs	r4, #87	@ 0x57
 80084f2:	e7d8      	b.n	80084a6 <_strtol_l.constprop.0+0x72>
 80084f4:	f04f 32ff 	mov.w	r2, #4294967295
 80084f8:	e7e1      	b.n	80084be <_strtol_l.constprop.0+0x8a>
 80084fa:	1c53      	adds	r3, r2, #1
 80084fc:	d108      	bne.n	8008510 <_strtol_l.constprop.0+0xdc>
 80084fe:	2322      	movs	r3, #34	@ 0x22
 8008500:	4660      	mov	r0, ip
 8008502:	f8ce 3000 	str.w	r3, [lr]
 8008506:	f1b8 0f00 	cmp.w	r8, #0
 800850a:	d0a0      	beq.n	800844e <_strtol_l.constprop.0+0x1a>
 800850c:	1e69      	subs	r1, r5, #1
 800850e:	e006      	b.n	800851e <_strtol_l.constprop.0+0xea>
 8008510:	b106      	cbz	r6, 8008514 <_strtol_l.constprop.0+0xe0>
 8008512:	4240      	negs	r0, r0
 8008514:	f1b8 0f00 	cmp.w	r8, #0
 8008518:	d099      	beq.n	800844e <_strtol_l.constprop.0+0x1a>
 800851a:	2a00      	cmp	r2, #0
 800851c:	d1f6      	bne.n	800850c <_strtol_l.constprop.0+0xd8>
 800851e:	f8c8 1000 	str.w	r1, [r8]
 8008522:	e794      	b.n	800844e <_strtol_l.constprop.0+0x1a>
 8008524:	08009d41 	.word	0x08009d41

08008528 <_strtol_r>:
 8008528:	f7ff bf84 	b.w	8008434 <_strtol_l.constprop.0>

0800852c <__ssputs_r>:
 800852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	461f      	mov	r7, r3
 8008532:	688e      	ldr	r6, [r1, #8]
 8008534:	4682      	mov	sl, r0
 8008536:	42be      	cmp	r6, r7
 8008538:	460c      	mov	r4, r1
 800853a:	4690      	mov	r8, r2
 800853c:	680b      	ldr	r3, [r1, #0]
 800853e:	d82d      	bhi.n	800859c <__ssputs_r+0x70>
 8008540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008544:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008548:	d026      	beq.n	8008598 <__ssputs_r+0x6c>
 800854a:	6965      	ldr	r5, [r4, #20]
 800854c:	6909      	ldr	r1, [r1, #16]
 800854e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008552:	eba3 0901 	sub.w	r9, r3, r1
 8008556:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800855a:	1c7b      	adds	r3, r7, #1
 800855c:	444b      	add	r3, r9
 800855e:	106d      	asrs	r5, r5, #1
 8008560:	429d      	cmp	r5, r3
 8008562:	bf38      	it	cc
 8008564:	461d      	movcc	r5, r3
 8008566:	0553      	lsls	r3, r2, #21
 8008568:	d527      	bpl.n	80085ba <__ssputs_r+0x8e>
 800856a:	4629      	mov	r1, r5
 800856c:	f7fe fc2e 	bl	8006dcc <_malloc_r>
 8008570:	4606      	mov	r6, r0
 8008572:	b360      	cbz	r0, 80085ce <__ssputs_r+0xa2>
 8008574:	464a      	mov	r2, r9
 8008576:	6921      	ldr	r1, [r4, #16]
 8008578:	f000 fbd8 	bl	8008d2c <memcpy>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	6126      	str	r6, [r4, #16]
 800858a:	444e      	add	r6, r9
 800858c:	6026      	str	r6, [r4, #0]
 800858e:	463e      	mov	r6, r7
 8008590:	6165      	str	r5, [r4, #20]
 8008592:	eba5 0509 	sub.w	r5, r5, r9
 8008596:	60a5      	str	r5, [r4, #8]
 8008598:	42be      	cmp	r6, r7
 800859a:	d900      	bls.n	800859e <__ssputs_r+0x72>
 800859c:	463e      	mov	r6, r7
 800859e:	4632      	mov	r2, r6
 80085a0:	4641      	mov	r1, r8
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	f000 fb63 	bl	8008c6e <memmove>
 80085a8:	2000      	movs	r0, #0
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	1b9b      	subs	r3, r3, r6
 80085ae:	60a3      	str	r3, [r4, #8]
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	4433      	add	r3, r6
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ba:	462a      	mov	r2, r5
 80085bc:	f000 ff47 	bl	800944e <_realloc_r>
 80085c0:	4606      	mov	r6, r0
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d1e0      	bne.n	8008588 <__ssputs_r+0x5c>
 80085c6:	4650      	mov	r0, sl
 80085c8:	6921      	ldr	r1, [r4, #16]
 80085ca:	f7fe fb8d 	bl	8006ce8 <_free_r>
 80085ce:	230c      	movs	r3, #12
 80085d0:	f8ca 3000 	str.w	r3, [sl]
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	f04f 30ff 	mov.w	r0, #4294967295
 80085da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085de:	81a3      	strh	r3, [r4, #12]
 80085e0:	e7e9      	b.n	80085b6 <__ssputs_r+0x8a>
	...

080085e4 <_svfiprintf_r>:
 80085e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e8:	4698      	mov	r8, r3
 80085ea:	898b      	ldrh	r3, [r1, #12]
 80085ec:	4607      	mov	r7, r0
 80085ee:	061b      	lsls	r3, r3, #24
 80085f0:	460d      	mov	r5, r1
 80085f2:	4614      	mov	r4, r2
 80085f4:	b09d      	sub	sp, #116	@ 0x74
 80085f6:	d510      	bpl.n	800861a <_svfiprintf_r+0x36>
 80085f8:	690b      	ldr	r3, [r1, #16]
 80085fa:	b973      	cbnz	r3, 800861a <_svfiprintf_r+0x36>
 80085fc:	2140      	movs	r1, #64	@ 0x40
 80085fe:	f7fe fbe5 	bl	8006dcc <_malloc_r>
 8008602:	6028      	str	r0, [r5, #0]
 8008604:	6128      	str	r0, [r5, #16]
 8008606:	b930      	cbnz	r0, 8008616 <_svfiprintf_r+0x32>
 8008608:	230c      	movs	r3, #12
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	f04f 30ff 	mov.w	r0, #4294967295
 8008610:	b01d      	add	sp, #116	@ 0x74
 8008612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008616:	2340      	movs	r3, #64	@ 0x40
 8008618:	616b      	str	r3, [r5, #20]
 800861a:	2300      	movs	r3, #0
 800861c:	9309      	str	r3, [sp, #36]	@ 0x24
 800861e:	2320      	movs	r3, #32
 8008620:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008624:	2330      	movs	r3, #48	@ 0x30
 8008626:	f04f 0901 	mov.w	r9, #1
 800862a:	f8cd 800c 	str.w	r8, [sp, #12]
 800862e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80087c8 <_svfiprintf_r+0x1e4>
 8008632:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008636:	4623      	mov	r3, r4
 8008638:	469a      	mov	sl, r3
 800863a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800863e:	b10a      	cbz	r2, 8008644 <_svfiprintf_r+0x60>
 8008640:	2a25      	cmp	r2, #37	@ 0x25
 8008642:	d1f9      	bne.n	8008638 <_svfiprintf_r+0x54>
 8008644:	ebba 0b04 	subs.w	fp, sl, r4
 8008648:	d00b      	beq.n	8008662 <_svfiprintf_r+0x7e>
 800864a:	465b      	mov	r3, fp
 800864c:	4622      	mov	r2, r4
 800864e:	4629      	mov	r1, r5
 8008650:	4638      	mov	r0, r7
 8008652:	f7ff ff6b 	bl	800852c <__ssputs_r>
 8008656:	3001      	adds	r0, #1
 8008658:	f000 80a7 	beq.w	80087aa <_svfiprintf_r+0x1c6>
 800865c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800865e:	445a      	add	r2, fp
 8008660:	9209      	str	r2, [sp, #36]	@ 0x24
 8008662:	f89a 3000 	ldrb.w	r3, [sl]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 809f 	beq.w	80087aa <_svfiprintf_r+0x1c6>
 800866c:	2300      	movs	r3, #0
 800866e:	f04f 32ff 	mov.w	r2, #4294967295
 8008672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008676:	f10a 0a01 	add.w	sl, sl, #1
 800867a:	9304      	str	r3, [sp, #16]
 800867c:	9307      	str	r3, [sp, #28]
 800867e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008682:	931a      	str	r3, [sp, #104]	@ 0x68
 8008684:	4654      	mov	r4, sl
 8008686:	2205      	movs	r2, #5
 8008688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868c:	484e      	ldr	r0, [pc, #312]	@ (80087c8 <_svfiprintf_r+0x1e4>)
 800868e:	f7fd fcc8 	bl	8006022 <memchr>
 8008692:	9a04      	ldr	r2, [sp, #16]
 8008694:	b9d8      	cbnz	r0, 80086ce <_svfiprintf_r+0xea>
 8008696:	06d0      	lsls	r0, r2, #27
 8008698:	bf44      	itt	mi
 800869a:	2320      	movmi	r3, #32
 800869c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a0:	0711      	lsls	r1, r2, #28
 80086a2:	bf44      	itt	mi
 80086a4:	232b      	movmi	r3, #43	@ 0x2b
 80086a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086aa:	f89a 3000 	ldrb.w	r3, [sl]
 80086ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b0:	d015      	beq.n	80086de <_svfiprintf_r+0xfa>
 80086b2:	4654      	mov	r4, sl
 80086b4:	2000      	movs	r0, #0
 80086b6:	f04f 0c0a 	mov.w	ip, #10
 80086ba:	9a07      	ldr	r2, [sp, #28]
 80086bc:	4621      	mov	r1, r4
 80086be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086c2:	3b30      	subs	r3, #48	@ 0x30
 80086c4:	2b09      	cmp	r3, #9
 80086c6:	d94b      	bls.n	8008760 <_svfiprintf_r+0x17c>
 80086c8:	b1b0      	cbz	r0, 80086f8 <_svfiprintf_r+0x114>
 80086ca:	9207      	str	r2, [sp, #28]
 80086cc:	e014      	b.n	80086f8 <_svfiprintf_r+0x114>
 80086ce:	eba0 0308 	sub.w	r3, r0, r8
 80086d2:	fa09 f303 	lsl.w	r3, r9, r3
 80086d6:	4313      	orrs	r3, r2
 80086d8:	46a2      	mov	sl, r4
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	e7d2      	b.n	8008684 <_svfiprintf_r+0xa0>
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	1d19      	adds	r1, r3, #4
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	9103      	str	r1, [sp, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bfbb      	ittet	lt
 80086ea:	425b      	neglt	r3, r3
 80086ec:	f042 0202 	orrlt.w	r2, r2, #2
 80086f0:	9307      	strge	r3, [sp, #28]
 80086f2:	9307      	strlt	r3, [sp, #28]
 80086f4:	bfb8      	it	lt
 80086f6:	9204      	strlt	r2, [sp, #16]
 80086f8:	7823      	ldrb	r3, [r4, #0]
 80086fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80086fc:	d10a      	bne.n	8008714 <_svfiprintf_r+0x130>
 80086fe:	7863      	ldrb	r3, [r4, #1]
 8008700:	2b2a      	cmp	r3, #42	@ 0x2a
 8008702:	d132      	bne.n	800876a <_svfiprintf_r+0x186>
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	3402      	adds	r4, #2
 8008708:	1d1a      	adds	r2, r3, #4
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	9203      	str	r2, [sp, #12]
 800870e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008712:	9305      	str	r3, [sp, #20]
 8008714:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80087cc <_svfiprintf_r+0x1e8>
 8008718:	2203      	movs	r2, #3
 800871a:	4650      	mov	r0, sl
 800871c:	7821      	ldrb	r1, [r4, #0]
 800871e:	f7fd fc80 	bl	8006022 <memchr>
 8008722:	b138      	cbz	r0, 8008734 <_svfiprintf_r+0x150>
 8008724:	2240      	movs	r2, #64	@ 0x40
 8008726:	9b04      	ldr	r3, [sp, #16]
 8008728:	eba0 000a 	sub.w	r0, r0, sl
 800872c:	4082      	lsls	r2, r0
 800872e:	4313      	orrs	r3, r2
 8008730:	3401      	adds	r4, #1
 8008732:	9304      	str	r3, [sp, #16]
 8008734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008738:	2206      	movs	r2, #6
 800873a:	4825      	ldr	r0, [pc, #148]	@ (80087d0 <_svfiprintf_r+0x1ec>)
 800873c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008740:	f7fd fc6f 	bl	8006022 <memchr>
 8008744:	2800      	cmp	r0, #0
 8008746:	d036      	beq.n	80087b6 <_svfiprintf_r+0x1d2>
 8008748:	4b22      	ldr	r3, [pc, #136]	@ (80087d4 <_svfiprintf_r+0x1f0>)
 800874a:	bb1b      	cbnz	r3, 8008794 <_svfiprintf_r+0x1b0>
 800874c:	9b03      	ldr	r3, [sp, #12]
 800874e:	3307      	adds	r3, #7
 8008750:	f023 0307 	bic.w	r3, r3, #7
 8008754:	3308      	adds	r3, #8
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800875a:	4433      	add	r3, r6
 800875c:	9309      	str	r3, [sp, #36]	@ 0x24
 800875e:	e76a      	b.n	8008636 <_svfiprintf_r+0x52>
 8008760:	460c      	mov	r4, r1
 8008762:	2001      	movs	r0, #1
 8008764:	fb0c 3202 	mla	r2, ip, r2, r3
 8008768:	e7a8      	b.n	80086bc <_svfiprintf_r+0xd8>
 800876a:	2300      	movs	r3, #0
 800876c:	f04f 0c0a 	mov.w	ip, #10
 8008770:	4619      	mov	r1, r3
 8008772:	3401      	adds	r4, #1
 8008774:	9305      	str	r3, [sp, #20]
 8008776:	4620      	mov	r0, r4
 8008778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800877c:	3a30      	subs	r2, #48	@ 0x30
 800877e:	2a09      	cmp	r2, #9
 8008780:	d903      	bls.n	800878a <_svfiprintf_r+0x1a6>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0c6      	beq.n	8008714 <_svfiprintf_r+0x130>
 8008786:	9105      	str	r1, [sp, #20]
 8008788:	e7c4      	b.n	8008714 <_svfiprintf_r+0x130>
 800878a:	4604      	mov	r4, r0
 800878c:	2301      	movs	r3, #1
 800878e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008792:	e7f0      	b.n	8008776 <_svfiprintf_r+0x192>
 8008794:	ab03      	add	r3, sp, #12
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	462a      	mov	r2, r5
 800879a:	4638      	mov	r0, r7
 800879c:	4b0e      	ldr	r3, [pc, #56]	@ (80087d8 <_svfiprintf_r+0x1f4>)
 800879e:	a904      	add	r1, sp, #16
 80087a0:	f7fc fbc8 	bl	8004f34 <_printf_float>
 80087a4:	1c42      	adds	r2, r0, #1
 80087a6:	4606      	mov	r6, r0
 80087a8:	d1d6      	bne.n	8008758 <_svfiprintf_r+0x174>
 80087aa:	89ab      	ldrh	r3, [r5, #12]
 80087ac:	065b      	lsls	r3, r3, #25
 80087ae:	f53f af2d 	bmi.w	800860c <_svfiprintf_r+0x28>
 80087b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087b4:	e72c      	b.n	8008610 <_svfiprintf_r+0x2c>
 80087b6:	ab03      	add	r3, sp, #12
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	462a      	mov	r2, r5
 80087bc:	4638      	mov	r0, r7
 80087be:	4b06      	ldr	r3, [pc, #24]	@ (80087d8 <_svfiprintf_r+0x1f4>)
 80087c0:	a904      	add	r1, sp, #16
 80087c2:	f7fc fe55 	bl	8005470 <_printf_i>
 80087c6:	e7ed      	b.n	80087a4 <_svfiprintf_r+0x1c0>
 80087c8:	08009e41 	.word	0x08009e41
 80087cc:	08009e47 	.word	0x08009e47
 80087d0:	08009e4b 	.word	0x08009e4b
 80087d4:	08004f35 	.word	0x08004f35
 80087d8:	0800852d 	.word	0x0800852d

080087dc <__sfputc_r>:
 80087dc:	6893      	ldr	r3, [r2, #8]
 80087de:	b410      	push	{r4}
 80087e0:	3b01      	subs	r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	6093      	str	r3, [r2, #8]
 80087e6:	da07      	bge.n	80087f8 <__sfputc_r+0x1c>
 80087e8:	6994      	ldr	r4, [r2, #24]
 80087ea:	42a3      	cmp	r3, r4
 80087ec:	db01      	blt.n	80087f2 <__sfputc_r+0x16>
 80087ee:	290a      	cmp	r1, #10
 80087f0:	d102      	bne.n	80087f8 <__sfputc_r+0x1c>
 80087f2:	bc10      	pop	{r4}
 80087f4:	f7fd bb01 	b.w	8005dfa <__swbuf_r>
 80087f8:	6813      	ldr	r3, [r2, #0]
 80087fa:	1c58      	adds	r0, r3, #1
 80087fc:	6010      	str	r0, [r2, #0]
 80087fe:	7019      	strb	r1, [r3, #0]
 8008800:	4608      	mov	r0, r1
 8008802:	bc10      	pop	{r4}
 8008804:	4770      	bx	lr

08008806 <__sfputs_r>:
 8008806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008808:	4606      	mov	r6, r0
 800880a:	460f      	mov	r7, r1
 800880c:	4614      	mov	r4, r2
 800880e:	18d5      	adds	r5, r2, r3
 8008810:	42ac      	cmp	r4, r5
 8008812:	d101      	bne.n	8008818 <__sfputs_r+0x12>
 8008814:	2000      	movs	r0, #0
 8008816:	e007      	b.n	8008828 <__sfputs_r+0x22>
 8008818:	463a      	mov	r2, r7
 800881a:	4630      	mov	r0, r6
 800881c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008820:	f7ff ffdc 	bl	80087dc <__sfputc_r>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d1f3      	bne.n	8008810 <__sfputs_r+0xa>
 8008828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800882c <_vfiprintf_r>:
 800882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	460d      	mov	r5, r1
 8008832:	4614      	mov	r4, r2
 8008834:	4698      	mov	r8, r3
 8008836:	4606      	mov	r6, r0
 8008838:	b09d      	sub	sp, #116	@ 0x74
 800883a:	b118      	cbz	r0, 8008844 <_vfiprintf_r+0x18>
 800883c:	6a03      	ldr	r3, [r0, #32]
 800883e:	b90b      	cbnz	r3, 8008844 <_vfiprintf_r+0x18>
 8008840:	f7fd f9d2 	bl	8005be8 <__sinit>
 8008844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008846:	07d9      	lsls	r1, r3, #31
 8008848:	d405      	bmi.n	8008856 <_vfiprintf_r+0x2a>
 800884a:	89ab      	ldrh	r3, [r5, #12]
 800884c:	059a      	lsls	r2, r3, #22
 800884e:	d402      	bmi.n	8008856 <_vfiprintf_r+0x2a>
 8008850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008852:	f7fd fbe4 	bl	800601e <__retarget_lock_acquire_recursive>
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	071b      	lsls	r3, r3, #28
 800885a:	d501      	bpl.n	8008860 <_vfiprintf_r+0x34>
 800885c:	692b      	ldr	r3, [r5, #16]
 800885e:	b99b      	cbnz	r3, 8008888 <_vfiprintf_r+0x5c>
 8008860:	4629      	mov	r1, r5
 8008862:	4630      	mov	r0, r6
 8008864:	f7fd fb08 	bl	8005e78 <__swsetup_r>
 8008868:	b170      	cbz	r0, 8008888 <_vfiprintf_r+0x5c>
 800886a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800886c:	07dc      	lsls	r4, r3, #31
 800886e:	d504      	bpl.n	800887a <_vfiprintf_r+0x4e>
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	b01d      	add	sp, #116	@ 0x74
 8008876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887a:	89ab      	ldrh	r3, [r5, #12]
 800887c:	0598      	lsls	r0, r3, #22
 800887e:	d4f7      	bmi.n	8008870 <_vfiprintf_r+0x44>
 8008880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008882:	f7fd fbcd 	bl	8006020 <__retarget_lock_release_recursive>
 8008886:	e7f3      	b.n	8008870 <_vfiprintf_r+0x44>
 8008888:	2300      	movs	r3, #0
 800888a:	9309      	str	r3, [sp, #36]	@ 0x24
 800888c:	2320      	movs	r3, #32
 800888e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008892:	2330      	movs	r3, #48	@ 0x30
 8008894:	f04f 0901 	mov.w	r9, #1
 8008898:	f8cd 800c 	str.w	r8, [sp, #12]
 800889c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008a48 <_vfiprintf_r+0x21c>
 80088a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088a4:	4623      	mov	r3, r4
 80088a6:	469a      	mov	sl, r3
 80088a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ac:	b10a      	cbz	r2, 80088b2 <_vfiprintf_r+0x86>
 80088ae:	2a25      	cmp	r2, #37	@ 0x25
 80088b0:	d1f9      	bne.n	80088a6 <_vfiprintf_r+0x7a>
 80088b2:	ebba 0b04 	subs.w	fp, sl, r4
 80088b6:	d00b      	beq.n	80088d0 <_vfiprintf_r+0xa4>
 80088b8:	465b      	mov	r3, fp
 80088ba:	4622      	mov	r2, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	4630      	mov	r0, r6
 80088c0:	f7ff ffa1 	bl	8008806 <__sfputs_r>
 80088c4:	3001      	adds	r0, #1
 80088c6:	f000 80a7 	beq.w	8008a18 <_vfiprintf_r+0x1ec>
 80088ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088cc:	445a      	add	r2, fp
 80088ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80088d0:	f89a 3000 	ldrb.w	r3, [sl]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 809f 	beq.w	8008a18 <_vfiprintf_r+0x1ec>
 80088da:	2300      	movs	r3, #0
 80088dc:	f04f 32ff 	mov.w	r2, #4294967295
 80088e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088e4:	f10a 0a01 	add.w	sl, sl, #1
 80088e8:	9304      	str	r3, [sp, #16]
 80088ea:	9307      	str	r3, [sp, #28]
 80088ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80088f2:	4654      	mov	r4, sl
 80088f4:	2205      	movs	r2, #5
 80088f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088fa:	4853      	ldr	r0, [pc, #332]	@ (8008a48 <_vfiprintf_r+0x21c>)
 80088fc:	f7fd fb91 	bl	8006022 <memchr>
 8008900:	9a04      	ldr	r2, [sp, #16]
 8008902:	b9d8      	cbnz	r0, 800893c <_vfiprintf_r+0x110>
 8008904:	06d1      	lsls	r1, r2, #27
 8008906:	bf44      	itt	mi
 8008908:	2320      	movmi	r3, #32
 800890a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800890e:	0713      	lsls	r3, r2, #28
 8008910:	bf44      	itt	mi
 8008912:	232b      	movmi	r3, #43	@ 0x2b
 8008914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008918:	f89a 3000 	ldrb.w	r3, [sl]
 800891c:	2b2a      	cmp	r3, #42	@ 0x2a
 800891e:	d015      	beq.n	800894c <_vfiprintf_r+0x120>
 8008920:	4654      	mov	r4, sl
 8008922:	2000      	movs	r0, #0
 8008924:	f04f 0c0a 	mov.w	ip, #10
 8008928:	9a07      	ldr	r2, [sp, #28]
 800892a:	4621      	mov	r1, r4
 800892c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008930:	3b30      	subs	r3, #48	@ 0x30
 8008932:	2b09      	cmp	r3, #9
 8008934:	d94b      	bls.n	80089ce <_vfiprintf_r+0x1a2>
 8008936:	b1b0      	cbz	r0, 8008966 <_vfiprintf_r+0x13a>
 8008938:	9207      	str	r2, [sp, #28]
 800893a:	e014      	b.n	8008966 <_vfiprintf_r+0x13a>
 800893c:	eba0 0308 	sub.w	r3, r0, r8
 8008940:	fa09 f303 	lsl.w	r3, r9, r3
 8008944:	4313      	orrs	r3, r2
 8008946:	46a2      	mov	sl, r4
 8008948:	9304      	str	r3, [sp, #16]
 800894a:	e7d2      	b.n	80088f2 <_vfiprintf_r+0xc6>
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	1d19      	adds	r1, r3, #4
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	9103      	str	r1, [sp, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfbb      	ittet	lt
 8008958:	425b      	neglt	r3, r3
 800895a:	f042 0202 	orrlt.w	r2, r2, #2
 800895e:	9307      	strge	r3, [sp, #28]
 8008960:	9307      	strlt	r3, [sp, #28]
 8008962:	bfb8      	it	lt
 8008964:	9204      	strlt	r2, [sp, #16]
 8008966:	7823      	ldrb	r3, [r4, #0]
 8008968:	2b2e      	cmp	r3, #46	@ 0x2e
 800896a:	d10a      	bne.n	8008982 <_vfiprintf_r+0x156>
 800896c:	7863      	ldrb	r3, [r4, #1]
 800896e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008970:	d132      	bne.n	80089d8 <_vfiprintf_r+0x1ac>
 8008972:	9b03      	ldr	r3, [sp, #12]
 8008974:	3402      	adds	r4, #2
 8008976:	1d1a      	adds	r2, r3, #4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	9203      	str	r2, [sp, #12]
 800897c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008980:	9305      	str	r3, [sp, #20]
 8008982:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008a4c <_vfiprintf_r+0x220>
 8008986:	2203      	movs	r2, #3
 8008988:	4650      	mov	r0, sl
 800898a:	7821      	ldrb	r1, [r4, #0]
 800898c:	f7fd fb49 	bl	8006022 <memchr>
 8008990:	b138      	cbz	r0, 80089a2 <_vfiprintf_r+0x176>
 8008992:	2240      	movs	r2, #64	@ 0x40
 8008994:	9b04      	ldr	r3, [sp, #16]
 8008996:	eba0 000a 	sub.w	r0, r0, sl
 800899a:	4082      	lsls	r2, r0
 800899c:	4313      	orrs	r3, r2
 800899e:	3401      	adds	r4, #1
 80089a0:	9304      	str	r3, [sp, #16]
 80089a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a6:	2206      	movs	r2, #6
 80089a8:	4829      	ldr	r0, [pc, #164]	@ (8008a50 <_vfiprintf_r+0x224>)
 80089aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089ae:	f7fd fb38 	bl	8006022 <memchr>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d03f      	beq.n	8008a36 <_vfiprintf_r+0x20a>
 80089b6:	4b27      	ldr	r3, [pc, #156]	@ (8008a54 <_vfiprintf_r+0x228>)
 80089b8:	bb1b      	cbnz	r3, 8008a02 <_vfiprintf_r+0x1d6>
 80089ba:	9b03      	ldr	r3, [sp, #12]
 80089bc:	3307      	adds	r3, #7
 80089be:	f023 0307 	bic.w	r3, r3, #7
 80089c2:	3308      	adds	r3, #8
 80089c4:	9303      	str	r3, [sp, #12]
 80089c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c8:	443b      	add	r3, r7
 80089ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80089cc:	e76a      	b.n	80088a4 <_vfiprintf_r+0x78>
 80089ce:	460c      	mov	r4, r1
 80089d0:	2001      	movs	r0, #1
 80089d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80089d6:	e7a8      	b.n	800892a <_vfiprintf_r+0xfe>
 80089d8:	2300      	movs	r3, #0
 80089da:	f04f 0c0a 	mov.w	ip, #10
 80089de:	4619      	mov	r1, r3
 80089e0:	3401      	adds	r4, #1
 80089e2:	9305      	str	r3, [sp, #20]
 80089e4:	4620      	mov	r0, r4
 80089e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ea:	3a30      	subs	r2, #48	@ 0x30
 80089ec:	2a09      	cmp	r2, #9
 80089ee:	d903      	bls.n	80089f8 <_vfiprintf_r+0x1cc>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0c6      	beq.n	8008982 <_vfiprintf_r+0x156>
 80089f4:	9105      	str	r1, [sp, #20]
 80089f6:	e7c4      	b.n	8008982 <_vfiprintf_r+0x156>
 80089f8:	4604      	mov	r4, r0
 80089fa:	2301      	movs	r3, #1
 80089fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a00:	e7f0      	b.n	80089e4 <_vfiprintf_r+0x1b8>
 8008a02:	ab03      	add	r3, sp, #12
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	462a      	mov	r2, r5
 8008a08:	4630      	mov	r0, r6
 8008a0a:	4b13      	ldr	r3, [pc, #76]	@ (8008a58 <_vfiprintf_r+0x22c>)
 8008a0c:	a904      	add	r1, sp, #16
 8008a0e:	f7fc fa91 	bl	8004f34 <_printf_float>
 8008a12:	4607      	mov	r7, r0
 8008a14:	1c78      	adds	r0, r7, #1
 8008a16:	d1d6      	bne.n	80089c6 <_vfiprintf_r+0x19a>
 8008a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a1a:	07d9      	lsls	r1, r3, #31
 8008a1c:	d405      	bmi.n	8008a2a <_vfiprintf_r+0x1fe>
 8008a1e:	89ab      	ldrh	r3, [r5, #12]
 8008a20:	059a      	lsls	r2, r3, #22
 8008a22:	d402      	bmi.n	8008a2a <_vfiprintf_r+0x1fe>
 8008a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a26:	f7fd fafb 	bl	8006020 <__retarget_lock_release_recursive>
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
 8008a2c:	065b      	lsls	r3, r3, #25
 8008a2e:	f53f af1f 	bmi.w	8008870 <_vfiprintf_r+0x44>
 8008a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a34:	e71e      	b.n	8008874 <_vfiprintf_r+0x48>
 8008a36:	ab03      	add	r3, sp, #12
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	462a      	mov	r2, r5
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	4b06      	ldr	r3, [pc, #24]	@ (8008a58 <_vfiprintf_r+0x22c>)
 8008a40:	a904      	add	r1, sp, #16
 8008a42:	f7fc fd15 	bl	8005470 <_printf_i>
 8008a46:	e7e4      	b.n	8008a12 <_vfiprintf_r+0x1e6>
 8008a48:	08009e41 	.word	0x08009e41
 8008a4c:	08009e47 	.word	0x08009e47
 8008a50:	08009e4b 	.word	0x08009e4b
 8008a54:	08004f35 	.word	0x08004f35
 8008a58:	08008807 	.word	0x08008807

08008a5c <__sflush_r>:
 8008a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	0716      	lsls	r6, r2, #28
 8008a64:	4605      	mov	r5, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	d454      	bmi.n	8008b14 <__sflush_r+0xb8>
 8008a6a:	684b      	ldr	r3, [r1, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dc02      	bgt.n	8008a76 <__sflush_r+0x1a>
 8008a70:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	dd48      	ble.n	8008b08 <__sflush_r+0xac>
 8008a76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a78:	2e00      	cmp	r6, #0
 8008a7a:	d045      	beq.n	8008b08 <__sflush_r+0xac>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a82:	682f      	ldr	r7, [r5, #0]
 8008a84:	6a21      	ldr	r1, [r4, #32]
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	d030      	beq.n	8008aec <__sflush_r+0x90>
 8008a8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	0759      	lsls	r1, r3, #29
 8008a90:	d505      	bpl.n	8008a9e <__sflush_r+0x42>
 8008a92:	6863      	ldr	r3, [r4, #4]
 8008a94:	1ad2      	subs	r2, r2, r3
 8008a96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a98:	b10b      	cbz	r3, 8008a9e <__sflush_r+0x42>
 8008a9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a9c:	1ad2      	subs	r2, r2, r3
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aa4:	6a21      	ldr	r1, [r4, #32]
 8008aa6:	47b0      	blx	r6
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	d106      	bne.n	8008abc <__sflush_r+0x60>
 8008aae:	6829      	ldr	r1, [r5, #0]
 8008ab0:	291d      	cmp	r1, #29
 8008ab2:	d82b      	bhi.n	8008b0c <__sflush_r+0xb0>
 8008ab4:	4a28      	ldr	r2, [pc, #160]	@ (8008b58 <__sflush_r+0xfc>)
 8008ab6:	410a      	asrs	r2, r1
 8008ab8:	07d6      	lsls	r6, r2, #31
 8008aba:	d427      	bmi.n	8008b0c <__sflush_r+0xb0>
 8008abc:	2200      	movs	r2, #0
 8008abe:	6062      	str	r2, [r4, #4]
 8008ac0:	6922      	ldr	r2, [r4, #16]
 8008ac2:	04d9      	lsls	r1, r3, #19
 8008ac4:	6022      	str	r2, [r4, #0]
 8008ac6:	d504      	bpl.n	8008ad2 <__sflush_r+0x76>
 8008ac8:	1c42      	adds	r2, r0, #1
 8008aca:	d101      	bne.n	8008ad0 <__sflush_r+0x74>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	b903      	cbnz	r3, 8008ad2 <__sflush_r+0x76>
 8008ad0:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ad2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ad4:	602f      	str	r7, [r5, #0]
 8008ad6:	b1b9      	cbz	r1, 8008b08 <__sflush_r+0xac>
 8008ad8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008adc:	4299      	cmp	r1, r3
 8008ade:	d002      	beq.n	8008ae6 <__sflush_r+0x8a>
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f7fe f901 	bl	8006ce8 <_free_r>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aea:	e00d      	b.n	8008b08 <__sflush_r+0xac>
 8008aec:	2301      	movs	r3, #1
 8008aee:	4628      	mov	r0, r5
 8008af0:	47b0      	blx	r6
 8008af2:	4602      	mov	r2, r0
 8008af4:	1c50      	adds	r0, r2, #1
 8008af6:	d1c9      	bne.n	8008a8c <__sflush_r+0x30>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0c6      	beq.n	8008a8c <__sflush_r+0x30>
 8008afe:	2b1d      	cmp	r3, #29
 8008b00:	d001      	beq.n	8008b06 <__sflush_r+0xaa>
 8008b02:	2b16      	cmp	r3, #22
 8008b04:	d11d      	bne.n	8008b42 <__sflush_r+0xe6>
 8008b06:	602f      	str	r7, [r5, #0]
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e021      	b.n	8008b50 <__sflush_r+0xf4>
 8008b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b10:	b21b      	sxth	r3, r3
 8008b12:	e01a      	b.n	8008b4a <__sflush_r+0xee>
 8008b14:	690f      	ldr	r7, [r1, #16]
 8008b16:	2f00      	cmp	r7, #0
 8008b18:	d0f6      	beq.n	8008b08 <__sflush_r+0xac>
 8008b1a:	0793      	lsls	r3, r2, #30
 8008b1c:	bf18      	it	ne
 8008b1e:	2300      	movne	r3, #0
 8008b20:	680e      	ldr	r6, [r1, #0]
 8008b22:	bf08      	it	eq
 8008b24:	694b      	ldreq	r3, [r1, #20]
 8008b26:	1bf6      	subs	r6, r6, r7
 8008b28:	600f      	str	r7, [r1, #0]
 8008b2a:	608b      	str	r3, [r1, #8]
 8008b2c:	2e00      	cmp	r6, #0
 8008b2e:	ddeb      	ble.n	8008b08 <__sflush_r+0xac>
 8008b30:	4633      	mov	r3, r6
 8008b32:	463a      	mov	r2, r7
 8008b34:	4628      	mov	r0, r5
 8008b36:	6a21      	ldr	r1, [r4, #32]
 8008b38:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008b3c:	47e0      	blx	ip
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	dc07      	bgt.n	8008b52 <__sflush_r+0xf6>
 8008b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b52:	4407      	add	r7, r0
 8008b54:	1a36      	subs	r6, r6, r0
 8008b56:	e7e9      	b.n	8008b2c <__sflush_r+0xd0>
 8008b58:	dfbffffe 	.word	0xdfbffffe

08008b5c <_fflush_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	690b      	ldr	r3, [r1, #16]
 8008b60:	4605      	mov	r5, r0
 8008b62:	460c      	mov	r4, r1
 8008b64:	b913      	cbnz	r3, 8008b6c <_fflush_r+0x10>
 8008b66:	2500      	movs	r5, #0
 8008b68:	4628      	mov	r0, r5
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	b118      	cbz	r0, 8008b76 <_fflush_r+0x1a>
 8008b6e:	6a03      	ldr	r3, [r0, #32]
 8008b70:	b90b      	cbnz	r3, 8008b76 <_fflush_r+0x1a>
 8008b72:	f7fd f839 	bl	8005be8 <__sinit>
 8008b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0f3      	beq.n	8008b66 <_fflush_r+0xa>
 8008b7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b80:	07d0      	lsls	r0, r2, #31
 8008b82:	d404      	bmi.n	8008b8e <_fflush_r+0x32>
 8008b84:	0599      	lsls	r1, r3, #22
 8008b86:	d402      	bmi.n	8008b8e <_fflush_r+0x32>
 8008b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b8a:	f7fd fa48 	bl	800601e <__retarget_lock_acquire_recursive>
 8008b8e:	4628      	mov	r0, r5
 8008b90:	4621      	mov	r1, r4
 8008b92:	f7ff ff63 	bl	8008a5c <__sflush_r>
 8008b96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b98:	4605      	mov	r5, r0
 8008b9a:	07da      	lsls	r2, r3, #31
 8008b9c:	d4e4      	bmi.n	8008b68 <_fflush_r+0xc>
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	059b      	lsls	r3, r3, #22
 8008ba2:	d4e1      	bmi.n	8008b68 <_fflush_r+0xc>
 8008ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ba6:	f7fd fa3b 	bl	8006020 <__retarget_lock_release_recursive>
 8008baa:	e7dd      	b.n	8008b68 <_fflush_r+0xc>

08008bac <__swhatbuf_r>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	460c      	mov	r4, r1
 8008bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb4:	4615      	mov	r5, r2
 8008bb6:	2900      	cmp	r1, #0
 8008bb8:	461e      	mov	r6, r3
 8008bba:	b096      	sub	sp, #88	@ 0x58
 8008bbc:	da0c      	bge.n	8008bd8 <__swhatbuf_r+0x2c>
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008bc6:	bf14      	ite	ne
 8008bc8:	2340      	movne	r3, #64	@ 0x40
 8008bca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bce:	2000      	movs	r0, #0
 8008bd0:	6031      	str	r1, [r6, #0]
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	b016      	add	sp, #88	@ 0x58
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}
 8008bd8:	466a      	mov	r2, sp
 8008bda:	f000 f875 	bl	8008cc8 <_fstat_r>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	dbed      	blt.n	8008bbe <__swhatbuf_r+0x12>
 8008be2:	9901      	ldr	r1, [sp, #4]
 8008be4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008be8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bec:	4259      	negs	r1, r3
 8008bee:	4159      	adcs	r1, r3
 8008bf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bf4:	e7eb      	b.n	8008bce <__swhatbuf_r+0x22>

08008bf6 <__smakebuf_r>:
 8008bf6:	898b      	ldrh	r3, [r1, #12]
 8008bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bfa:	079d      	lsls	r5, r3, #30
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	d507      	bpl.n	8008c12 <__smakebuf_r+0x1c>
 8008c02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c06:	6023      	str	r3, [r4, #0]
 8008c08:	6123      	str	r3, [r4, #16]
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	6163      	str	r3, [r4, #20]
 8008c0e:	b003      	add	sp, #12
 8008c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c12:	466a      	mov	r2, sp
 8008c14:	ab01      	add	r3, sp, #4
 8008c16:	f7ff ffc9 	bl	8008bac <__swhatbuf_r>
 8008c1a:	9f00      	ldr	r7, [sp, #0]
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	4639      	mov	r1, r7
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7fe f8d3 	bl	8006dcc <_malloc_r>
 8008c26:	b948      	cbnz	r0, 8008c3c <__smakebuf_r+0x46>
 8008c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c2c:	059a      	lsls	r2, r3, #22
 8008c2e:	d4ee      	bmi.n	8008c0e <__smakebuf_r+0x18>
 8008c30:	f023 0303 	bic.w	r3, r3, #3
 8008c34:	f043 0302 	orr.w	r3, r3, #2
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	e7e2      	b.n	8008c02 <__smakebuf_r+0xc>
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c46:	81a3      	strh	r3, [r4, #12]
 8008c48:	9b01      	ldr	r3, [sp, #4]
 8008c4a:	6020      	str	r0, [r4, #0]
 8008c4c:	b15b      	cbz	r3, 8008c66 <__smakebuf_r+0x70>
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c54:	f000 f84a 	bl	8008cec <_isatty_r>
 8008c58:	b128      	cbz	r0, 8008c66 <__smakebuf_r+0x70>
 8008c5a:	89a3      	ldrh	r3, [r4, #12]
 8008c5c:	f023 0303 	bic.w	r3, r3, #3
 8008c60:	f043 0301 	orr.w	r3, r3, #1
 8008c64:	81a3      	strh	r3, [r4, #12]
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	431d      	orrs	r5, r3
 8008c6a:	81a5      	strh	r5, [r4, #12]
 8008c6c:	e7cf      	b.n	8008c0e <__smakebuf_r+0x18>

08008c6e <memmove>:
 8008c6e:	4288      	cmp	r0, r1
 8008c70:	b510      	push	{r4, lr}
 8008c72:	eb01 0402 	add.w	r4, r1, r2
 8008c76:	d902      	bls.n	8008c7e <memmove+0x10>
 8008c78:	4284      	cmp	r4, r0
 8008c7a:	4623      	mov	r3, r4
 8008c7c:	d807      	bhi.n	8008c8e <memmove+0x20>
 8008c7e:	1e43      	subs	r3, r0, #1
 8008c80:	42a1      	cmp	r1, r4
 8008c82:	d008      	beq.n	8008c96 <memmove+0x28>
 8008c84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c8c:	e7f8      	b.n	8008c80 <memmove+0x12>
 8008c8e:	4601      	mov	r1, r0
 8008c90:	4402      	add	r2, r0
 8008c92:	428a      	cmp	r2, r1
 8008c94:	d100      	bne.n	8008c98 <memmove+0x2a>
 8008c96:	bd10      	pop	{r4, pc}
 8008c98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ca0:	e7f7      	b.n	8008c92 <memmove+0x24>

08008ca2 <strncmp>:
 8008ca2:	b510      	push	{r4, lr}
 8008ca4:	b16a      	cbz	r2, 8008cc2 <strncmp+0x20>
 8008ca6:	3901      	subs	r1, #1
 8008ca8:	1884      	adds	r4, r0, r2
 8008caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d103      	bne.n	8008cbe <strncmp+0x1c>
 8008cb6:	42a0      	cmp	r0, r4
 8008cb8:	d001      	beq.n	8008cbe <strncmp+0x1c>
 8008cba:	2a00      	cmp	r2, #0
 8008cbc:	d1f5      	bne.n	8008caa <strncmp+0x8>
 8008cbe:	1ad0      	subs	r0, r2, r3
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	e7fc      	b.n	8008cc0 <strncmp+0x1e>
	...

08008cc8 <_fstat_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	2300      	movs	r3, #0
 8008ccc:	4d06      	ldr	r5, [pc, #24]	@ (8008ce8 <_fstat_r+0x20>)
 8008cce:	4604      	mov	r4, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	f7f9 fe67 	bl	80029a8 <_fstat>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d102      	bne.n	8008ce4 <_fstat_r+0x1c>
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	b103      	cbz	r3, 8008ce4 <_fstat_r+0x1c>
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	bd38      	pop	{r3, r4, r5, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20000458 	.word	0x20000458

08008cec <_isatty_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	2300      	movs	r3, #0
 8008cf0:	4d05      	ldr	r5, [pc, #20]	@ (8008d08 <_isatty_r+0x1c>)
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7f9 fe65 	bl	80029c6 <_isatty>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_isatty_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_isatty_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20000458 	.word	0x20000458

08008d0c <_sbrk_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	2300      	movs	r3, #0
 8008d10:	4d05      	ldr	r5, [pc, #20]	@ (8008d28 <_sbrk_r+0x1c>)
 8008d12:	4604      	mov	r4, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	602b      	str	r3, [r5, #0]
 8008d18:	f7f9 fe6c 	bl	80029f4 <_sbrk>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_sbrk_r+0x1a>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_sbrk_r+0x1a>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	20000458 	.word	0x20000458

08008d2c <memcpy>:
 8008d2c:	440a      	add	r2, r1
 8008d2e:	4291      	cmp	r1, r2
 8008d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d34:	d100      	bne.n	8008d38 <memcpy+0xc>
 8008d36:	4770      	bx	lr
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d3e:	4291      	cmp	r1, r2
 8008d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d44:	d1f9      	bne.n	8008d3a <memcpy+0xe>
 8008d46:	bd10      	pop	{r4, pc}

08008d48 <nan>:
 8008d48:	2000      	movs	r0, #0
 8008d4a:	4901      	ldr	r1, [pc, #4]	@ (8008d50 <nan+0x8>)
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	7ff80000 	.word	0x7ff80000

08008d54 <__assert_func>:
 8008d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d56:	4614      	mov	r4, r2
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4b09      	ldr	r3, [pc, #36]	@ (8008d80 <__assert_func+0x2c>)
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68d8      	ldr	r0, [r3, #12]
 8008d62:	b954      	cbnz	r4, 8008d7a <__assert_func+0x26>
 8008d64:	4b07      	ldr	r3, [pc, #28]	@ (8008d84 <__assert_func+0x30>)
 8008d66:	461c      	mov	r4, r3
 8008d68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d6c:	9100      	str	r1, [sp, #0]
 8008d6e:	462b      	mov	r3, r5
 8008d70:	4905      	ldr	r1, [pc, #20]	@ (8008d88 <__assert_func+0x34>)
 8008d72:	f000 fba7 	bl	80094c4 <fiprintf>
 8008d76:	f000 fbb7 	bl	80094e8 <abort>
 8008d7a:	4b04      	ldr	r3, [pc, #16]	@ (8008d8c <__assert_func+0x38>)
 8008d7c:	e7f4      	b.n	8008d68 <__assert_func+0x14>
 8008d7e:	bf00      	nop
 8008d80:	20000034 	.word	0x20000034
 8008d84:	08009e95 	.word	0x08009e95
 8008d88:	08009e67 	.word	0x08009e67
 8008d8c:	08009e5a 	.word	0x08009e5a

08008d90 <_calloc_r>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	fba1 5402 	umull	r5, r4, r1, r2
 8008d96:	b93c      	cbnz	r4, 8008da8 <_calloc_r+0x18>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	f7fe f817 	bl	8006dcc <_malloc_r>
 8008d9e:	4606      	mov	r6, r0
 8008da0:	b928      	cbnz	r0, 8008dae <_calloc_r+0x1e>
 8008da2:	2600      	movs	r6, #0
 8008da4:	4630      	mov	r0, r6
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	220c      	movs	r2, #12
 8008daa:	6002      	str	r2, [r0, #0]
 8008dac:	e7f9      	b.n	8008da2 <_calloc_r+0x12>
 8008dae:	462a      	mov	r2, r5
 8008db0:	4621      	mov	r1, r4
 8008db2:	f7fd f8b7 	bl	8005f24 <memset>
 8008db6:	e7f5      	b.n	8008da4 <_calloc_r+0x14>

08008db8 <rshift>:
 8008db8:	6903      	ldr	r3, [r0, #16]
 8008dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dc2:	f100 0414 	add.w	r4, r0, #20
 8008dc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008dca:	dd46      	ble.n	8008e5a <rshift+0xa2>
 8008dcc:	f011 011f 	ands.w	r1, r1, #31
 8008dd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008dd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008dd8:	d10c      	bne.n	8008df4 <rshift+0x3c>
 8008dda:	4629      	mov	r1, r5
 8008ddc:	f100 0710 	add.w	r7, r0, #16
 8008de0:	42b1      	cmp	r1, r6
 8008de2:	d335      	bcc.n	8008e50 <rshift+0x98>
 8008de4:	1a9b      	subs	r3, r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	1eea      	subs	r2, r5, #3
 8008dea:	4296      	cmp	r6, r2
 8008dec:	bf38      	it	cc
 8008dee:	2300      	movcc	r3, #0
 8008df0:	4423      	add	r3, r4
 8008df2:	e015      	b.n	8008e20 <rshift+0x68>
 8008df4:	46a1      	mov	r9, r4
 8008df6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008dfa:	f1c1 0820 	rsb	r8, r1, #32
 8008dfe:	40cf      	lsrs	r7, r1
 8008e00:	f105 0e04 	add.w	lr, r5, #4
 8008e04:	4576      	cmp	r6, lr
 8008e06:	46f4      	mov	ip, lr
 8008e08:	d816      	bhi.n	8008e38 <rshift+0x80>
 8008e0a:	1a9a      	subs	r2, r3, r2
 8008e0c:	0092      	lsls	r2, r2, #2
 8008e0e:	3a04      	subs	r2, #4
 8008e10:	3501      	adds	r5, #1
 8008e12:	42ae      	cmp	r6, r5
 8008e14:	bf38      	it	cc
 8008e16:	2200      	movcc	r2, #0
 8008e18:	18a3      	adds	r3, r4, r2
 8008e1a:	50a7      	str	r7, [r4, r2]
 8008e1c:	b107      	cbz	r7, 8008e20 <rshift+0x68>
 8008e1e:	3304      	adds	r3, #4
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	eba3 0204 	sub.w	r2, r3, r4
 8008e26:	bf08      	it	eq
 8008e28:	2300      	moveq	r3, #0
 8008e2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e2e:	6102      	str	r2, [r0, #16]
 8008e30:	bf08      	it	eq
 8008e32:	6143      	streq	r3, [r0, #20]
 8008e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e38:	f8dc c000 	ldr.w	ip, [ip]
 8008e3c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e40:	ea4c 0707 	orr.w	r7, ip, r7
 8008e44:	f849 7b04 	str.w	r7, [r9], #4
 8008e48:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e4c:	40cf      	lsrs	r7, r1
 8008e4e:	e7d9      	b.n	8008e04 <rshift+0x4c>
 8008e50:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e54:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e58:	e7c2      	b.n	8008de0 <rshift+0x28>
 8008e5a:	4623      	mov	r3, r4
 8008e5c:	e7e0      	b.n	8008e20 <rshift+0x68>

08008e5e <__hexdig_fun>:
 8008e5e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e62:	2b09      	cmp	r3, #9
 8008e64:	d802      	bhi.n	8008e6c <__hexdig_fun+0xe>
 8008e66:	3820      	subs	r0, #32
 8008e68:	b2c0      	uxtb	r0, r0
 8008e6a:	4770      	bx	lr
 8008e6c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e70:	2b05      	cmp	r3, #5
 8008e72:	d801      	bhi.n	8008e78 <__hexdig_fun+0x1a>
 8008e74:	3847      	subs	r0, #71	@ 0x47
 8008e76:	e7f7      	b.n	8008e68 <__hexdig_fun+0xa>
 8008e78:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e7c:	2b05      	cmp	r3, #5
 8008e7e:	d801      	bhi.n	8008e84 <__hexdig_fun+0x26>
 8008e80:	3827      	subs	r0, #39	@ 0x27
 8008e82:	e7f1      	b.n	8008e68 <__hexdig_fun+0xa>
 8008e84:	2000      	movs	r0, #0
 8008e86:	4770      	bx	lr

08008e88 <__gethex>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	468a      	mov	sl, r1
 8008e8e:	4690      	mov	r8, r2
 8008e90:	b085      	sub	sp, #20
 8008e92:	9302      	str	r3, [sp, #8]
 8008e94:	680b      	ldr	r3, [r1, #0]
 8008e96:	9001      	str	r0, [sp, #4]
 8008e98:	1c9c      	adds	r4, r3, #2
 8008e9a:	46a1      	mov	r9, r4
 8008e9c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008ea0:	2830      	cmp	r0, #48	@ 0x30
 8008ea2:	d0fa      	beq.n	8008e9a <__gethex+0x12>
 8008ea4:	eba9 0303 	sub.w	r3, r9, r3
 8008ea8:	f1a3 0b02 	sub.w	fp, r3, #2
 8008eac:	f7ff ffd7 	bl	8008e5e <__hexdig_fun>
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d168      	bne.n	8008f88 <__gethex+0x100>
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	4648      	mov	r0, r9
 8008eba:	499f      	ldr	r1, [pc, #636]	@ (8009138 <__gethex+0x2b0>)
 8008ebc:	f7ff fef1 	bl	8008ca2 <strncmp>
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d167      	bne.n	8008f96 <__gethex+0x10e>
 8008ec6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008eca:	4626      	mov	r6, r4
 8008ecc:	f7ff ffc7 	bl	8008e5e <__hexdig_fun>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d062      	beq.n	8008f9a <__gethex+0x112>
 8008ed4:	4623      	mov	r3, r4
 8008ed6:	7818      	ldrb	r0, [r3, #0]
 8008ed8:	4699      	mov	r9, r3
 8008eda:	2830      	cmp	r0, #48	@ 0x30
 8008edc:	f103 0301 	add.w	r3, r3, #1
 8008ee0:	d0f9      	beq.n	8008ed6 <__gethex+0x4e>
 8008ee2:	f7ff ffbc 	bl	8008e5e <__hexdig_fun>
 8008ee6:	fab0 f580 	clz	r5, r0
 8008eea:	f04f 0b01 	mov.w	fp, #1
 8008eee:	096d      	lsrs	r5, r5, #5
 8008ef0:	464a      	mov	r2, r9
 8008ef2:	4616      	mov	r6, r2
 8008ef4:	7830      	ldrb	r0, [r6, #0]
 8008ef6:	3201      	adds	r2, #1
 8008ef8:	f7ff ffb1 	bl	8008e5e <__hexdig_fun>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d1f8      	bne.n	8008ef2 <__gethex+0x6a>
 8008f00:	2201      	movs	r2, #1
 8008f02:	4630      	mov	r0, r6
 8008f04:	498c      	ldr	r1, [pc, #560]	@ (8009138 <__gethex+0x2b0>)
 8008f06:	f7ff fecc 	bl	8008ca2 <strncmp>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d13f      	bne.n	8008f8e <__gethex+0x106>
 8008f0e:	b944      	cbnz	r4, 8008f22 <__gethex+0x9a>
 8008f10:	1c74      	adds	r4, r6, #1
 8008f12:	4622      	mov	r2, r4
 8008f14:	4616      	mov	r6, r2
 8008f16:	7830      	ldrb	r0, [r6, #0]
 8008f18:	3201      	adds	r2, #1
 8008f1a:	f7ff ffa0 	bl	8008e5e <__hexdig_fun>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d1f8      	bne.n	8008f14 <__gethex+0x8c>
 8008f22:	1ba4      	subs	r4, r4, r6
 8008f24:	00a7      	lsls	r7, r4, #2
 8008f26:	7833      	ldrb	r3, [r6, #0]
 8008f28:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008f2c:	2b50      	cmp	r3, #80	@ 0x50
 8008f2e:	d13e      	bne.n	8008fae <__gethex+0x126>
 8008f30:	7873      	ldrb	r3, [r6, #1]
 8008f32:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f34:	d033      	beq.n	8008f9e <__gethex+0x116>
 8008f36:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f38:	d034      	beq.n	8008fa4 <__gethex+0x11c>
 8008f3a:	2400      	movs	r4, #0
 8008f3c:	1c71      	adds	r1, r6, #1
 8008f3e:	7808      	ldrb	r0, [r1, #0]
 8008f40:	f7ff ff8d 	bl	8008e5e <__hexdig_fun>
 8008f44:	1e43      	subs	r3, r0, #1
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b18      	cmp	r3, #24
 8008f4a:	d830      	bhi.n	8008fae <__gethex+0x126>
 8008f4c:	f1a0 0210 	sub.w	r2, r0, #16
 8008f50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f54:	f7ff ff83 	bl	8008e5e <__hexdig_fun>
 8008f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f5c:	fa5f fc8c 	uxtb.w	ip, ip
 8008f60:	f1bc 0f18 	cmp.w	ip, #24
 8008f64:	f04f 030a 	mov.w	r3, #10
 8008f68:	d91e      	bls.n	8008fa8 <__gethex+0x120>
 8008f6a:	b104      	cbz	r4, 8008f6e <__gethex+0xe6>
 8008f6c:	4252      	negs	r2, r2
 8008f6e:	4417      	add	r7, r2
 8008f70:	f8ca 1000 	str.w	r1, [sl]
 8008f74:	b1ed      	cbz	r5, 8008fb2 <__gethex+0x12a>
 8008f76:	f1bb 0f00 	cmp.w	fp, #0
 8008f7a:	bf0c      	ite	eq
 8008f7c:	2506      	moveq	r5, #6
 8008f7e:	2500      	movne	r5, #0
 8008f80:	4628      	mov	r0, r5
 8008f82:	b005      	add	sp, #20
 8008f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f88:	2500      	movs	r5, #0
 8008f8a:	462c      	mov	r4, r5
 8008f8c:	e7b0      	b.n	8008ef0 <__gethex+0x68>
 8008f8e:	2c00      	cmp	r4, #0
 8008f90:	d1c7      	bne.n	8008f22 <__gethex+0x9a>
 8008f92:	4627      	mov	r7, r4
 8008f94:	e7c7      	b.n	8008f26 <__gethex+0x9e>
 8008f96:	464e      	mov	r6, r9
 8008f98:	462f      	mov	r7, r5
 8008f9a:	2501      	movs	r5, #1
 8008f9c:	e7c3      	b.n	8008f26 <__gethex+0x9e>
 8008f9e:	2400      	movs	r4, #0
 8008fa0:	1cb1      	adds	r1, r6, #2
 8008fa2:	e7cc      	b.n	8008f3e <__gethex+0xb6>
 8008fa4:	2401      	movs	r4, #1
 8008fa6:	e7fb      	b.n	8008fa0 <__gethex+0x118>
 8008fa8:	fb03 0002 	mla	r0, r3, r2, r0
 8008fac:	e7ce      	b.n	8008f4c <__gethex+0xc4>
 8008fae:	4631      	mov	r1, r6
 8008fb0:	e7de      	b.n	8008f70 <__gethex+0xe8>
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	eba6 0309 	sub.w	r3, r6, r9
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	2b07      	cmp	r3, #7
 8008fbc:	dc0a      	bgt.n	8008fd4 <__gethex+0x14c>
 8008fbe:	9801      	ldr	r0, [sp, #4]
 8008fc0:	f7fd ff90 	bl	8006ee4 <_Balloc>
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	b940      	cbnz	r0, 8008fda <__gethex+0x152>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	21e4      	movs	r1, #228	@ 0xe4
 8008fcc:	4b5b      	ldr	r3, [pc, #364]	@ (800913c <__gethex+0x2b4>)
 8008fce:	485c      	ldr	r0, [pc, #368]	@ (8009140 <__gethex+0x2b8>)
 8008fd0:	f7ff fec0 	bl	8008d54 <__assert_func>
 8008fd4:	3101      	adds	r1, #1
 8008fd6:	105b      	asrs	r3, r3, #1
 8008fd8:	e7ef      	b.n	8008fba <__gethex+0x132>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f100 0a14 	add.w	sl, r0, #20
 8008fe0:	4655      	mov	r5, sl
 8008fe2:	469b      	mov	fp, r3
 8008fe4:	45b1      	cmp	r9, r6
 8008fe6:	d337      	bcc.n	8009058 <__gethex+0x1d0>
 8008fe8:	f845 bb04 	str.w	fp, [r5], #4
 8008fec:	eba5 050a 	sub.w	r5, r5, sl
 8008ff0:	10ad      	asrs	r5, r5, #2
 8008ff2:	6125      	str	r5, [r4, #16]
 8008ff4:	4658      	mov	r0, fp
 8008ff6:	f7fe f867 	bl	80070c8 <__hi0bits>
 8008ffa:	016d      	lsls	r5, r5, #5
 8008ffc:	f8d8 6000 	ldr.w	r6, [r8]
 8009000:	1a2d      	subs	r5, r5, r0
 8009002:	42b5      	cmp	r5, r6
 8009004:	dd54      	ble.n	80090b0 <__gethex+0x228>
 8009006:	1bad      	subs	r5, r5, r6
 8009008:	4629      	mov	r1, r5
 800900a:	4620      	mov	r0, r4
 800900c:	f7fe fbef 	bl	80077ee <__any_on>
 8009010:	4681      	mov	r9, r0
 8009012:	b178      	cbz	r0, 8009034 <__gethex+0x1ac>
 8009014:	f04f 0901 	mov.w	r9, #1
 8009018:	1e6b      	subs	r3, r5, #1
 800901a:	1159      	asrs	r1, r3, #5
 800901c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009020:	f003 021f 	and.w	r2, r3, #31
 8009024:	fa09 f202 	lsl.w	r2, r9, r2
 8009028:	420a      	tst	r2, r1
 800902a:	d003      	beq.n	8009034 <__gethex+0x1ac>
 800902c:	454b      	cmp	r3, r9
 800902e:	dc36      	bgt.n	800909e <__gethex+0x216>
 8009030:	f04f 0902 	mov.w	r9, #2
 8009034:	4629      	mov	r1, r5
 8009036:	4620      	mov	r0, r4
 8009038:	f7ff febe 	bl	8008db8 <rshift>
 800903c:	442f      	add	r7, r5
 800903e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009042:	42bb      	cmp	r3, r7
 8009044:	da42      	bge.n	80090cc <__gethex+0x244>
 8009046:	4621      	mov	r1, r4
 8009048:	9801      	ldr	r0, [sp, #4]
 800904a:	f7fd ff8b 	bl	8006f64 <_Bfree>
 800904e:	2300      	movs	r3, #0
 8009050:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009052:	25a3      	movs	r5, #163	@ 0xa3
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	e793      	b.n	8008f80 <__gethex+0xf8>
 8009058:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800905c:	2a2e      	cmp	r2, #46	@ 0x2e
 800905e:	d012      	beq.n	8009086 <__gethex+0x1fe>
 8009060:	2b20      	cmp	r3, #32
 8009062:	d104      	bne.n	800906e <__gethex+0x1e6>
 8009064:	f845 bb04 	str.w	fp, [r5], #4
 8009068:	f04f 0b00 	mov.w	fp, #0
 800906c:	465b      	mov	r3, fp
 800906e:	7830      	ldrb	r0, [r6, #0]
 8009070:	9303      	str	r3, [sp, #12]
 8009072:	f7ff fef4 	bl	8008e5e <__hexdig_fun>
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	f000 000f 	and.w	r0, r0, #15
 800907c:	4098      	lsls	r0, r3
 800907e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009082:	3304      	adds	r3, #4
 8009084:	e7ae      	b.n	8008fe4 <__gethex+0x15c>
 8009086:	45b1      	cmp	r9, r6
 8009088:	d8ea      	bhi.n	8009060 <__gethex+0x1d8>
 800908a:	2201      	movs	r2, #1
 800908c:	4630      	mov	r0, r6
 800908e:	492a      	ldr	r1, [pc, #168]	@ (8009138 <__gethex+0x2b0>)
 8009090:	9303      	str	r3, [sp, #12]
 8009092:	f7ff fe06 	bl	8008ca2 <strncmp>
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	2800      	cmp	r0, #0
 800909a:	d1e1      	bne.n	8009060 <__gethex+0x1d8>
 800909c:	e7a2      	b.n	8008fe4 <__gethex+0x15c>
 800909e:	4620      	mov	r0, r4
 80090a0:	1ea9      	subs	r1, r5, #2
 80090a2:	f7fe fba4 	bl	80077ee <__any_on>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d0c2      	beq.n	8009030 <__gethex+0x1a8>
 80090aa:	f04f 0903 	mov.w	r9, #3
 80090ae:	e7c1      	b.n	8009034 <__gethex+0x1ac>
 80090b0:	da09      	bge.n	80090c6 <__gethex+0x23e>
 80090b2:	1b75      	subs	r5, r6, r5
 80090b4:	4621      	mov	r1, r4
 80090b6:	462a      	mov	r2, r5
 80090b8:	9801      	ldr	r0, [sp, #4]
 80090ba:	f7fe f969 	bl	8007390 <__lshift>
 80090be:	4604      	mov	r4, r0
 80090c0:	1b7f      	subs	r7, r7, r5
 80090c2:	f100 0a14 	add.w	sl, r0, #20
 80090c6:	f04f 0900 	mov.w	r9, #0
 80090ca:	e7b8      	b.n	800903e <__gethex+0x1b6>
 80090cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090d0:	42bd      	cmp	r5, r7
 80090d2:	dd6f      	ble.n	80091b4 <__gethex+0x32c>
 80090d4:	1bed      	subs	r5, r5, r7
 80090d6:	42ae      	cmp	r6, r5
 80090d8:	dc34      	bgt.n	8009144 <__gethex+0x2bc>
 80090da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d022      	beq.n	8009128 <__gethex+0x2a0>
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d024      	beq.n	8009130 <__gethex+0x2a8>
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d115      	bne.n	8009116 <__gethex+0x28e>
 80090ea:	42ae      	cmp	r6, r5
 80090ec:	d113      	bne.n	8009116 <__gethex+0x28e>
 80090ee:	2e01      	cmp	r6, #1
 80090f0:	d10b      	bne.n	800910a <__gethex+0x282>
 80090f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090f6:	9a02      	ldr	r2, [sp, #8]
 80090f8:	2562      	movs	r5, #98	@ 0x62
 80090fa:	6013      	str	r3, [r2, #0]
 80090fc:	2301      	movs	r3, #1
 80090fe:	6123      	str	r3, [r4, #16]
 8009100:	f8ca 3000 	str.w	r3, [sl]
 8009104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009106:	601c      	str	r4, [r3, #0]
 8009108:	e73a      	b.n	8008f80 <__gethex+0xf8>
 800910a:	4620      	mov	r0, r4
 800910c:	1e71      	subs	r1, r6, #1
 800910e:	f7fe fb6e 	bl	80077ee <__any_on>
 8009112:	2800      	cmp	r0, #0
 8009114:	d1ed      	bne.n	80090f2 <__gethex+0x26a>
 8009116:	4621      	mov	r1, r4
 8009118:	9801      	ldr	r0, [sp, #4]
 800911a:	f7fd ff23 	bl	8006f64 <_Bfree>
 800911e:	2300      	movs	r3, #0
 8009120:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009122:	2550      	movs	r5, #80	@ 0x50
 8009124:	6013      	str	r3, [r2, #0]
 8009126:	e72b      	b.n	8008f80 <__gethex+0xf8>
 8009128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1f3      	bne.n	8009116 <__gethex+0x28e>
 800912e:	e7e0      	b.n	80090f2 <__gethex+0x26a>
 8009130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1dd      	bne.n	80090f2 <__gethex+0x26a>
 8009136:	e7ee      	b.n	8009116 <__gethex+0x28e>
 8009138:	08009ce8 	.word	0x08009ce8
 800913c:	08009b7f 	.word	0x08009b7f
 8009140:	08009e96 	.word	0x08009e96
 8009144:	1e6f      	subs	r7, r5, #1
 8009146:	f1b9 0f00 	cmp.w	r9, #0
 800914a:	d130      	bne.n	80091ae <__gethex+0x326>
 800914c:	b127      	cbz	r7, 8009158 <__gethex+0x2d0>
 800914e:	4639      	mov	r1, r7
 8009150:	4620      	mov	r0, r4
 8009152:	f7fe fb4c 	bl	80077ee <__any_on>
 8009156:	4681      	mov	r9, r0
 8009158:	2301      	movs	r3, #1
 800915a:	4629      	mov	r1, r5
 800915c:	1b76      	subs	r6, r6, r5
 800915e:	2502      	movs	r5, #2
 8009160:	117a      	asrs	r2, r7, #5
 8009162:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009166:	f007 071f 	and.w	r7, r7, #31
 800916a:	40bb      	lsls	r3, r7
 800916c:	4213      	tst	r3, r2
 800916e:	4620      	mov	r0, r4
 8009170:	bf18      	it	ne
 8009172:	f049 0902 	orrne.w	r9, r9, #2
 8009176:	f7ff fe1f 	bl	8008db8 <rshift>
 800917a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800917e:	f1b9 0f00 	cmp.w	r9, #0
 8009182:	d047      	beq.n	8009214 <__gethex+0x38c>
 8009184:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009188:	2b02      	cmp	r3, #2
 800918a:	d015      	beq.n	80091b8 <__gethex+0x330>
 800918c:	2b03      	cmp	r3, #3
 800918e:	d017      	beq.n	80091c0 <__gethex+0x338>
 8009190:	2b01      	cmp	r3, #1
 8009192:	d109      	bne.n	80091a8 <__gethex+0x320>
 8009194:	f019 0f02 	tst.w	r9, #2
 8009198:	d006      	beq.n	80091a8 <__gethex+0x320>
 800919a:	f8da 3000 	ldr.w	r3, [sl]
 800919e:	ea49 0903 	orr.w	r9, r9, r3
 80091a2:	f019 0f01 	tst.w	r9, #1
 80091a6:	d10e      	bne.n	80091c6 <__gethex+0x33e>
 80091a8:	f045 0510 	orr.w	r5, r5, #16
 80091ac:	e032      	b.n	8009214 <__gethex+0x38c>
 80091ae:	f04f 0901 	mov.w	r9, #1
 80091b2:	e7d1      	b.n	8009158 <__gethex+0x2d0>
 80091b4:	2501      	movs	r5, #1
 80091b6:	e7e2      	b.n	800917e <__gethex+0x2f6>
 80091b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ba:	f1c3 0301 	rsb	r3, r3, #1
 80091be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0f0      	beq.n	80091a8 <__gethex+0x320>
 80091c6:	f04f 0c00 	mov.w	ip, #0
 80091ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091ce:	f104 0314 	add.w	r3, r4, #20
 80091d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091da:	4618      	mov	r0, r3
 80091dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091e4:	d01b      	beq.n	800921e <__gethex+0x396>
 80091e6:	3201      	adds	r2, #1
 80091e8:	6002      	str	r2, [r0, #0]
 80091ea:	2d02      	cmp	r5, #2
 80091ec:	f104 0314 	add.w	r3, r4, #20
 80091f0:	d13c      	bne.n	800926c <__gethex+0x3e4>
 80091f2:	f8d8 2000 	ldr.w	r2, [r8]
 80091f6:	3a01      	subs	r2, #1
 80091f8:	42b2      	cmp	r2, r6
 80091fa:	d109      	bne.n	8009210 <__gethex+0x388>
 80091fc:	2201      	movs	r2, #1
 80091fe:	1171      	asrs	r1, r6, #5
 8009200:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009204:	f006 061f 	and.w	r6, r6, #31
 8009208:	fa02 f606 	lsl.w	r6, r2, r6
 800920c:	421e      	tst	r6, r3
 800920e:	d13a      	bne.n	8009286 <__gethex+0x3fe>
 8009210:	f045 0520 	orr.w	r5, r5, #32
 8009214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009216:	601c      	str	r4, [r3, #0]
 8009218:	9b02      	ldr	r3, [sp, #8]
 800921a:	601f      	str	r7, [r3, #0]
 800921c:	e6b0      	b.n	8008f80 <__gethex+0xf8>
 800921e:	4299      	cmp	r1, r3
 8009220:	f843 cc04 	str.w	ip, [r3, #-4]
 8009224:	d8d9      	bhi.n	80091da <__gethex+0x352>
 8009226:	68a3      	ldr	r3, [r4, #8]
 8009228:	459b      	cmp	fp, r3
 800922a:	db17      	blt.n	800925c <__gethex+0x3d4>
 800922c:	6861      	ldr	r1, [r4, #4]
 800922e:	9801      	ldr	r0, [sp, #4]
 8009230:	3101      	adds	r1, #1
 8009232:	f7fd fe57 	bl	8006ee4 <_Balloc>
 8009236:	4681      	mov	r9, r0
 8009238:	b918      	cbnz	r0, 8009242 <__gethex+0x3ba>
 800923a:	4602      	mov	r2, r0
 800923c:	2184      	movs	r1, #132	@ 0x84
 800923e:	4b19      	ldr	r3, [pc, #100]	@ (80092a4 <__gethex+0x41c>)
 8009240:	e6c5      	b.n	8008fce <__gethex+0x146>
 8009242:	6922      	ldr	r2, [r4, #16]
 8009244:	f104 010c 	add.w	r1, r4, #12
 8009248:	3202      	adds	r2, #2
 800924a:	0092      	lsls	r2, r2, #2
 800924c:	300c      	adds	r0, #12
 800924e:	f7ff fd6d 	bl	8008d2c <memcpy>
 8009252:	4621      	mov	r1, r4
 8009254:	9801      	ldr	r0, [sp, #4]
 8009256:	f7fd fe85 	bl	8006f64 <_Bfree>
 800925a:	464c      	mov	r4, r9
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	6122      	str	r2, [r4, #16]
 8009262:	2201      	movs	r2, #1
 8009264:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009268:	615a      	str	r2, [r3, #20]
 800926a:	e7be      	b.n	80091ea <__gethex+0x362>
 800926c:	6922      	ldr	r2, [r4, #16]
 800926e:	455a      	cmp	r2, fp
 8009270:	dd0b      	ble.n	800928a <__gethex+0x402>
 8009272:	2101      	movs	r1, #1
 8009274:	4620      	mov	r0, r4
 8009276:	f7ff fd9f 	bl	8008db8 <rshift>
 800927a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800927e:	3701      	adds	r7, #1
 8009280:	42bb      	cmp	r3, r7
 8009282:	f6ff aee0 	blt.w	8009046 <__gethex+0x1be>
 8009286:	2501      	movs	r5, #1
 8009288:	e7c2      	b.n	8009210 <__gethex+0x388>
 800928a:	f016 061f 	ands.w	r6, r6, #31
 800928e:	d0fa      	beq.n	8009286 <__gethex+0x3fe>
 8009290:	4453      	add	r3, sl
 8009292:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009296:	f7fd ff17 	bl	80070c8 <__hi0bits>
 800929a:	f1c6 0620 	rsb	r6, r6, #32
 800929e:	42b0      	cmp	r0, r6
 80092a0:	dbe7      	blt.n	8009272 <__gethex+0x3ea>
 80092a2:	e7f0      	b.n	8009286 <__gethex+0x3fe>
 80092a4:	08009b7f 	.word	0x08009b7f

080092a8 <L_shift>:
 80092a8:	f1c2 0208 	rsb	r2, r2, #8
 80092ac:	0092      	lsls	r2, r2, #2
 80092ae:	b570      	push	{r4, r5, r6, lr}
 80092b0:	f1c2 0620 	rsb	r6, r2, #32
 80092b4:	6843      	ldr	r3, [r0, #4]
 80092b6:	6804      	ldr	r4, [r0, #0]
 80092b8:	fa03 f506 	lsl.w	r5, r3, r6
 80092bc:	432c      	orrs	r4, r5
 80092be:	40d3      	lsrs	r3, r2
 80092c0:	6004      	str	r4, [r0, #0]
 80092c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80092c6:	4288      	cmp	r0, r1
 80092c8:	d3f4      	bcc.n	80092b4 <L_shift+0xc>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}

080092cc <__match>:
 80092cc:	b530      	push	{r4, r5, lr}
 80092ce:	6803      	ldr	r3, [r0, #0]
 80092d0:	3301      	adds	r3, #1
 80092d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092d6:	b914      	cbnz	r4, 80092de <__match+0x12>
 80092d8:	6003      	str	r3, [r0, #0]
 80092da:	2001      	movs	r0, #1
 80092dc:	bd30      	pop	{r4, r5, pc}
 80092de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80092e6:	2d19      	cmp	r5, #25
 80092e8:	bf98      	it	ls
 80092ea:	3220      	addls	r2, #32
 80092ec:	42a2      	cmp	r2, r4
 80092ee:	d0f0      	beq.n	80092d2 <__match+0x6>
 80092f0:	2000      	movs	r0, #0
 80092f2:	e7f3      	b.n	80092dc <__match+0x10>

080092f4 <__hexnan>:
 80092f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f8:	2500      	movs	r5, #0
 80092fa:	680b      	ldr	r3, [r1, #0]
 80092fc:	4682      	mov	sl, r0
 80092fe:	115e      	asrs	r6, r3, #5
 8009300:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009304:	f013 031f 	ands.w	r3, r3, #31
 8009308:	bf18      	it	ne
 800930a:	3604      	addne	r6, #4
 800930c:	1f37      	subs	r7, r6, #4
 800930e:	4690      	mov	r8, r2
 8009310:	46b9      	mov	r9, r7
 8009312:	463c      	mov	r4, r7
 8009314:	46ab      	mov	fp, r5
 8009316:	b087      	sub	sp, #28
 8009318:	6801      	ldr	r1, [r0, #0]
 800931a:	9301      	str	r3, [sp, #4]
 800931c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009320:	9502      	str	r5, [sp, #8]
 8009322:	784a      	ldrb	r2, [r1, #1]
 8009324:	1c4b      	adds	r3, r1, #1
 8009326:	9303      	str	r3, [sp, #12]
 8009328:	b342      	cbz	r2, 800937c <__hexnan+0x88>
 800932a:	4610      	mov	r0, r2
 800932c:	9105      	str	r1, [sp, #20]
 800932e:	9204      	str	r2, [sp, #16]
 8009330:	f7ff fd95 	bl	8008e5e <__hexdig_fun>
 8009334:	2800      	cmp	r0, #0
 8009336:	d151      	bne.n	80093dc <__hexnan+0xe8>
 8009338:	9a04      	ldr	r2, [sp, #16]
 800933a:	9905      	ldr	r1, [sp, #20]
 800933c:	2a20      	cmp	r2, #32
 800933e:	d818      	bhi.n	8009372 <__hexnan+0x7e>
 8009340:	9b02      	ldr	r3, [sp, #8]
 8009342:	459b      	cmp	fp, r3
 8009344:	dd13      	ble.n	800936e <__hexnan+0x7a>
 8009346:	454c      	cmp	r4, r9
 8009348:	d206      	bcs.n	8009358 <__hexnan+0x64>
 800934a:	2d07      	cmp	r5, #7
 800934c:	dc04      	bgt.n	8009358 <__hexnan+0x64>
 800934e:	462a      	mov	r2, r5
 8009350:	4649      	mov	r1, r9
 8009352:	4620      	mov	r0, r4
 8009354:	f7ff ffa8 	bl	80092a8 <L_shift>
 8009358:	4544      	cmp	r4, r8
 800935a:	d952      	bls.n	8009402 <__hexnan+0x10e>
 800935c:	2300      	movs	r3, #0
 800935e:	f1a4 0904 	sub.w	r9, r4, #4
 8009362:	f844 3c04 	str.w	r3, [r4, #-4]
 8009366:	461d      	mov	r5, r3
 8009368:	464c      	mov	r4, r9
 800936a:	f8cd b008 	str.w	fp, [sp, #8]
 800936e:	9903      	ldr	r1, [sp, #12]
 8009370:	e7d7      	b.n	8009322 <__hexnan+0x2e>
 8009372:	2a29      	cmp	r2, #41	@ 0x29
 8009374:	d157      	bne.n	8009426 <__hexnan+0x132>
 8009376:	3102      	adds	r1, #2
 8009378:	f8ca 1000 	str.w	r1, [sl]
 800937c:	f1bb 0f00 	cmp.w	fp, #0
 8009380:	d051      	beq.n	8009426 <__hexnan+0x132>
 8009382:	454c      	cmp	r4, r9
 8009384:	d206      	bcs.n	8009394 <__hexnan+0xa0>
 8009386:	2d07      	cmp	r5, #7
 8009388:	dc04      	bgt.n	8009394 <__hexnan+0xa0>
 800938a:	462a      	mov	r2, r5
 800938c:	4649      	mov	r1, r9
 800938e:	4620      	mov	r0, r4
 8009390:	f7ff ff8a 	bl	80092a8 <L_shift>
 8009394:	4544      	cmp	r4, r8
 8009396:	d936      	bls.n	8009406 <__hexnan+0x112>
 8009398:	4623      	mov	r3, r4
 800939a:	f1a8 0204 	sub.w	r2, r8, #4
 800939e:	f853 1b04 	ldr.w	r1, [r3], #4
 80093a2:	429f      	cmp	r7, r3
 80093a4:	f842 1f04 	str.w	r1, [r2, #4]!
 80093a8:	d2f9      	bcs.n	800939e <__hexnan+0xaa>
 80093aa:	1b3b      	subs	r3, r7, r4
 80093ac:	f023 0303 	bic.w	r3, r3, #3
 80093b0:	3304      	adds	r3, #4
 80093b2:	3401      	adds	r4, #1
 80093b4:	3e03      	subs	r6, #3
 80093b6:	42b4      	cmp	r4, r6
 80093b8:	bf88      	it	hi
 80093ba:	2304      	movhi	r3, #4
 80093bc:	2200      	movs	r2, #0
 80093be:	4443      	add	r3, r8
 80093c0:	f843 2b04 	str.w	r2, [r3], #4
 80093c4:	429f      	cmp	r7, r3
 80093c6:	d2fb      	bcs.n	80093c0 <__hexnan+0xcc>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	b91b      	cbnz	r3, 80093d4 <__hexnan+0xe0>
 80093cc:	4547      	cmp	r7, r8
 80093ce:	d128      	bne.n	8009422 <__hexnan+0x12e>
 80093d0:	2301      	movs	r3, #1
 80093d2:	603b      	str	r3, [r7, #0]
 80093d4:	2005      	movs	r0, #5
 80093d6:	b007      	add	sp, #28
 80093d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093dc:	3501      	adds	r5, #1
 80093de:	2d08      	cmp	r5, #8
 80093e0:	f10b 0b01 	add.w	fp, fp, #1
 80093e4:	dd06      	ble.n	80093f4 <__hexnan+0x100>
 80093e6:	4544      	cmp	r4, r8
 80093e8:	d9c1      	bls.n	800936e <__hexnan+0x7a>
 80093ea:	2300      	movs	r3, #0
 80093ec:	2501      	movs	r5, #1
 80093ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80093f2:	3c04      	subs	r4, #4
 80093f4:	6822      	ldr	r2, [r4, #0]
 80093f6:	f000 000f 	and.w	r0, r0, #15
 80093fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80093fe:	6020      	str	r0, [r4, #0]
 8009400:	e7b5      	b.n	800936e <__hexnan+0x7a>
 8009402:	2508      	movs	r5, #8
 8009404:	e7b3      	b.n	800936e <__hexnan+0x7a>
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0dd      	beq.n	80093c8 <__hexnan+0xd4>
 800940c:	f04f 32ff 	mov.w	r2, #4294967295
 8009410:	f1c3 0320 	rsb	r3, r3, #32
 8009414:	40da      	lsrs	r2, r3
 8009416:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800941a:	4013      	ands	r3, r2
 800941c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009420:	e7d2      	b.n	80093c8 <__hexnan+0xd4>
 8009422:	3f04      	subs	r7, #4
 8009424:	e7d0      	b.n	80093c8 <__hexnan+0xd4>
 8009426:	2004      	movs	r0, #4
 8009428:	e7d5      	b.n	80093d6 <__hexnan+0xe2>

0800942a <__ascii_mbtowc>:
 800942a:	b082      	sub	sp, #8
 800942c:	b901      	cbnz	r1, 8009430 <__ascii_mbtowc+0x6>
 800942e:	a901      	add	r1, sp, #4
 8009430:	b142      	cbz	r2, 8009444 <__ascii_mbtowc+0x1a>
 8009432:	b14b      	cbz	r3, 8009448 <__ascii_mbtowc+0x1e>
 8009434:	7813      	ldrb	r3, [r2, #0]
 8009436:	600b      	str	r3, [r1, #0]
 8009438:	7812      	ldrb	r2, [r2, #0]
 800943a:	1e10      	subs	r0, r2, #0
 800943c:	bf18      	it	ne
 800943e:	2001      	movne	r0, #1
 8009440:	b002      	add	sp, #8
 8009442:	4770      	bx	lr
 8009444:	4610      	mov	r0, r2
 8009446:	e7fb      	b.n	8009440 <__ascii_mbtowc+0x16>
 8009448:	f06f 0001 	mvn.w	r0, #1
 800944c:	e7f8      	b.n	8009440 <__ascii_mbtowc+0x16>

0800944e <_realloc_r>:
 800944e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009452:	4680      	mov	r8, r0
 8009454:	4615      	mov	r5, r2
 8009456:	460c      	mov	r4, r1
 8009458:	b921      	cbnz	r1, 8009464 <_realloc_r+0x16>
 800945a:	4611      	mov	r1, r2
 800945c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009460:	f7fd bcb4 	b.w	8006dcc <_malloc_r>
 8009464:	b92a      	cbnz	r2, 8009472 <_realloc_r+0x24>
 8009466:	f7fd fc3f 	bl	8006ce8 <_free_r>
 800946a:	2400      	movs	r4, #0
 800946c:	4620      	mov	r0, r4
 800946e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009472:	f000 f840 	bl	80094f6 <_malloc_usable_size_r>
 8009476:	4285      	cmp	r5, r0
 8009478:	4606      	mov	r6, r0
 800947a:	d802      	bhi.n	8009482 <_realloc_r+0x34>
 800947c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009480:	d8f4      	bhi.n	800946c <_realloc_r+0x1e>
 8009482:	4629      	mov	r1, r5
 8009484:	4640      	mov	r0, r8
 8009486:	f7fd fca1 	bl	8006dcc <_malloc_r>
 800948a:	4607      	mov	r7, r0
 800948c:	2800      	cmp	r0, #0
 800948e:	d0ec      	beq.n	800946a <_realloc_r+0x1c>
 8009490:	42b5      	cmp	r5, r6
 8009492:	462a      	mov	r2, r5
 8009494:	4621      	mov	r1, r4
 8009496:	bf28      	it	cs
 8009498:	4632      	movcs	r2, r6
 800949a:	f7ff fc47 	bl	8008d2c <memcpy>
 800949e:	4621      	mov	r1, r4
 80094a0:	4640      	mov	r0, r8
 80094a2:	f7fd fc21 	bl	8006ce8 <_free_r>
 80094a6:	463c      	mov	r4, r7
 80094a8:	e7e0      	b.n	800946c <_realloc_r+0x1e>

080094aa <__ascii_wctomb>:
 80094aa:	4603      	mov	r3, r0
 80094ac:	4608      	mov	r0, r1
 80094ae:	b141      	cbz	r1, 80094c2 <__ascii_wctomb+0x18>
 80094b0:	2aff      	cmp	r2, #255	@ 0xff
 80094b2:	d904      	bls.n	80094be <__ascii_wctomb+0x14>
 80094b4:	228a      	movs	r2, #138	@ 0x8a
 80094b6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	4770      	bx	lr
 80094be:	2001      	movs	r0, #1
 80094c0:	700a      	strb	r2, [r1, #0]
 80094c2:	4770      	bx	lr

080094c4 <fiprintf>:
 80094c4:	b40e      	push	{r1, r2, r3}
 80094c6:	b503      	push	{r0, r1, lr}
 80094c8:	4601      	mov	r1, r0
 80094ca:	ab03      	add	r3, sp, #12
 80094cc:	4805      	ldr	r0, [pc, #20]	@ (80094e4 <fiprintf+0x20>)
 80094ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d2:	6800      	ldr	r0, [r0, #0]
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	f7ff f9a9 	bl	800882c <_vfiprintf_r>
 80094da:	b002      	add	sp, #8
 80094dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e0:	b003      	add	sp, #12
 80094e2:	4770      	bx	lr
 80094e4:	20000034 	.word	0x20000034

080094e8 <abort>:
 80094e8:	2006      	movs	r0, #6
 80094ea:	b508      	push	{r3, lr}
 80094ec:	f000 f834 	bl	8009558 <raise>
 80094f0:	2001      	movs	r0, #1
 80094f2:	f7f9 fa26 	bl	8002942 <_exit>

080094f6 <_malloc_usable_size_r>:
 80094f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094fa:	1f18      	subs	r0, r3, #4
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bfbc      	itt	lt
 8009500:	580b      	ldrlt	r3, [r1, r0]
 8009502:	18c0      	addlt	r0, r0, r3
 8009504:	4770      	bx	lr

08009506 <_raise_r>:
 8009506:	291f      	cmp	r1, #31
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4605      	mov	r5, r0
 800950c:	460c      	mov	r4, r1
 800950e:	d904      	bls.n	800951a <_raise_r+0x14>
 8009510:	2316      	movs	r3, #22
 8009512:	6003      	str	r3, [r0, #0]
 8009514:	f04f 30ff 	mov.w	r0, #4294967295
 8009518:	bd38      	pop	{r3, r4, r5, pc}
 800951a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800951c:	b112      	cbz	r2, 8009524 <_raise_r+0x1e>
 800951e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009522:	b94b      	cbnz	r3, 8009538 <_raise_r+0x32>
 8009524:	4628      	mov	r0, r5
 8009526:	f000 f831 	bl	800958c <_getpid_r>
 800952a:	4622      	mov	r2, r4
 800952c:	4601      	mov	r1, r0
 800952e:	4628      	mov	r0, r5
 8009530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009534:	f000 b818 	b.w	8009568 <_kill_r>
 8009538:	2b01      	cmp	r3, #1
 800953a:	d00a      	beq.n	8009552 <_raise_r+0x4c>
 800953c:	1c59      	adds	r1, r3, #1
 800953e:	d103      	bne.n	8009548 <_raise_r+0x42>
 8009540:	2316      	movs	r3, #22
 8009542:	6003      	str	r3, [r0, #0]
 8009544:	2001      	movs	r0, #1
 8009546:	e7e7      	b.n	8009518 <_raise_r+0x12>
 8009548:	2100      	movs	r1, #0
 800954a:	4620      	mov	r0, r4
 800954c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009550:	4798      	blx	r3
 8009552:	2000      	movs	r0, #0
 8009554:	e7e0      	b.n	8009518 <_raise_r+0x12>
	...

08009558 <raise>:
 8009558:	4b02      	ldr	r3, [pc, #8]	@ (8009564 <raise+0xc>)
 800955a:	4601      	mov	r1, r0
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	f7ff bfd2 	b.w	8009506 <_raise_r>
 8009562:	bf00      	nop
 8009564:	20000034 	.word	0x20000034

08009568 <_kill_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	2300      	movs	r3, #0
 800956c:	4d06      	ldr	r5, [pc, #24]	@ (8009588 <_kill_r+0x20>)
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	4611      	mov	r1, r2
 8009574:	602b      	str	r3, [r5, #0]
 8009576:	f7f9 f9d4 	bl	8002922 <_kill>
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	d102      	bne.n	8009584 <_kill_r+0x1c>
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	b103      	cbz	r3, 8009584 <_kill_r+0x1c>
 8009582:	6023      	str	r3, [r4, #0]
 8009584:	bd38      	pop	{r3, r4, r5, pc}
 8009586:	bf00      	nop
 8009588:	20000458 	.word	0x20000458

0800958c <_getpid_r>:
 800958c:	f7f9 b9c2 	b.w	8002914 <_getpid>

08009590 <atan2f>:
 8009590:	f000 b88a 	b.w	80096a8 <__ieee754_atan2f>

08009594 <sqrtf>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4605      	mov	r5, r0
 8009598:	f000 f816 	bl	80095c8 <__ieee754_sqrtf>
 800959c:	4629      	mov	r1, r5
 800959e:	4604      	mov	r4, r0
 80095a0:	4628      	mov	r0, r5
 80095a2:	f7f7 fdb5 	bl	8001110 <__aeabi_fcmpun>
 80095a6:	b968      	cbnz	r0, 80095c4 <sqrtf+0x30>
 80095a8:	2100      	movs	r1, #0
 80095aa:	4628      	mov	r0, r5
 80095ac:	f7f7 fd88 	bl	80010c0 <__aeabi_fcmplt>
 80095b0:	b140      	cbz	r0, 80095c4 <sqrtf+0x30>
 80095b2:	f7fc fd09 	bl	8005fc8 <__errno>
 80095b6:	2321      	movs	r3, #33	@ 0x21
 80095b8:	2100      	movs	r1, #0
 80095ba:	6003      	str	r3, [r0, #0]
 80095bc:	4608      	mov	r0, r1
 80095be:	f7f7 fc95 	bl	8000eec <__aeabi_fdiv>
 80095c2:	4604      	mov	r4, r0
 80095c4:	4620      	mov	r0, r4
 80095c6:	bd38      	pop	{r3, r4, r5, pc}

080095c8 <__ieee754_sqrtf>:
 80095c8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80095cc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80095d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d4:	4603      	mov	r3, r0
 80095d6:	4604      	mov	r4, r0
 80095d8:	d30a      	bcc.n	80095f0 <__ieee754_sqrtf+0x28>
 80095da:	4601      	mov	r1, r0
 80095dc:	f7f7 fbd2 	bl	8000d84 <__aeabi_fmul>
 80095e0:	4601      	mov	r1, r0
 80095e2:	4620      	mov	r0, r4
 80095e4:	f7f7 fac6 	bl	8000b74 <__addsf3>
 80095e8:	4604      	mov	r4, r0
 80095ea:	4620      	mov	r0, r4
 80095ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f0:	2a00      	cmp	r2, #0
 80095f2:	d0fa      	beq.n	80095ea <__ieee754_sqrtf+0x22>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	da06      	bge.n	8009606 <__ieee754_sqrtf+0x3e>
 80095f8:	4601      	mov	r1, r0
 80095fa:	f7f7 fab9 	bl	8000b70 <__aeabi_fsub>
 80095fe:	4601      	mov	r1, r0
 8009600:	f7f7 fc74 	bl	8000eec <__aeabi_fdiv>
 8009604:	e7f0      	b.n	80095e8 <__ieee754_sqrtf+0x20>
 8009606:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800960a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800960e:	d03e      	beq.n	800968e <__ieee754_sqrtf+0xc6>
 8009610:	2400      	movs	r4, #0
 8009612:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8009616:	07ca      	lsls	r2, r1, #31
 8009618:	f04f 0019 	mov.w	r0, #25
 800961c:	4626      	mov	r6, r4
 800961e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8009622:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009626:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800962a:	bf58      	it	pl
 800962c:	005b      	lslpl	r3, r3, #1
 800962e:	106d      	asrs	r5, r5, #1
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	1872      	adds	r2, r6, r1
 8009634:	429a      	cmp	r2, r3
 8009636:	bfcf      	iteee	gt
 8009638:	461a      	movgt	r2, r3
 800963a:	1856      	addle	r6, r2, r1
 800963c:	1864      	addle	r4, r4, r1
 800963e:	1a9a      	suble	r2, r3, r2
 8009640:	3801      	subs	r0, #1
 8009642:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8009646:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800964a:	d1f2      	bne.n	8009632 <__ieee754_sqrtf+0x6a>
 800964c:	b1ba      	cbz	r2, 800967e <__ieee754_sqrtf+0xb6>
 800964e:	4e14      	ldr	r6, [pc, #80]	@ (80096a0 <__ieee754_sqrtf+0xd8>)
 8009650:	4f14      	ldr	r7, [pc, #80]	@ (80096a4 <__ieee754_sqrtf+0xdc>)
 8009652:	6830      	ldr	r0, [r6, #0]
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	f7f7 fa8b 	bl	8000b70 <__aeabi_fsub>
 800965a:	f8d6 8000 	ldr.w	r8, [r6]
 800965e:	4601      	mov	r1, r0
 8009660:	4640      	mov	r0, r8
 8009662:	f7f7 fd37 	bl	80010d4 <__aeabi_fcmple>
 8009666:	b150      	cbz	r0, 800967e <__ieee754_sqrtf+0xb6>
 8009668:	6830      	ldr	r0, [r6, #0]
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	f7f7 fa82 	bl	8000b74 <__addsf3>
 8009670:	6836      	ldr	r6, [r6, #0]
 8009672:	4601      	mov	r1, r0
 8009674:	4630      	mov	r0, r6
 8009676:	f7f7 fd23 	bl	80010c0 <__aeabi_fcmplt>
 800967a:	b168      	cbz	r0, 8009698 <__ieee754_sqrtf+0xd0>
 800967c:	3402      	adds	r4, #2
 800967e:	1064      	asrs	r4, r4, #1
 8009680:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8009684:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8009688:	e7af      	b.n	80095ea <__ieee754_sqrtf+0x22>
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	3201      	adds	r2, #1
 800968e:	0218      	lsls	r0, r3, #8
 8009690:	d5fb      	bpl.n	800968a <__ieee754_sqrtf+0xc2>
 8009692:	3a01      	subs	r2, #1
 8009694:	1a89      	subs	r1, r1, r2
 8009696:	e7bb      	b.n	8009610 <__ieee754_sqrtf+0x48>
 8009698:	3401      	adds	r4, #1
 800969a:	f024 0401 	bic.w	r4, r4, #1
 800969e:	e7ee      	b.n	800967e <__ieee754_sqrtf+0xb6>
 80096a0:	200001f4 	.word	0x200001f4
 80096a4:	200001f0 	.word	0x200001f0

080096a8 <__ieee754_atan2f>:
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096aa:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80096ae:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80096b2:	4603      	mov	r3, r0
 80096b4:	d805      	bhi.n	80096c2 <__ieee754_atan2f+0x1a>
 80096b6:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80096ba:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80096be:	4607      	mov	r7, r0
 80096c0:	d904      	bls.n	80096cc <__ieee754_atan2f+0x24>
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7f7 fa56 	bl	8000b74 <__addsf3>
 80096c8:	4603      	mov	r3, r0
 80096ca:	e010      	b.n	80096ee <__ieee754_atan2f+0x46>
 80096cc:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 80096d0:	d103      	bne.n	80096da <__ieee754_atan2f+0x32>
 80096d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096d6:	f000 b86f 	b.w	80097b8 <atanf>
 80096da:	178c      	asrs	r4, r1, #30
 80096dc:	f004 0402 	and.w	r4, r4, #2
 80096e0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80096e4:	b92a      	cbnz	r2, 80096f2 <__ieee754_atan2f+0x4a>
 80096e6:	2c02      	cmp	r4, #2
 80096e8:	d04b      	beq.n	8009782 <__ieee754_atan2f+0xda>
 80096ea:	2c03      	cmp	r4, #3
 80096ec:	d04b      	beq.n	8009786 <__ieee754_atan2f+0xde>
 80096ee:	4618      	mov	r0, r3
 80096f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f2:	b91e      	cbnz	r6, 80096fc <__ieee754_atan2f+0x54>
 80096f4:	2f00      	cmp	r7, #0
 80096f6:	da4c      	bge.n	8009792 <__ieee754_atan2f+0xea>
 80096f8:	4b27      	ldr	r3, [pc, #156]	@ (8009798 <__ieee754_atan2f+0xf0>)
 80096fa:	e7f8      	b.n	80096ee <__ieee754_atan2f+0x46>
 80096fc:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8009700:	d10e      	bne.n	8009720 <__ieee754_atan2f+0x78>
 8009702:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009706:	f104 34ff 	add.w	r4, r4, #4294967295
 800970a:	d105      	bne.n	8009718 <__ieee754_atan2f+0x70>
 800970c:	2c02      	cmp	r4, #2
 800970e:	d83c      	bhi.n	800978a <__ieee754_atan2f+0xe2>
 8009710:	4b22      	ldr	r3, [pc, #136]	@ (800979c <__ieee754_atan2f+0xf4>)
 8009712:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009716:	e7ea      	b.n	80096ee <__ieee754_atan2f+0x46>
 8009718:	2c02      	cmp	r4, #2
 800971a:	d838      	bhi.n	800978e <__ieee754_atan2f+0xe6>
 800971c:	4b20      	ldr	r3, [pc, #128]	@ (80097a0 <__ieee754_atan2f+0xf8>)
 800971e:	e7f8      	b.n	8009712 <__ieee754_atan2f+0x6a>
 8009720:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009724:	d0e6      	beq.n	80096f4 <__ieee754_atan2f+0x4c>
 8009726:	1b92      	subs	r2, r2, r6
 8009728:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800972c:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8009730:	da17      	bge.n	8009762 <__ieee754_atan2f+0xba>
 8009732:	2900      	cmp	r1, #0
 8009734:	da01      	bge.n	800973a <__ieee754_atan2f+0x92>
 8009736:	303c      	adds	r0, #60	@ 0x3c
 8009738:	db15      	blt.n	8009766 <__ieee754_atan2f+0xbe>
 800973a:	4618      	mov	r0, r3
 800973c:	f7f7 fbd6 	bl	8000eec <__aeabi_fdiv>
 8009740:	f000 f946 	bl	80099d0 <fabsf>
 8009744:	f000 f838 	bl	80097b8 <atanf>
 8009748:	4603      	mov	r3, r0
 800974a:	2c01      	cmp	r4, #1
 800974c:	d00d      	beq.n	800976a <__ieee754_atan2f+0xc2>
 800974e:	2c02      	cmp	r4, #2
 8009750:	d00e      	beq.n	8009770 <__ieee754_atan2f+0xc8>
 8009752:	2c00      	cmp	r4, #0
 8009754:	d0cb      	beq.n	80096ee <__ieee754_atan2f+0x46>
 8009756:	4913      	ldr	r1, [pc, #76]	@ (80097a4 <__ieee754_atan2f+0xfc>)
 8009758:	4618      	mov	r0, r3
 800975a:	f7f7 fa0b 	bl	8000b74 <__addsf3>
 800975e:	4912      	ldr	r1, [pc, #72]	@ (80097a8 <__ieee754_atan2f+0x100>)
 8009760:	e00c      	b.n	800977c <__ieee754_atan2f+0xd4>
 8009762:	4b12      	ldr	r3, [pc, #72]	@ (80097ac <__ieee754_atan2f+0x104>)
 8009764:	e7f1      	b.n	800974a <__ieee754_atan2f+0xa2>
 8009766:	2300      	movs	r3, #0
 8009768:	e7ef      	b.n	800974a <__ieee754_atan2f+0xa2>
 800976a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800976e:	e7be      	b.n	80096ee <__ieee754_atan2f+0x46>
 8009770:	490c      	ldr	r1, [pc, #48]	@ (80097a4 <__ieee754_atan2f+0xfc>)
 8009772:	4618      	mov	r0, r3
 8009774:	f7f7 f9fe 	bl	8000b74 <__addsf3>
 8009778:	4601      	mov	r1, r0
 800977a:	480b      	ldr	r0, [pc, #44]	@ (80097a8 <__ieee754_atan2f+0x100>)
 800977c:	f7f7 f9f8 	bl	8000b70 <__aeabi_fsub>
 8009780:	e7a2      	b.n	80096c8 <__ieee754_atan2f+0x20>
 8009782:	4b09      	ldr	r3, [pc, #36]	@ (80097a8 <__ieee754_atan2f+0x100>)
 8009784:	e7b3      	b.n	80096ee <__ieee754_atan2f+0x46>
 8009786:	4b0a      	ldr	r3, [pc, #40]	@ (80097b0 <__ieee754_atan2f+0x108>)
 8009788:	e7b1      	b.n	80096ee <__ieee754_atan2f+0x46>
 800978a:	4b0a      	ldr	r3, [pc, #40]	@ (80097b4 <__ieee754_atan2f+0x10c>)
 800978c:	e7af      	b.n	80096ee <__ieee754_atan2f+0x46>
 800978e:	2300      	movs	r3, #0
 8009790:	e7ad      	b.n	80096ee <__ieee754_atan2f+0x46>
 8009792:	4b06      	ldr	r3, [pc, #24]	@ (80097ac <__ieee754_atan2f+0x104>)
 8009794:	e7ab      	b.n	80096ee <__ieee754_atan2f+0x46>
 8009796:	bf00      	nop
 8009798:	bfc90fdb 	.word	0xbfc90fdb
 800979c:	08009f04 	.word	0x08009f04
 80097a0:	08009ef8 	.word	0x08009ef8
 80097a4:	33bbbd2e 	.word	0x33bbbd2e
 80097a8:	40490fdb 	.word	0x40490fdb
 80097ac:	3fc90fdb 	.word	0x3fc90fdb
 80097b0:	c0490fdb 	.word	0xc0490fdb
 80097b4:	3f490fdb 	.word	0x3f490fdb

080097b8 <atanf>:
 80097b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097bc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80097c0:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 80097c4:	4604      	mov	r4, r0
 80097c6:	4680      	mov	r8, r0
 80097c8:	d30e      	bcc.n	80097e8 <atanf+0x30>
 80097ca:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80097ce:	d904      	bls.n	80097da <atanf+0x22>
 80097d0:	4601      	mov	r1, r0
 80097d2:	f7f7 f9cf 	bl	8000b74 <__addsf3>
 80097d6:	4604      	mov	r4, r0
 80097d8:	e003      	b.n	80097e2 <atanf+0x2a>
 80097da:	2800      	cmp	r0, #0
 80097dc:	f340 80ce 	ble.w	800997c <atanf+0x1c4>
 80097e0:	4c67      	ldr	r4, [pc, #412]	@ (8009980 <atanf+0x1c8>)
 80097e2:	4620      	mov	r0, r4
 80097e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e8:	4b66      	ldr	r3, [pc, #408]	@ (8009984 <atanf+0x1cc>)
 80097ea:	429d      	cmp	r5, r3
 80097ec:	d80e      	bhi.n	800980c <atanf+0x54>
 80097ee:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 80097f2:	d208      	bcs.n	8009806 <atanf+0x4e>
 80097f4:	4964      	ldr	r1, [pc, #400]	@ (8009988 <atanf+0x1d0>)
 80097f6:	f7f7 f9bd 	bl	8000b74 <__addsf3>
 80097fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80097fe:	f7f7 fc7d 	bl	80010fc <__aeabi_fcmpgt>
 8009802:	2800      	cmp	r0, #0
 8009804:	d1ed      	bne.n	80097e2 <atanf+0x2a>
 8009806:	f04f 36ff 	mov.w	r6, #4294967295
 800980a:	e01c      	b.n	8009846 <atanf+0x8e>
 800980c:	f000 f8e0 	bl	80099d0 <fabsf>
 8009810:	4b5e      	ldr	r3, [pc, #376]	@ (800998c <atanf+0x1d4>)
 8009812:	4604      	mov	r4, r0
 8009814:	429d      	cmp	r5, r3
 8009816:	d87c      	bhi.n	8009912 <atanf+0x15a>
 8009818:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800981c:	429d      	cmp	r5, r3
 800981e:	d867      	bhi.n	80098f0 <atanf+0x138>
 8009820:	4601      	mov	r1, r0
 8009822:	f7f7 f9a7 	bl	8000b74 <__addsf3>
 8009826:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800982a:	f7f7 f9a1 	bl	8000b70 <__aeabi_fsub>
 800982e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8009832:	4605      	mov	r5, r0
 8009834:	4620      	mov	r0, r4
 8009836:	f7f7 f99d 	bl	8000b74 <__addsf3>
 800983a:	4601      	mov	r1, r0
 800983c:	4628      	mov	r0, r5
 800983e:	f7f7 fb55 	bl	8000eec <__aeabi_fdiv>
 8009842:	2600      	movs	r6, #0
 8009844:	4604      	mov	r4, r0
 8009846:	4621      	mov	r1, r4
 8009848:	4620      	mov	r0, r4
 800984a:	f7f7 fa9b 	bl	8000d84 <__aeabi_fmul>
 800984e:	4601      	mov	r1, r0
 8009850:	4607      	mov	r7, r0
 8009852:	f7f7 fa97 	bl	8000d84 <__aeabi_fmul>
 8009856:	4605      	mov	r5, r0
 8009858:	494d      	ldr	r1, [pc, #308]	@ (8009990 <atanf+0x1d8>)
 800985a:	f7f7 fa93 	bl	8000d84 <__aeabi_fmul>
 800985e:	494d      	ldr	r1, [pc, #308]	@ (8009994 <atanf+0x1dc>)
 8009860:	f7f7 f988 	bl	8000b74 <__addsf3>
 8009864:	4629      	mov	r1, r5
 8009866:	f7f7 fa8d 	bl	8000d84 <__aeabi_fmul>
 800986a:	494b      	ldr	r1, [pc, #300]	@ (8009998 <atanf+0x1e0>)
 800986c:	f7f7 f982 	bl	8000b74 <__addsf3>
 8009870:	4629      	mov	r1, r5
 8009872:	f7f7 fa87 	bl	8000d84 <__aeabi_fmul>
 8009876:	4949      	ldr	r1, [pc, #292]	@ (800999c <atanf+0x1e4>)
 8009878:	f7f7 f97c 	bl	8000b74 <__addsf3>
 800987c:	4629      	mov	r1, r5
 800987e:	f7f7 fa81 	bl	8000d84 <__aeabi_fmul>
 8009882:	4947      	ldr	r1, [pc, #284]	@ (80099a0 <atanf+0x1e8>)
 8009884:	f7f7 f976 	bl	8000b74 <__addsf3>
 8009888:	4629      	mov	r1, r5
 800988a:	f7f7 fa7b 	bl	8000d84 <__aeabi_fmul>
 800988e:	4945      	ldr	r1, [pc, #276]	@ (80099a4 <atanf+0x1ec>)
 8009890:	f7f7 f970 	bl	8000b74 <__addsf3>
 8009894:	4639      	mov	r1, r7
 8009896:	f7f7 fa75 	bl	8000d84 <__aeabi_fmul>
 800989a:	4943      	ldr	r1, [pc, #268]	@ (80099a8 <atanf+0x1f0>)
 800989c:	4607      	mov	r7, r0
 800989e:	4628      	mov	r0, r5
 80098a0:	f7f7 fa70 	bl	8000d84 <__aeabi_fmul>
 80098a4:	4941      	ldr	r1, [pc, #260]	@ (80099ac <atanf+0x1f4>)
 80098a6:	f7f7 f963 	bl	8000b70 <__aeabi_fsub>
 80098aa:	4629      	mov	r1, r5
 80098ac:	f7f7 fa6a 	bl	8000d84 <__aeabi_fmul>
 80098b0:	493f      	ldr	r1, [pc, #252]	@ (80099b0 <atanf+0x1f8>)
 80098b2:	f7f7 f95d 	bl	8000b70 <__aeabi_fsub>
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7f7 fa64 	bl	8000d84 <__aeabi_fmul>
 80098bc:	493d      	ldr	r1, [pc, #244]	@ (80099b4 <atanf+0x1fc>)
 80098be:	f7f7 f957 	bl	8000b70 <__aeabi_fsub>
 80098c2:	4629      	mov	r1, r5
 80098c4:	f7f7 fa5e 	bl	8000d84 <__aeabi_fmul>
 80098c8:	493b      	ldr	r1, [pc, #236]	@ (80099b8 <atanf+0x200>)
 80098ca:	f7f7 f951 	bl	8000b70 <__aeabi_fsub>
 80098ce:	4629      	mov	r1, r5
 80098d0:	f7f7 fa58 	bl	8000d84 <__aeabi_fmul>
 80098d4:	4601      	mov	r1, r0
 80098d6:	4638      	mov	r0, r7
 80098d8:	f7f7 f94c 	bl	8000b74 <__addsf3>
 80098dc:	4621      	mov	r1, r4
 80098de:	f7f7 fa51 	bl	8000d84 <__aeabi_fmul>
 80098e2:	1c73      	adds	r3, r6, #1
 80098e4:	4601      	mov	r1, r0
 80098e6:	d133      	bne.n	8009950 <atanf+0x198>
 80098e8:	4620      	mov	r0, r4
 80098ea:	f7f7 f941 	bl	8000b70 <__aeabi_fsub>
 80098ee:	e772      	b.n	80097d6 <atanf+0x1e>
 80098f0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80098f4:	f7f7 f93c 	bl	8000b70 <__aeabi_fsub>
 80098f8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80098fc:	4605      	mov	r5, r0
 80098fe:	4620      	mov	r0, r4
 8009900:	f7f7 f938 	bl	8000b74 <__addsf3>
 8009904:	4601      	mov	r1, r0
 8009906:	4628      	mov	r0, r5
 8009908:	f7f7 faf0 	bl	8000eec <__aeabi_fdiv>
 800990c:	2601      	movs	r6, #1
 800990e:	4604      	mov	r4, r0
 8009910:	e799      	b.n	8009846 <atanf+0x8e>
 8009912:	4b2a      	ldr	r3, [pc, #168]	@ (80099bc <atanf+0x204>)
 8009914:	429d      	cmp	r5, r3
 8009916:	d814      	bhi.n	8009942 <atanf+0x18a>
 8009918:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800991c:	f7f7 f928 	bl	8000b70 <__aeabi_fsub>
 8009920:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8009924:	4605      	mov	r5, r0
 8009926:	4620      	mov	r0, r4
 8009928:	f7f7 fa2c 	bl	8000d84 <__aeabi_fmul>
 800992c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009930:	f7f7 f920 	bl	8000b74 <__addsf3>
 8009934:	4601      	mov	r1, r0
 8009936:	4628      	mov	r0, r5
 8009938:	f7f7 fad8 	bl	8000eec <__aeabi_fdiv>
 800993c:	2602      	movs	r6, #2
 800993e:	4604      	mov	r4, r0
 8009940:	e781      	b.n	8009846 <atanf+0x8e>
 8009942:	4601      	mov	r1, r0
 8009944:	481e      	ldr	r0, [pc, #120]	@ (80099c0 <atanf+0x208>)
 8009946:	f7f7 fad1 	bl	8000eec <__aeabi_fdiv>
 800994a:	2603      	movs	r6, #3
 800994c:	4604      	mov	r4, r0
 800994e:	e77a      	b.n	8009846 <atanf+0x8e>
 8009950:	4b1c      	ldr	r3, [pc, #112]	@ (80099c4 <atanf+0x20c>)
 8009952:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8009956:	f7f7 f90b 	bl	8000b70 <__aeabi_fsub>
 800995a:	4621      	mov	r1, r4
 800995c:	f7f7 f908 	bl	8000b70 <__aeabi_fsub>
 8009960:	4b19      	ldr	r3, [pc, #100]	@ (80099c8 <atanf+0x210>)
 8009962:	4601      	mov	r1, r0
 8009964:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009968:	f7f7 f902 	bl	8000b70 <__aeabi_fsub>
 800996c:	f1b8 0f00 	cmp.w	r8, #0
 8009970:	4604      	mov	r4, r0
 8009972:	f6bf af36 	bge.w	80097e2 <atanf+0x2a>
 8009976:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800997a:	e732      	b.n	80097e2 <atanf+0x2a>
 800997c:	4c13      	ldr	r4, [pc, #76]	@ (80099cc <atanf+0x214>)
 800997e:	e730      	b.n	80097e2 <atanf+0x2a>
 8009980:	3fc90fdb 	.word	0x3fc90fdb
 8009984:	3edfffff 	.word	0x3edfffff
 8009988:	7149f2ca 	.word	0x7149f2ca
 800998c:	3f97ffff 	.word	0x3f97ffff
 8009990:	3c8569d7 	.word	0x3c8569d7
 8009994:	3d4bda59 	.word	0x3d4bda59
 8009998:	3d886b35 	.word	0x3d886b35
 800999c:	3dba2e6e 	.word	0x3dba2e6e
 80099a0:	3e124925 	.word	0x3e124925
 80099a4:	3eaaaaab 	.word	0x3eaaaaab
 80099a8:	bd15a221 	.word	0xbd15a221
 80099ac:	3d6ef16b 	.word	0x3d6ef16b
 80099b0:	3d9d8795 	.word	0x3d9d8795
 80099b4:	3de38e38 	.word	0x3de38e38
 80099b8:	3e4ccccd 	.word	0x3e4ccccd
 80099bc:	401bffff 	.word	0x401bffff
 80099c0:	bf800000 	.word	0xbf800000
 80099c4:	08009f10 	.word	0x08009f10
 80099c8:	08009f20 	.word	0x08009f20
 80099cc:	bfc90fdb 	.word	0xbfc90fdb

080099d0 <fabsf>:
 80099d0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80099d4:	4770      	bx	lr
	...

080099d8 <_init>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	bf00      	nop
 80099dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099de:	bc08      	pop	{r3}
 80099e0:	469e      	mov	lr, r3
 80099e2:	4770      	bx	lr

080099e4 <_fini>:
 80099e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e6:	bf00      	nop
 80099e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ea:	bc08      	pop	{r3}
 80099ec:	469e      	mov	lr, r3
 80099ee:	4770      	bx	lr
