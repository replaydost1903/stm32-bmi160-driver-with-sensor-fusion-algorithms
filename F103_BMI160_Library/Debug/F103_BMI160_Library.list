
F103_BMI160_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af1c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800b030  0800b030  0000c030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5c0  0800b5c0  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5c0  0800b5c0  0000c5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5c8  0800b5c8  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5c8  0800b5c8  0000c5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b5cc  0800b5cc  0000c5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800b5d0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200001f0  0800b7c0  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800b7c0  0000d45c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e84f  00000000  00000000  0000d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7b  00000000  00000000  0001ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b26  00000000  00000000  0001e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f14  00000000  00000000  0001f146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106b9  00000000  00000000  0003805a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7b1  00000000  00000000  00048713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4ec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000562c  00000000  00000000  000d4f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000da534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b014 	.word	0x0800b014

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800b014 	.word	0x0800b014

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <bmi160_write>:
#include "bmi160_port.h"

extern I2C_HandleTypeDef hi2c1;

int8_t bmi160_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *read_data, uint16_t len)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af04      	add	r7, sp, #16
 8001182:	603a      	str	r2, [r7, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	460b      	mov	r3, r1
 800118c:	71bb      	strb	r3, [r7, #6]
 800118e:	4613      	mov	r3, r2
 8001190:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x0U);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	b299      	uxth	r1, r3
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	88bb      	ldrh	r3, [r7, #4]
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	4803      	ldr	r0, [pc, #12]	@ (80011c0 <bmi160_write+0x44>)
 80011b2:	f001 ff73 	bl	800309c <HAL_I2C_Mem_Write>
	return 0U;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000020c 	.word	0x2000020c

080011c4 <bmi160_read>:
int8_t bmi160_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	603a      	str	r2, [r7, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	460b      	mov	r3, r1
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	4613      	mov	r3, r2
 80011d8:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x1U);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, 1U, data, len, HAL_MAX_DELAY);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	b299      	uxth	r1, r3
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	88bb      	ldrh	r3, [r7, #4]
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <bmi160_read+0x4c>)
 8001200:	f002 f846 	bl	8003290 <HAL_I2C_Mem_Read>
	return 0U;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000020c 	.word	0x2000020c

08001214 <delay_ms>:
void delay_ms(uint32_t period)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f001 fb55 	bl	80028cc <HAL_Delay>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 800122a:	b590      	push	{r4, r7, lr}
 800122c:	b087      	sub	sp, #28
 800122e:	af00      	add	r7, sp, #0
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	4613      	mov	r3, r2
 800123a:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <bmi160_get_regs+0x24>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 800124e:	23ff      	movs	r3, #255	@ 0xff
 8001250:	75fb      	strb	r3, [r7, #23]
 8001252:	e017      	b.n	8001284 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8001254:	89bb      	ldrh	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 800125a:	23f4      	movs	r3, #244	@ 0xf4
 800125c:	75fb      	strb	r3, [r7, #23]
 800125e:	e011      	b.n	8001284 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	789b      	ldrb	r3, [r3, #2]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d103      	bne.n	8001270 <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800126e:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69dc      	ldr	r4, [r3, #28]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7858      	ldrb	r0, [r3, #1]
 8001278:	89bb      	ldrh	r3, [r7, #12]
 800127a:	7bf9      	ldrb	r1, [r7, #15]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	47a0      	blx	r4
 8001280:	4603      	mov	r3, r0
 8001282:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001288:	4618      	mov	r0, r3
 800128a:	371c      	adds	r7, #28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd90      	pop	{r4, r7, pc}

08001290 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	4613      	mov	r3, r2
 80012a0:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <bmi160_set_regs+0x28>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 80012b8:	23ff      	movs	r3, #255	@ 0xff
 80012ba:	75fb      	strb	r3, [r7, #23]
 80012bc:	e045      	b.n	800134a <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 80012be:	89bb      	ldrh	r3, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 80012c4:	23f4      	movs	r3, #244	@ 0xf4
 80012c6:	75fb      	strb	r3, [r7, #23]
 80012c8:	e03f      	b.n	800134a <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	789b      	ldrb	r3, [r3, #2]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d103      	bne.n	80012da <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012d8:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7a1b      	ldrb	r3, [r3, #8]
 80012de:	2b11      	cmp	r3, #17
 80012e0:	d003      	beq.n	80012ea <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80012e6:	2b15      	cmp	r3, #21
 80012e8:	d124      	bne.n	8001334 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1c      	ldr	r4, [r3, #32]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7858      	ldrb	r0, [r3, #1]
 80012f2:	89bb      	ldrh	r3, [r7, #12]
 80012f4:	7bf9      	ldrb	r1, [r7, #15]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	47a0      	blx	r4
 80012fa:	4603      	mov	r3, r0
 80012fc:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001302:	2001      	movs	r0, #1
 8001304:	4798      	blx	r3
 8001306:	e01a      	b.n	800133e <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1c      	ldr	r4, [r3, #32]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7858      	ldrb	r0, [r3, #1]
 8001310:	7dbb      	ldrb	r3, [r7, #22]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	441a      	add	r2, r3
 8001316:	7bf9      	ldrb	r1, [r7, #15]
 8001318:	2301      	movs	r3, #1
 800131a:	47a0      	blx	r4
 800131c:	4603      	mov	r3, r0
 800131e:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	3301      	adds	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	2001      	movs	r0, #1
 800132c:	4798      	blx	r3
            for (; count < len; count++)
 800132e:	7dbb      	ldrb	r3, [r7, #22]
 8001330:	3301      	adds	r3, #1
 8001332:	75bb      	strb	r3, [r7, #22]
 8001334:	7dbb      	ldrb	r3, [r7, #22]
 8001336:	b29b      	uxth	r3, r3
 8001338:	89ba      	ldrh	r2, [r7, #12]
 800133a:	429a      	cmp	r2, r3
 800133c:	d8e4      	bhi.n	8001308 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 800133e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8001346:	23fe      	movs	r3, #254	@ 0xfe
 8001348:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800134e:	4618      	mov	r0, r3
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}

08001356 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 800135e:	2303      	movs	r3, #3
 8001360:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f90b 	bl	800157e <null_ptr_check>
 8001368:	4603      	mov	r3, r0
 800136a:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10c      	bne.n	800138e <bmi160_init+0x38>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	789b      	ldrb	r3, [r3, #2]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d108      	bne.n	800138e <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800137c:	f107 010d 	add.w	r1, r7, #13
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	207f      	movs	r0, #127	@ 0x7f
 8001386:	f7ff ff50 	bl	800122a <bmi160_get_regs>
 800138a:	4603      	mov	r3, r0
 800138c:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d127      	bne.n	80013e6 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 800139c:	e007      	b.n	80013ae <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff ff40 	bl	800122a <bmi160_get_regs>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	1e5a      	subs	r2, r3, #1
 80013b2:	73ba      	strb	r2, [r7, #14]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <bmi160_init+0x6a>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2bd1      	cmp	r3, #209	@ 0xd1
 80013be:	d1ee      	bne.n	800139e <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 80013c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10c      	bne.n	80013e2 <bmi160_init+0x8c>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2bd1      	cmp	r3, #209	@ 0xd1
 80013ce:	d108      	bne.n	80013e2 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	22ff      	movs	r2, #255	@ 0xff
 80013d4:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f80b 	bl	80013f2 <bmi160_soft_reset>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e001      	b.n	80013e6 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 80013e2:	23fd      	movs	r3, #253	@ 0xfd
 80013e4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 80013fa:	23b6      	movs	r3, #182	@ 0xb6
 80013fc:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <bmi160_soft_reset+0x1a>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800140c:	23ff      	movs	r3, #255	@ 0xff
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e024      	b.n	800145c <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001412:	f107 010e 	add.w	r1, r7, #14
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	207e      	movs	r0, #126	@ 0x7e
 800141c:	f7ff ff38 	bl	8001290 <bmi160_set_regs>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001428:	2001      	movs	r0, #1
 800142a:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800142c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10c      	bne.n	800144e <bmi160_soft_reset+0x5c>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d108      	bne.n	800144e <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800143c:	f107 010e 	add.w	r1, r7, #14
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	207f      	movs	r0, #127	@ 0x7f
 8001446:	f7ff fef0 	bl	800122a <bmi160_get_regs>
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8b0 	bl	80015bc <default_param_settg>
        }
    }

    return rslt;
 800145c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <bmi160_set_power_mode+0x1a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8001482:	23ff      	movs	r3, #255	@ 0xff
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e00d      	b.n	80014a4 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8c0 	bl	800160e <set_accel_pwr>
 800148e:	4603      	mov	r3, r0
 8001490:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f94e 	bl	800173c <set_gyro_pwr>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80014a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	4603      	mov	r3, r0
 80014be:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 80014d0:	7d7b      	ldrb	r3, [r7, #21]
 80014d2:	109b      	asrs	r3, r3, #2
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 80014dc:	7d7b      	ldrb	r3, [r7, #21]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 80014e4:	7d3b      	ldrb	r3, [r7, #20]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 80014ea:	2303      	movs	r3, #3
 80014ec:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d03c      	beq.n	800156e <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 80014f4:	7d7b      	ldrb	r3, [r7, #21]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d024      	beq.n	8001544 <bmi160_get_sensor_data+0x94>
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	dc34      	bgt.n	8001568 <bmi160_get_sensor_data+0xb8>
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d002      	beq.n	8001508 <bmi160_get_sensor_data+0x58>
 8001502:	2b02      	cmp	r3, #2
 8001504:	d00f      	beq.n	8001526 <bmi160_get_sensor_data+0x76>
 8001506:	e02f      	b.n	8001568 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 800150e:	23ff      	movs	r3, #255	@ 0xff
 8001510:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8001512:	e02e      	b.n	8001572 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8001514:	7dbb      	ldrb	r3, [r7, #22]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f952 	bl	80017c4 <get_accel_data>
 8001520:	4603      	mov	r3, r0
 8001522:	75fb      	strb	r3, [r7, #23]
                break;
 8001524:	e025      	b.n	8001572 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 800152c:	23ff      	movs	r3, #255	@ 0xff
 800152e:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8001530:	e01f      	b.n	8001572 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8001532:	7dbb      	ldrb	r3, [r7, #22]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fa0d 	bl	8001958 <get_gyro_data>
 800153e:	4603      	mov	r3, r0
 8001540:	75fb      	strb	r3, [r7, #23]
                break;
 8001542:	e016      	b.n	8001572 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <bmi160_get_sensor_data+0xa0>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8001550:	23ff      	movs	r3, #255	@ 0xff
 8001552:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8001554:	e00d      	b.n	8001572 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8001556:	7db8      	ldrb	r0, [r7, #22]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	f000 fb44 	bl	8001bea <get_accel_gyro_data>
 8001562:	4603      	mov	r3, r0
 8001564:	75fb      	strb	r3, [r7, #23]
                break;
 8001566:	e004      	b.n	8001572 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8001568:	23fb      	movs	r3, #251	@ 0xfb
 800156a:	75fb      	strb	r3, [r7, #23]
                break;
 800156c:	e001      	b.n	8001572 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 800156e:	23ff      	movs	r3, #255	@ 0xff
 8001570:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <null_ptr_check+0x26>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <null_ptr_check+0x26>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <null_ptr_check+0x26>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 80015a4:	23ff      	movs	r3, #255	@ 0xff
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e001      	b.n	80015ae <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2208      	movs	r2, #8
 80015ce:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2210      	movs	r2, #16
 80015d4:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2203      	movs	r2, #3
 80015da:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2208      	movs	r2, #8
 80015e6:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2214      	movs	r2, #20
 80015ec:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6852      	ldr	r2, [r2, #4]
 80015fa:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68d2      	ldr	r2, [r2, #12]
 8001602:	611a      	str	r2, [r3, #16]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	791b      	ldrb	r3, [r3, #4]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	d92b      	bls.n	800167e <set_accel_pwr+0x70>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	2b12      	cmp	r3, #18
 800162c:	d827      	bhi.n	800167e <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	791a      	ldrb	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7a1b      	ldrb	r3, [r3, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	d024      	beq.n	8001684 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 800163a:	f107 030e 	add.w	r3, r7, #14
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f826 	bl	8001692 <process_under_sampling>
 8001646:	4603      	mov	r3, r0
 8001648:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	1d19      	adds	r1, r3, #4
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	207e      	movs	r0, #126	@ 0x7e
 800165c:	f7ff fe18 	bl	8001290 <bmi160_set_regs>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7a1b      	ldrb	r3, [r3, #8]
 8001668:	2b10      	cmp	r3, #16
 800166a:	d103      	bne.n	8001674 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	2005      	movs	r0, #5
 8001672:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	791a      	ldrb	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800167c:	e002      	b.n	8001684 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800167e:	23f3      	movs	r3, #243	@ 0xf3
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	e000      	b.n	8001686 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001684:	bf00      	nop
    }

    return rslt;
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 80016a0:	2300      	movs	r3, #0
 80016a2:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2201      	movs	r2, #1
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	2040      	movs	r0, #64	@ 0x40
 80016ac:	f7ff fdbd 	bl	800122a <bmi160_get_regs>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80016b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d139      	bne.n	8001730 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	791b      	ldrb	r3, [r3, #4]
 80016c0:	2b12      	cmp	r3, #18
 80016c2:	d120      	bne.n	8001706 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016cc:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2040      	movs	r0, #64	@ 0x40
 80016e2:	f7ff fdd5 	bl	8001290 <bmi160_set_regs>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d11e      	bne.n	8001730 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 80016f2:	f107 010c 	add.w	r1, r7, #12
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2202      	movs	r2, #2
 80016fa:	2058      	movs	r0, #88	@ 0x58
 80016fc:	f7ff fdc8 	bl	8001290 <bmi160_set_regs>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e014      	b.n	8001730 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b25b      	sxtb	r3, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	da0f      	bge.n	8001730 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001718:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7bba      	ldrb	r2, [r7, #14]
 800171e:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	2040      	movs	r0, #64	@ 0x40
 8001728:	f7ff fdb2 	bl	8001290 <bmi160_set_regs>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7b1b      	ldrb	r3, [r3, #12]
 800174c:	2b14      	cmp	r3, #20
 800174e:	d007      	beq.n	8001760 <set_gyro_pwr+0x24>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7b1b      	ldrb	r3, [r3, #12]
 8001754:	2b15      	cmp	r3, #21
 8001756:	d003      	beq.n	8001760 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800175c:	2b17      	cmp	r3, #23
 800175e:	d129      	bne.n	80017b4 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7b1a      	ldrb	r2, [r3, #12]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7c1b      	ldrb	r3, [r3, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d025      	beq.n	80017b8 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f103 010c 	add.w	r1, r3, #12
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	207e      	movs	r0, #126	@ 0x7e
 8001778:	f7ff fd8a 	bl	8001290 <bmi160_set_regs>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7c1b      	ldrb	r3, [r3, #16]
 8001784:	2b14      	cmp	r3, #20
 8001786:	d104      	bne.n	8001792 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	2050      	movs	r0, #80	@ 0x50
 800178e:	4798      	blx	r3
 8001790:	e00b      	b.n	80017aa <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7c1b      	ldrb	r3, [r3, #16]
 8001796:	2b17      	cmp	r3, #23
 8001798:	d107      	bne.n	80017aa <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800179e:	2b15      	cmp	r3, #21
 80017a0:	d103      	bne.n	80017aa <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	200a      	movs	r0, #10
 80017a8:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7b1a      	ldrb	r2, [r3, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80017b2:	e001      	b.n	80017b8 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80017b4:	23f3      	movs	r3, #243	@ 0xf3
 80017b6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	@ 0x30
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	f107 0318 	add.w	r3, r7, #24
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3306      	adds	r3, #6
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f107 0114 	add.w	r1, r7, #20
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2012      	movs	r0, #18
 8001804:	f7ff fd11 	bl	800122a <bmi160_get_regs>
 8001808:	4603      	mov	r3, r0
 800180a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800180e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 8097 	bne.w	8001946 <get_accel_data+0x182>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8001818:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001822:	3330      	adds	r3, #48	@ 0x30
 8001824:	443b      	add	r3, r7
 8001826:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800182a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800182e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001838:	3330      	adds	r3, #48	@ 0x30
 800183a:	443b      	add	r3, r7
 800183c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001844:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b21a      	sxth	r2, r3
 800184c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001850:	b21b      	sxth	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	8c3a      	ldrh	r2, [r7, #32]
 800185a:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800185c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001866:	3330      	adds	r3, #48	@ 0x30
 8001868:	443b      	add	r3, r7
 800186a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800186e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001872:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800187c:	3330      	adds	r3, #48	@ 0x30
 800187e:	443b      	add	r3, r7
 8001880:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001888:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b21a      	sxth	r2, r3
 8001890:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001894:	b21b      	sxth	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	8c3a      	ldrh	r2, [r7, #32]
 800189e:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80018a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80018aa:	3330      	adds	r3, #48	@ 0x30
 80018ac:	443b      	add	r3, r7
 80018ae:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80018b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80018b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80018c0:	3330      	adds	r3, #48	@ 0x30
 80018c2:	443b      	add	r3, r7
 80018c4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80018c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80018cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	8c3a      	ldrh	r2, [r7, #32]
 80018e2:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d129      	bne.n	800193e <get_accel_data+0x17a>
        {
            time_0 = data_array[idx++];
 80018ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80018f4:	3330      	adds	r3, #48	@ 0x30
 80018f6:	443b      	add	r3, r7
 80018f8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80018fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8001900:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800190a:	3330      	adds	r3, #48	@ 0x30
 800190c:	443b      	add	r3, r7
 800190e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8001916:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001920:	3330      	adds	r3, #48	@ 0x30
 8001922:	443b      	add	r3, r7
 8001924:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001928:	041b      	lsls	r3, r3, #16
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800192c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	431a      	orrs	r2, r3
 8001932:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001936:	431a      	orrs	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	e006      	b.n	800194c <get_accel_data+0x188>
        }
        else
        {
            accel->sensortime = 0;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	e002      	b.n	800194c <get_accel_data+0x188>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8001946:	23fe      	movs	r3, #254	@ 0xfe
 8001948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800194c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001950:	4618      	mov	r0, r3
 8001952:	3730      	adds	r7, #48	@ 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	@ 0x30
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d17b      	bne.n	8001a8a <get_gyro_data+0x132>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8001992:	f107 0110 	add.w	r1, r7, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2206      	movs	r2, #6
 800199a:	200c      	movs	r0, #12
 800199c:	f7ff fc45 	bl	800122a <bmi160_get_regs>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80019a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d169      	bne.n	8001a82 <get_gyro_data+0x12a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80019ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80019b8:	3330      	adds	r3, #48	@ 0x30
 80019ba:	443b      	add	r3, r7
 80019bc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80019c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80019c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80019ce:	3330      	adds	r3, #48	@ 0x30
 80019d0:	443b      	add	r3, r7
 80019d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80019d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80019da:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	8c3a      	ldrh	r2, [r7, #32]
 80019f0:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 80019f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80019fc:	3330      	adds	r3, #48	@ 0x30
 80019fe:	443b      	add	r3, r7
 8001a00:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8001a08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001a12:	3330      	adds	r3, #48	@ 0x30
 8001a14:	443b      	add	r3, r7
 8001a16:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001a1a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001a1e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	8c3a      	ldrh	r2, [r7, #32]
 8001a34:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8001a36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001a40:	3330      	adds	r3, #48	@ 0x30
 8001a42:	443b      	add	r3, r7
 8001a44:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001a48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8001a4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001a56:	3330      	adds	r3, #48	@ 0x30
 8001a58:	443b      	add	r3, r7
 8001a5a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001a5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001a62:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	8c3a      	ldrh	r2, [r7, #32]
 8001a78:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	e0ad      	b.n	8001bde <get_gyro_data+0x286>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8001a82:	23fe      	movs	r3, #254	@ 0xfe
 8001a84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001a88:	e0a9      	b.n	8001bde <get_gyro_data+0x286>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	330c      	adds	r3, #12
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	f107 0110 	add.w	r1, r7, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	200c      	movs	r0, #12
 8001a9a:	f7ff fbc6 	bl	800122a <bmi160_get_regs>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 8001aa4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f040 8095 	bne.w	8001bd8 <get_gyro_data+0x280>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8001aae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001ab8:	3330      	adds	r3, #48	@ 0x30
 8001aba:	443b      	add	r3, r7
 8001abc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8001ac4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001ace:	3330      	adds	r3, #48	@ 0x30
 8001ad0:	443b      	add	r3, r7
 8001ad2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001ad6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001ada:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	8c3a      	ldrh	r2, [r7, #32]
 8001af0:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8001af2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001afc:	3330      	adds	r3, #48	@ 0x30
 8001afe:	443b      	add	r3, r7
 8001b00:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8001b08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001b12:	3330      	adds	r3, #48	@ 0x30
 8001b14:	443b      	add	r3, r7
 8001b16:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b1a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001b1e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	8c3a      	ldrh	r2, [r7, #32]
 8001b34:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8001b36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001b40:	3330      	adds	r3, #48	@ 0x30
 8001b42:	443b      	add	r3, r7
 8001b44:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8001b4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001b56:	3330      	adds	r3, #48	@ 0x30
 8001b58:	443b      	add	r3, r7
 8001b5a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001b62:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	8c3a      	ldrh	r2, [r7, #32]
 8001b78:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 8001b7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b7e:	3306      	adds	r3, #6
 8001b80:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 8001b84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001b8e:	3330      	adds	r3, #48	@ 0x30
 8001b90:	443b      	add	r3, r7
 8001b92:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b96:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8001b9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001ba4:	3330      	adds	r3, #48	@ 0x30
 8001ba6:	443b      	add	r3, r7
 8001ba8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8001bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001bba:	3330      	adds	r3, #48	@ 0x30
 8001bbc:	443b      	add	r3, r7
 8001bbe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001bc2:	041b      	lsls	r3, r3, #16
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8001bc6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	e002      	b.n	8001bde <get_gyro_data+0x286>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8001bd8:	23fe      	movs	r3, #254	@ 0xfe
 8001bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 8001bde:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3730      	adds	r7, #48	@ 0x30
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b08c      	sub	sp, #48	@ 0x30
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	330c      	adds	r3, #12
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	f107 0110 	add.w	r1, r7, #16
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	200c      	movs	r0, #12
 8001c30:	f7ff fafb 	bl	800122a <bmi160_get_regs>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8001c3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 8108 	bne.w	8001e54 <get_accel_gyro_data+0x26a>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8001c44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001c4e:	3330      	adds	r3, #48	@ 0x30
 8001c50:	443b      	add	r3, r7
 8001c52:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001c5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001c64:	3330      	adds	r3, #48	@ 0x30
 8001c66:	443b      	add	r3, r7
 8001c68:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001c70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	8c3a      	ldrh	r2, [r7, #32]
 8001c86:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8001c88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001c92:	3330      	adds	r3, #48	@ 0x30
 8001c94:	443b      	add	r3, r7
 8001c96:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001c9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001ca8:	3330      	adds	r3, #48	@ 0x30
 8001caa:	443b      	add	r3, r7
 8001cac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001cb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001cb4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	8c3a      	ldrh	r2, [r7, #32]
 8001cca:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8001ccc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001cd6:	3330      	adds	r3, #48	@ 0x30
 8001cd8:	443b      	add	r3, r7
 8001cda:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001ce2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001cec:	3330      	adds	r3, #48	@ 0x30
 8001cee:	443b      	add	r3, r7
 8001cf0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001cf8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	8c3a      	ldrh	r2, [r7, #32]
 8001d0e:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 8001d10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001d1a:	3330      	adds	r3, #48	@ 0x30
 8001d1c:	443b      	add	r3, r7
 8001d1e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001d26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001d30:	3330      	adds	r3, #48	@ 0x30
 8001d32:	443b      	add	r3, r7
 8001d34:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001d3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	8c3a      	ldrh	r2, [r7, #32]
 8001d52:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8001d54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001d5e:	3330      	adds	r3, #48	@ 0x30
 8001d60:	443b      	add	r3, r7
 8001d62:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001d6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001d74:	3330      	adds	r3, #48	@ 0x30
 8001d76:	443b      	add	r3, r7
 8001d78:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001d7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001d80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	8c3a      	ldrh	r2, [r7, #32]
 8001d96:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8001d98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001da2:	3330      	adds	r3, #48	@ 0x30
 8001da4:	443b      	add	r3, r7
 8001da6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001dae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001db8:	3330      	adds	r3, #48	@ 0x30
 8001dba:	443b      	add	r3, r7
 8001dbc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001dc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	8c3a      	ldrh	r2, [r7, #32]
 8001dda:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d131      	bne.n	8001e46 <get_accel_gyro_data+0x25c>
        {
            time_0 = data_array[idx++];
 8001de2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001dec:	3330      	adds	r3, #48	@ 0x30
 8001dee:	443b      	add	r3, r7
 8001df0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001df4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8001df8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001e02:	3330      	adds	r3, #48	@ 0x30
 8001e04:	443b      	add	r3, r7
 8001e06:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8001e0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001e18:	3330      	adds	r3, #48	@ 0x30
 8001e1a:	443b      	add	r3, r7
 8001e1c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001e20:	041b      	lsls	r3, r3, #16
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8001e24:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8001e34:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	e009      	b.n	8001e5a <get_accel_gyro_data+0x270>
        }
        else
        {
            accel->sensortime = 0;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	e002      	b.n	8001e5a <get_accel_gyro_data+0x270>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8001e54:	23fe      	movs	r3, #254	@ 0xfe
 8001e56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8001e5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3730      	adds	r7, #48	@ 0x30
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <_write>:

/*! @brief variable to hold the bmi160 gyro data */
struct bmi160_sensor_data bmi160_gyro;

int _write(int file, char *ptr, int len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t*)ptr,len,HAL_MAX_DELAY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	4804      	ldr	r0, [pc, #16]	@ (8001e90 <_write+0x28>)
 8001e80:	f002 fc8e 	bl	80047a0 <HAL_UART_Transmit>
  return len;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000260 	.word	0x20000260

08001e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e98:	b08d      	sub	sp, #52	@ 0x34
 8001e9a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e9c:	f000 fcb4 	bl	8002808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ea0:	f000 f9f4 	bl	800228c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ea4:	f000 fa90 	bl	80023c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ea8:	f000 fa36 	bl	8002318 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001eac:	f000 fa62 	bl	8002374 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  int8_t rslt;

  bmi160_soft_reset(&bmi160);
 8001eb0:	482a      	ldr	r0, [pc, #168]	@ (8001f5c <main+0xc8>)
 8001eb2:	f7ff fa9e 	bl	80013f2 <bmi160_soft_reset>

  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1U);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ebc:	4828      	ldr	r0, [pc, #160]	@ (8001f60 <main+0xcc>)
 8001ebe:	f000 ff91 	bl	8002de4 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001ec2:	20c8      	movs	r0, #200	@ 0xc8
 8001ec4:	f000 fd02 	bl	80028cc <HAL_Delay>

  bmi160.id = 0x68U;
 8001ec8:	4b24      	ldr	r3, [pc, #144]	@ (8001f5c <main+0xc8>)
 8001eca:	2268      	movs	r2, #104	@ 0x68
 8001ecc:	705a      	strb	r2, [r3, #1]
  bmi160.intf = BMI160_I2C_INTF;
 8001ece:	4b23      	ldr	r3, [pc, #140]	@ (8001f5c <main+0xc8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	709a      	strb	r2, [r3, #2]
  bmi160.read = bmi160_read;
 8001ed4:	4b21      	ldr	r3, [pc, #132]	@ (8001f5c <main+0xc8>)
 8001ed6:	4a23      	ldr	r2, [pc, #140]	@ (8001f64 <main+0xd0>)
 8001ed8:	61da      	str	r2, [r3, #28]
  bmi160.write = bmi160_write;
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <main+0xc8>)
 8001edc:	4a22      	ldr	r2, [pc, #136]	@ (8001f68 <main+0xd4>)
 8001ede:	621a      	str	r2, [r3, #32]
  bmi160.delay_ms = delay_ms;
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <main+0xc8>)
 8001ee2:	4a22      	ldr	r2, [pc, #136]	@ (8001f6c <main+0xd8>)
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24

  rslt = bmi160_init(&bmi160);
 8001ee6:	481d      	ldr	r0, [pc, #116]	@ (8001f5c <main+0xc8>)
 8001ee8:	f7ff fa35 	bl	8001356 <bmi160_init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	77fb      	strb	r3, [r7, #31]

  if (rslt == BMI160_OK)
 8001ef0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <main+0x78>
  {
      printf("BMI160 initialization success !\n");
 8001ef8:	481d      	ldr	r0, [pc, #116]	@ (8001f70 <main+0xdc>)
 8001efa:	f004 f8b9 	bl	8006070 <puts>
      printf("Chip ID 0x%X\n", bmi160.chip_id);
 8001efe:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <main+0xc8>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4619      	mov	r1, r3
 8001f04:	481b      	ldr	r0, [pc, #108]	@ (8001f74 <main+0xe0>)
 8001f06:	f004 f84b 	bl	8005fa0 <iprintf>
 8001f0a:	e002      	b.n	8001f12 <main+0x7e>
  }
  else
  {
      printf("BMI160 initialization failure !\n");
 8001f0c:	481a      	ldr	r0, [pc, #104]	@ (8001f78 <main+0xe4>)
 8001f0e:	f004 f8af 	bl	8006070 <puts>
  }

  /* Select the Output data rate, range of accelerometer sensor */
  bmi160.accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
 8001f12:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <main+0xc8>)
 8001f14:	220c      	movs	r2, #12
 8001f16:	715a      	strb	r2, [r3, #5]
  bmi160.accel_cfg.range = BMI160_ACCEL_RANGE_16G;
 8001f18:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <main+0xc8>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	719a      	strb	r2, [r3, #6]
  bmi160.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <main+0xc8>)
 8001f20:	2202      	movs	r2, #2
 8001f22:	71da      	strb	r2, [r3, #7]

  /* Select the power mode of accelerometer sensor */
  bmi160.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8001f24:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <main+0xc8>)
 8001f26:	2211      	movs	r2, #17
 8001f28:	711a      	strb	r2, [r3, #4]

  /* Select the Output data rate, range of Gyroscope sensor */
  bmi160.gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <main+0xc8>)
 8001f2c:	220d      	movs	r2, #13
 8001f2e:	735a      	strb	r2, [r3, #13]
  bmi160.gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <main+0xc8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	739a      	strb	r2, [r3, #14]
  bmi160.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8001f36:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <main+0xc8>)
 8001f38:	2202      	movs	r2, #2
 8001f3a:	73da      	strb	r2, [r3, #15]

  /* Select the power mode of Gyroscope sensor */
  bmi160.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <main+0xc8>)
 8001f3e:	2215      	movs	r2, #21
 8001f40:	731a      	strb	r2, [r3, #12]

  /* Set the sensor configuration */
  rslt = bmi160_set_power_mode(&bmi160);
 8001f42:	4806      	ldr	r0, [pc, #24]	@ (8001f5c <main+0xc8>)
 8001f44:	f7ff fa90 	bl	8001468 <bmi160_set_power_mode>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	77fb      	strb	r3, [r7, #31]

  if(rslt == BMI160_OK)
 8001f4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d115      	bne.n	8001f80 <main+0xec>
  {
	  printf("BMI160 set sens OK\n");
 8001f54:	4809      	ldr	r0, [pc, #36]	@ (8001f7c <main+0xe8>)
 8001f56:	f004 f88b 	bl	8006070 <puts>
 8001f5a:	e014      	b.n	8001f86 <main+0xf2>
 8001f5c:	200002a8 	.word	0x200002a8
 8001f60:	40011000 	.word	0x40011000
 8001f64:	080011c5 	.word	0x080011c5
 8001f68:	0800117d 	.word	0x0800117d
 8001f6c:	08001215 	.word	0x08001215
 8001f70:	0800b030 	.word	0x0800b030
 8001f74:	0800b050 	.word	0x0800b050
 8001f78:	0800b060 	.word	0x0800b060
 8001f7c:	0800b080 	.word	0x0800b080
  }
  else
  {
      printf("BMI160 set sens ERROR\n");
 8001f80:	48b2      	ldr	r0, [pc, #712]	@ (800224c <main+0x3b8>)
 8001f82:	f004 f875 	bl	8006070 <puts>
  }

  double pitch=0,yaw=0,roll=0;
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9c7 2300 	strd	r2, r3, [r7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      /* To read both Accel and Gyro data */
	  rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &bmi160_accel, &bmi160_gyro, &bmi160);
 8001faa:	4ba9      	ldr	r3, [pc, #676]	@ (8002250 <main+0x3bc>)
 8001fac:	4aa9      	ldr	r2, [pc, #676]	@ (8002254 <main+0x3c0>)
 8001fae:	49aa      	ldr	r1, [pc, #680]	@ (8002258 <main+0x3c4>)
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f7ff fa7d 	bl	80014b0 <bmi160_get_sensor_data>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	77fb      	strb	r3, [r7, #31]

	  if(rslt == BMI160_OK)
 8001fba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d143      	bne.n	800204a <main+0x1b6>
	  {
		  MahonyAHRSupdateIMU( (float)bmi160_gyro.x/(float)16.4, (float)bmi160_gyro.y/(float)16.4, (float)bmi160_gyro.z/(float)16.4,\
 8001fc2:	4ba4      	ldr	r3, [pc, #656]	@ (8002254 <main+0x3c0>)
 8001fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fe87 	bl	8000cdc <__aeabi_i2f>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	49a2      	ldr	r1, [pc, #648]	@ (800225c <main+0x3c8>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe ff8a 	bl	8000eec <__aeabi_fdiv>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461e      	mov	r6, r3
 8001fdc:	4b9d      	ldr	r3, [pc, #628]	@ (8002254 <main+0x3c0>)
 8001fde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe7a 	bl	8000cdc <__aeabi_i2f>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	499c      	ldr	r1, [pc, #624]	@ (800225c <main+0x3c8>)
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe ff7d 	bl	8000eec <__aeabi_fdiv>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4698      	mov	r8, r3
 8001ff6:	4b97      	ldr	r3, [pc, #604]	@ (8002254 <main+0x3c0>)
 8001ff8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fe6d 	bl	8000cdc <__aeabi_i2f>
 8002002:	4603      	mov	r3, r0
 8002004:	4995      	ldr	r1, [pc, #596]	@ (800225c <main+0x3c8>)
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe ff70 	bl	8000eec <__aeabi_fdiv>
 800200c:	4603      	mov	r3, r0
 800200e:	4699      	mov	r9, r3
				  (float)bmi160_accel.x, (float)bmi160_accel.y, (float)bmi160_accel.z);
 8002010:	4b91      	ldr	r3, [pc, #580]	@ (8002258 <main+0x3c4>)
 8002012:	f9b3 3000 	ldrsh.w	r3, [r3]
		  MahonyAHRSupdateIMU( (float)bmi160_gyro.x/(float)16.4, (float)bmi160_gyro.y/(float)16.4, (float)bmi160_gyro.z/(float)16.4,\
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fe60 	bl	8000cdc <__aeabi_i2f>
 800201c:	4605      	mov	r5, r0
				  (float)bmi160_accel.x, (float)bmi160_accel.y, (float)bmi160_accel.z);
 800201e:	4b8e      	ldr	r3, [pc, #568]	@ (8002258 <main+0x3c4>)
 8002020:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		  MahonyAHRSupdateIMU( (float)bmi160_gyro.x/(float)16.4, (float)bmi160_gyro.y/(float)16.4, (float)bmi160_gyro.z/(float)16.4,\
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fe59 	bl	8000cdc <__aeabi_i2f>
 800202a:	4604      	mov	r4, r0
				  (float)bmi160_accel.x, (float)bmi160_accel.y, (float)bmi160_accel.z);
 800202c:	4b8a      	ldr	r3, [pc, #552]	@ (8002258 <main+0x3c4>)
 800202e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		  MahonyAHRSupdateIMU( (float)bmi160_gyro.x/(float)16.4, (float)bmi160_gyro.y/(float)16.4, (float)bmi160_gyro.z/(float)16.4,\
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fe52 	bl	8000cdc <__aeabi_i2f>
 8002038:	4603      	mov	r3, r0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	9400      	str	r4, [sp, #0]
 800203e:	462b      	mov	r3, r5
 8002040:	464a      	mov	r2, r9
 8002042:	4641      	mov	r1, r8
 8002044:	4630      	mov	r0, r6
 8002046:	f002 fd7f 	bl	8004b48 <MahonyAHRSupdateIMU>

	  }

	  yaw = atan2((2*q1*q2-2*q0*q3),(2*pow(q0,2)+2*pow(q1,2)-1));
 800204a:	4b85      	ldr	r3, [pc, #532]	@ (8002260 <main+0x3cc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4619      	mov	r1, r3
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fd8f 	bl	8000b74 <__addsf3>
 8002056:	4603      	mov	r3, r0
 8002058:	461a      	mov	r2, r3
 800205a:	4b82      	ldr	r3, [pc, #520]	@ (8002264 <main+0x3d0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f7fe fe8f 	bl	8000d84 <__aeabi_fmul>
 8002066:	4603      	mov	r3, r0
 8002068:	461c      	mov	r4, r3
 800206a:	4b7f      	ldr	r3, [pc, #508]	@ (8002268 <main+0x3d4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4619      	mov	r1, r3
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fd7f 	bl	8000b74 <__addsf3>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	4b7c      	ldr	r3, [pc, #496]	@ (800226c <main+0x3d8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4619      	mov	r1, r3
 8002080:	4610      	mov	r0, r2
 8002082:	f7fe fe7f 	bl	8000d84 <__aeabi_fmul>
 8002086:	4603      	mov	r3, r0
 8002088:	4619      	mov	r1, r3
 800208a:	4620      	mov	r0, r4
 800208c:	f7fe fd70 	bl	8000b70 <__aeabi_fsub>
 8002090:	4603      	mov	r3, r0
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f9c8 	bl	8000428 <__aeabi_f2d>
 8002098:	4604      	mov	r4, r0
 800209a:	460d      	mov	r5, r1
 800209c:	4b72      	ldr	r3, [pc, #456]	@ (8002268 <main+0x3d4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f9c1 	bl	8000428 <__aeabi_f2d>
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020ae:	f007 fc41 	bl	8009934 <pow>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	f7fe f859 	bl	800016c <__adddf3>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4690      	mov	r8, r2
 80020c0:	4699      	mov	r9, r3
 80020c2:	4b67      	ldr	r3, [pc, #412]	@ (8002260 <main+0x3cc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f9ae 	bl	8000428 <__aeabi_f2d>
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020d4:	f007 fc2e 	bl	8009934 <pow>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	f7fe f846 	bl	800016c <__adddf3>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4640      	mov	r0, r8
 80020e6:	4649      	mov	r1, r9
 80020e8:	f7fe f840 	bl	800016c <__adddf3>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002270 <main+0x3dc>)
 80020fa:	f7fe f835 	bl	8000168 <__aeabi_dsub>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4620      	mov	r0, r4
 8002104:	4629      	mov	r1, r5
 8002106:	f007 fc13 	bl	8009930 <atan2>
 800210a:	e9c7 0102 	strd	r0, r1, [r7, #8]
	  roll = -asin(((2*q1*q3) + (2*q0*q2)));
 800210e:	4b54      	ldr	r3, [pc, #336]	@ (8002260 <main+0x3cc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fd2d 	bl	8000b74 <__addsf3>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	4b53      	ldr	r3, [pc, #332]	@ (800226c <main+0x3d8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	4610      	mov	r0, r2
 8002126:	f7fe fe2d 	bl	8000d84 <__aeabi_fmul>
 800212a:	4603      	mov	r3, r0
 800212c:	461c      	mov	r4, r3
 800212e:	4b4e      	ldr	r3, [pc, #312]	@ (8002268 <main+0x3d4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fd1d 	bl	8000b74 <__addsf3>
 800213a:	4603      	mov	r3, r0
 800213c:	461a      	mov	r2, r3
 800213e:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <main+0x3d0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f7fe fe1d 	bl	8000d84 <__aeabi_fmul>
 800214a:	4603      	mov	r3, r0
 800214c:	4619      	mov	r1, r3
 800214e:	4620      	mov	r0, r4
 8002150:	f7fe fd10 	bl	8000b74 <__addsf3>
 8002154:	4603      	mov	r3, r0
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f966 	bl	8000428 <__aeabi_f2d>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f007 fbbc 	bl	80098e0 <asin>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4611      	mov	r1, r2
 800216e:	6039      	str	r1, [r7, #0]
 8002170:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002174:	607b      	str	r3, [r7, #4]
	  pitch = atan2((2*q2*q3-2*q0*q1),(2*pow(q0,2)+2*pow(q3,2)-1));
 8002176:	4b3b      	ldr	r3, [pc, #236]	@ (8002264 <main+0x3d0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fcf9 	bl	8000b74 <__addsf3>
 8002182:	4603      	mov	r3, r0
 8002184:	461a      	mov	r2, r3
 8002186:	4b39      	ldr	r3, [pc, #228]	@ (800226c <main+0x3d8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	4610      	mov	r0, r2
 800218e:	f7fe fdf9 	bl	8000d84 <__aeabi_fmul>
 8002192:	4603      	mov	r3, r0
 8002194:	461c      	mov	r4, r3
 8002196:	4b34      	ldr	r3, [pc, #208]	@ (8002268 <main+0x3d4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4619      	mov	r1, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fce9 	bl	8000b74 <__addsf3>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002260 <main+0x3cc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	f7fe fde9 	bl	8000d84 <__aeabi_fmul>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4619      	mov	r1, r3
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7fe fcda 	bl	8000b70 <__aeabi_fsub>
 80021bc:	4603      	mov	r3, r0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f932 	bl	8000428 <__aeabi_f2d>
 80021c4:	4604      	mov	r4, r0
 80021c6:	460d      	mov	r5, r1
 80021c8:	4b27      	ldr	r3, [pc, #156]	@ (8002268 <main+0x3d4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f92b 	bl	8000428 <__aeabi_f2d>
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021da:	f007 fbab 	bl	8009934 <pow>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	f7fd ffc3 	bl	800016c <__adddf3>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4690      	mov	r8, r2
 80021ec:	4699      	mov	r9, r3
 80021ee:	4b1f      	ldr	r3, [pc, #124]	@ (800226c <main+0x3d8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f918 	bl	8000428 <__aeabi_f2d>
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002200:	f007 fb98 	bl	8009934 <pow>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	f7fd ffb0 	bl	800016c <__adddf3>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4640      	mov	r0, r8
 8002212:	4649      	mov	r1, r9
 8002214:	f7fd ffaa 	bl	800016c <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <main+0x3dc>)
 8002226:	f7fd ff9f 	bl	8000168 <__aeabi_dsub>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4620      	mov	r0, r4
 8002230:	4629      	mov	r1, r5
 8002232:	f007 fb7d 	bl	8009930 <atan2>
 8002236:	e9c7 0104 	strd	r0, r1, [r7, #16]
	  printf("%f %f %f\n",yaw,roll,pitch);
 800223a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800223e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002246:	e9cd 2300 	strd	r2, r3, [sp]
 800224a:	e013      	b.n	8002274 <main+0x3e0>
 800224c:	0800b094 	.word	0x0800b094
 8002250:	200002a8 	.word	0x200002a8
 8002254:	200002e0 	.word	0x200002e0
 8002258:	200002d4 	.word	0x200002d4
 800225c:	41833333 	.word	0x41833333
 8002260:	200002f8 	.word	0x200002f8
 8002264:	200002fc 	.word	0x200002fc
 8002268:	20000010 	.word	0x20000010
 800226c:	20000300 	.word	0x20000300
 8002270:	3ff00000 	.word	0x3ff00000
 8002274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002278:	4803      	ldr	r0, [pc, #12]	@ (8002288 <main+0x3f4>)
 800227a:	f003 fe91 	bl	8005fa0 <iprintf>
      HAL_Delay(50);
 800227e:	2032      	movs	r0, #50	@ 0x32
 8002280:	f000 fb24 	bl	80028cc <HAL_Delay>
	  rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &bmi160_accel, &bmi160_gyro, &bmi160);
 8002284:	e691      	b.n	8001faa <main+0x116>
 8002286:	bf00      	nop
 8002288:	0800b0ac 	.word	0x0800b0ac

0800228c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b090      	sub	sp, #64	@ 0x40
 8002290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002292:	f107 0318 	add.w	r3, r7, #24
 8002296:	2228      	movs	r2, #40	@ 0x28
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f003 ffe8 	bl	8006270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022bc:	2301      	movs	r3, #1
 80022be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c0:	2302      	movs	r3, #2
 80022c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022ca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80022ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d0:	f107 0318 	add.w	r3, r7, #24
 80022d4:	4618      	mov	r0, r3
 80022d6:	f001 fe03 	bl	8003ee0 <HAL_RCC_OscConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022e0:	f000 f8ca 	bl	8002478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e4:	230f      	movs	r3, #15
 80022e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e8:	2302      	movs	r3, #2
 80022ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	2102      	movs	r1, #2
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 f870 	bl	80043e4 <HAL_RCC_ClockConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800230a:	f000 f8b5 	bl	8002478 <Error_Handler>
  }
}
 800230e:	bf00      	nop
 8002310:	3740      	adds	r7, #64	@ 0x40
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800231c:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <MX_I2C1_Init+0x50>)
 800231e:	4a13      	ldr	r2, [pc, #76]	@ (800236c <MX_I2C1_Init+0x54>)
 8002320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002322:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <MX_I2C1_Init+0x50>)
 8002324:	4a12      	ldr	r2, [pc, #72]	@ (8002370 <MX_I2C1_Init+0x58>)
 8002326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002328:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <MX_I2C1_Init+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800232e:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <MX_I2C1_Init+0x50>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <MX_I2C1_Init+0x50>)
 8002336:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800233a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800233c:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <MX_I2C1_Init+0x50>)
 800233e:	2200      	movs	r2, #0
 8002340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <MX_I2C1_Init+0x50>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002348:	4b07      	ldr	r3, [pc, #28]	@ (8002368 <MX_I2C1_Init+0x50>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800234e:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <MX_I2C1_Init+0x50>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002354:	4804      	ldr	r0, [pc, #16]	@ (8002368 <MX_I2C1_Init+0x50>)
 8002356:	f000 fd5d 	bl	8002e14 <HAL_I2C_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002360:	f000 f88a 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2000020c 	.word	0x2000020c
 800236c:	40005400 	.word	0x40005400
 8002370:	000186a0 	.word	0x000186a0

08002374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002378:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <MX_USART2_UART_Init+0x4c>)
 800237a:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <MX_USART2_UART_Init+0x50>)
 800237c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <MX_USART2_UART_Init+0x4c>)
 8002380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002386:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <MX_USART2_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800238c:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <MX_USART2_UART_Init+0x4c>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002392:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <MX_USART2_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002398:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <MX_USART2_UART_Init+0x4c>)
 800239a:	220c      	movs	r2, #12
 800239c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <MX_USART2_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <MX_USART2_UART_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023aa:	4805      	ldr	r0, [pc, #20]	@ (80023c0 <MX_USART2_UART_Init+0x4c>)
 80023ac:	f002 f9a8 	bl	8004700 <HAL_UART_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023b6:	f000 f85f 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000260 	.word	0x20000260
 80023c4:	40004400 	.word	0x40004400

080023c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023dc:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <MX_GPIO_Init+0xa8>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4a23      	ldr	r2, [pc, #140]	@ (8002470 <MX_GPIO_Init+0xa8>)
 80023e2:	f043 0310 	orr.w	r3, r3, #16
 80023e6:	6193      	str	r3, [r2, #24]
 80023e8:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <MX_GPIO_Init+0xa8>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <MX_GPIO_Init+0xa8>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002470 <MX_GPIO_Init+0xa8>)
 80023fa:	f043 0320 	orr.w	r3, r3, #32
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <MX_GPIO_Init+0xa8>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240c:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <MX_GPIO_Init+0xa8>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a17      	ldr	r2, [pc, #92]	@ (8002470 <MX_GPIO_Init+0xa8>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <MX_GPIO_Init+0xa8>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002424:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <MX_GPIO_Init+0xa8>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a11      	ldr	r2, [pc, #68]	@ (8002470 <MX_GPIO_Init+0xa8>)
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <MX_GPIO_Init+0xa8>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800243c:	2201      	movs	r2, #1
 800243e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002442:	480c      	ldr	r0, [pc, #48]	@ (8002474 <MX_GPIO_Init+0xac>)
 8002444:	f000 fcce 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8002448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800244c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244e:	2301      	movs	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2302      	movs	r3, #2
 8002458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	4619      	mov	r1, r3
 8002460:	4804      	ldr	r0, [pc, #16]	@ (8002474 <MX_GPIO_Init+0xac>)
 8002462:	f000 fb3b 	bl	8002adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002466:	bf00      	nop
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	40011000 	.word	0x40011000

08002478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800247c:	b672      	cpsid	i
}
 800247e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("error handler\n");
 8002480:	4804      	ldr	r0, [pc, #16]	@ (8002494 <Error_Handler+0x1c>)
 8002482:	f003 fdf5 	bl	8006070 <puts>
	  HAL_Delay(1000);
 8002486:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800248a:	f000 fa1f 	bl	80028cc <HAL_Delay>
	  printf("error handler\n");
 800248e:	bf00      	nop
 8002490:	e7f6      	b.n	8002480 <Error_Handler+0x8>
 8002492:	bf00      	nop
 8002494:	0800b0b8 	.word	0x0800b0b8

08002498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	4a14      	ldr	r2, [pc, #80]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6193      	str	r3, [r2, #24]
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a0e      	ldr	r2, [pc, #56]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	61d3      	str	r3, [r2, #28]
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_MspInit+0x60>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <HAL_MspInit+0x60>)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000

080024fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a15      	ldr	r2, [pc, #84]	@ (800256c <HAL_I2C_MspInit+0x70>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d123      	bne.n	8002564 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251c:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <HAL_I2C_MspInit+0x74>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a13      	ldr	r2, [pc, #76]	@ (8002570 <HAL_I2C_MspInit+0x74>)
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <HAL_I2C_MspInit+0x74>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BMI160_SCL_Pin|BMI160_SDA_Pin;
 8002534:	23c0      	movs	r3, #192	@ 0xc0
 8002536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002538:	2312      	movs	r3, #18
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	4619      	mov	r1, r3
 8002546:	480b      	ldr	r0, [pc, #44]	@ (8002574 <HAL_I2C_MspInit+0x78>)
 8002548:	f000 fac8 	bl	8002adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800254c:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_I2C_MspInit+0x74>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4a07      	ldr	r2, [pc, #28]	@ (8002570 <HAL_I2C_MspInit+0x74>)
 8002552:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002556:	61d3      	str	r3, [r2, #28]
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_I2C_MspInit+0x74>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002564:	bf00      	nop
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40005400 	.word	0x40005400
 8002570:	40021000 	.word	0x40021000
 8002574:	40010c00 	.word	0x40010c00

08002578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1b      	ldr	r2, [pc, #108]	@ (8002600 <HAL_UART_MspInit+0x88>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d12f      	bne.n	80025f8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002598:	4b1a      	ldr	r3, [pc, #104]	@ (8002604 <HAL_UART_MspInit+0x8c>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	4a19      	ldr	r2, [pc, #100]	@ (8002604 <HAL_UART_MspInit+0x8c>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a2:	61d3      	str	r3, [r2, #28]
 80025a4:	4b17      	ldr	r3, [pc, #92]	@ (8002604 <HAL_UART_MspInit+0x8c>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	4b14      	ldr	r3, [pc, #80]	@ (8002604 <HAL_UART_MspInit+0x8c>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a13      	ldr	r2, [pc, #76]	@ (8002604 <HAL_UART_MspInit+0x8c>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_UART_MspInit+0x8c>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025c8:	2304      	movs	r3, #4
 80025ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	4619      	mov	r1, r3
 80025da:	480b      	ldr	r0, [pc, #44]	@ (8002608 <HAL_UART_MspInit+0x90>)
 80025dc:	f000 fa7e 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025e0:	2308      	movs	r3, #8
 80025e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	4619      	mov	r1, r3
 80025f2:	4805      	ldr	r0, [pc, #20]	@ (8002608 <HAL_UART_MspInit+0x90>)
 80025f4:	f000 fa72 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80025f8:	bf00      	nop
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40004400 	.word	0x40004400
 8002604:	40021000 	.word	0x40021000
 8002608:	40010800 	.word	0x40010800

0800260c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <NMI_Handler+0x4>

08002614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <MemManage_Handler+0x4>

08002624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <BusFault_Handler+0x4>

0800262c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <UsageFault_Handler+0x4>

08002634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265c:	f000 f91a 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return 1;
 8002668:	2301      	movs	r3, #1
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <_kill>:

int _kill(int pid, int sig)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800267c:	f003 fe4a 	bl	8006314 <__errno>
 8002680:	4603      	mov	r3, r0
 8002682:	2216      	movs	r2, #22
 8002684:	601a      	str	r2, [r3, #0]
  return -1;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_exit>:

void _exit (int status)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800269a:	f04f 31ff 	mov.w	r1, #4294967295
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffe7 	bl	8002672 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <_exit+0x12>

080026a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e00a      	b.n	80026d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ba:	f3af 8000 	nop.w
 80026be:	4601      	mov	r1, r0
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	60ba      	str	r2, [r7, #8]
 80026c6:	b2ca      	uxtb	r2, r1
 80026c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dbf0      	blt.n	80026ba <_read+0x12>
  }

  return len;
 80026d8:	687b      	ldr	r3, [r7, #4]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002708:	605a      	str	r2, [r3, #4]
  return 0;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <_isatty>:

int _isatty(int file)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800271e:	2301      	movs	r3, #1
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
	...

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	@ (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f003 fdce 	bl	8006314 <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20005000 	.word	0x20005000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	200002ec 	.word	0x200002ec
 80027ac:	20000460 	.word	0x20000460

080027b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027bc:	f7ff fff8 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c0:	480b      	ldr	r0, [pc, #44]	@ (80027f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027c2:	490c      	ldr	r1, [pc, #48]	@ (80027f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027c4:	4a0c      	ldr	r2, [pc, #48]	@ (80027f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027d8:	4c09      	ldr	r4, [pc, #36]	@ (8002800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027e6:	f003 fd9b 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ea:	f7ff fb53 	bl	8001e94 <main>
  bx lr
 80027ee:	4770      	bx	lr
  ldr r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80027f8:	0800b5d0 	.word	0x0800b5d0
  ldr r2, =_sbss
 80027fc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002800:	2000045c 	.word	0x2000045c

08002804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC1_2_IRQHandler>
	...

08002808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_Init+0x28>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	@ (8002830 <HAL_Init+0x28>)
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002818:	2003      	movs	r0, #3
 800281a:	f000 f92b 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281e:	200f      	movs	r0, #15
 8002820:	f000 f808 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002824:	f7ff fe38 	bl	8002498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40022000 	.word	0x40022000

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <HAL_InitTick+0x54>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_InitTick+0x58>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800284a:	fbb3 f3f1 	udiv	r3, r3, r1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f935 	bl	8002ac2 <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00e      	b.n	8002880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d80a      	bhi.n	800287e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f000 f90b 	bl	8002a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002874:	4a06      	ldr	r2, [pc, #24]	@ (8002890 <HAL_InitTick+0x5c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000000 	.word	0x20000000
 800288c:	20000008 	.word	0x20000008
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <HAL_IncTick+0x1c>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <HAL_IncTick+0x20>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a03      	ldr	r2, [pc, #12]	@ (80028b4 <HAL_IncTick+0x20>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	20000008 	.word	0x20000008
 80028b4:	200002f0 	.word	0x200002f0

080028b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return uwTick;
 80028bc:	4b02      	ldr	r3, [pc, #8]	@ (80028c8 <HAL_GetTick+0x10>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	200002f0 	.word	0x200002f0

080028cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff fff0 	bl	80028b8 <HAL_GetTick>
 80028d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d005      	beq.n	80028f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <HAL_Delay+0x44>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f2:	bf00      	nop
 80028f4:	f7ff ffe0 	bl	80028b8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d8f7      	bhi.n	80028f4 <HAL_Delay+0x28>
  {
  }
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000008 	.word	0x20000008

08002914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	@ (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	@ (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	@ (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	@ 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	@ 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a40:	d301      	bcc.n	8002a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <SysTick_Config+0x40>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4e:	210f      	movs	r1, #15
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f7ff ff90 	bl	8002978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <SysTick_Config+0x40>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <SysTick_Config+0x40>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff49 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff5e 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ff90 	bl	80029cc <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5f 	bl	8002978 <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffb0 	bl	8002a30 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b08b      	sub	sp, #44	@ 0x2c
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aee:	e169      	b.n	8002dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002af0:	2201      	movs	r2, #1
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f040 8158 	bne.w	8002dbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a9a      	ldr	r2, [pc, #616]	@ (8002d7c <HAL_GPIO_Init+0x2a0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d05e      	beq.n	8002bd6 <HAL_GPIO_Init+0xfa>
 8002b18:	4a98      	ldr	r2, [pc, #608]	@ (8002d7c <HAL_GPIO_Init+0x2a0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d875      	bhi.n	8002c0a <HAL_GPIO_Init+0x12e>
 8002b1e:	4a98      	ldr	r2, [pc, #608]	@ (8002d80 <HAL_GPIO_Init+0x2a4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d058      	beq.n	8002bd6 <HAL_GPIO_Init+0xfa>
 8002b24:	4a96      	ldr	r2, [pc, #600]	@ (8002d80 <HAL_GPIO_Init+0x2a4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d86f      	bhi.n	8002c0a <HAL_GPIO_Init+0x12e>
 8002b2a:	4a96      	ldr	r2, [pc, #600]	@ (8002d84 <HAL_GPIO_Init+0x2a8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d052      	beq.n	8002bd6 <HAL_GPIO_Init+0xfa>
 8002b30:	4a94      	ldr	r2, [pc, #592]	@ (8002d84 <HAL_GPIO_Init+0x2a8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d869      	bhi.n	8002c0a <HAL_GPIO_Init+0x12e>
 8002b36:	4a94      	ldr	r2, [pc, #592]	@ (8002d88 <HAL_GPIO_Init+0x2ac>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d04c      	beq.n	8002bd6 <HAL_GPIO_Init+0xfa>
 8002b3c:	4a92      	ldr	r2, [pc, #584]	@ (8002d88 <HAL_GPIO_Init+0x2ac>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d863      	bhi.n	8002c0a <HAL_GPIO_Init+0x12e>
 8002b42:	4a92      	ldr	r2, [pc, #584]	@ (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d046      	beq.n	8002bd6 <HAL_GPIO_Init+0xfa>
 8002b48:	4a90      	ldr	r2, [pc, #576]	@ (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d85d      	bhi.n	8002c0a <HAL_GPIO_Init+0x12e>
 8002b4e:	2b12      	cmp	r3, #18
 8002b50:	d82a      	bhi.n	8002ba8 <HAL_GPIO_Init+0xcc>
 8002b52:	2b12      	cmp	r3, #18
 8002b54:	d859      	bhi.n	8002c0a <HAL_GPIO_Init+0x12e>
 8002b56:	a201      	add	r2, pc, #4	@ (adr r2, 8002b5c <HAL_GPIO_Init+0x80>)
 8002b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5c:	08002bd7 	.word	0x08002bd7
 8002b60:	08002bb1 	.word	0x08002bb1
 8002b64:	08002bc3 	.word	0x08002bc3
 8002b68:	08002c05 	.word	0x08002c05
 8002b6c:	08002c0b 	.word	0x08002c0b
 8002b70:	08002c0b 	.word	0x08002c0b
 8002b74:	08002c0b 	.word	0x08002c0b
 8002b78:	08002c0b 	.word	0x08002c0b
 8002b7c:	08002c0b 	.word	0x08002c0b
 8002b80:	08002c0b 	.word	0x08002c0b
 8002b84:	08002c0b 	.word	0x08002c0b
 8002b88:	08002c0b 	.word	0x08002c0b
 8002b8c:	08002c0b 	.word	0x08002c0b
 8002b90:	08002c0b 	.word	0x08002c0b
 8002b94:	08002c0b 	.word	0x08002c0b
 8002b98:	08002c0b 	.word	0x08002c0b
 8002b9c:	08002c0b 	.word	0x08002c0b
 8002ba0:	08002bb9 	.word	0x08002bb9
 8002ba4:	08002bcd 	.word	0x08002bcd
 8002ba8:	4a79      	ldr	r2, [pc, #484]	@ (8002d90 <HAL_GPIO_Init+0x2b4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bae:	e02c      	b.n	8002c0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	623b      	str	r3, [r7, #32]
          break;
 8002bb6:	e029      	b.n	8002c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	623b      	str	r3, [r7, #32]
          break;
 8002bc0:	e024      	b.n	8002c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	623b      	str	r3, [r7, #32]
          break;
 8002bca:	e01f      	b.n	8002c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	623b      	str	r3, [r7, #32]
          break;
 8002bd4:	e01a      	b.n	8002c0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bde:	2304      	movs	r3, #4
 8002be0:	623b      	str	r3, [r7, #32]
          break;
 8002be2:	e013      	b.n	8002c0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d105      	bne.n	8002bf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bec:	2308      	movs	r3, #8
 8002bee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	611a      	str	r2, [r3, #16]
          break;
 8002bf6:	e009      	b.n	8002c0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	615a      	str	r2, [r3, #20]
          break;
 8002c02:	e003      	b.n	8002c0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
          break;
 8002c08:	e000      	b.n	8002c0c <HAL_GPIO_Init+0x130>
          break;
 8002c0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2bff      	cmp	r3, #255	@ 0xff
 8002c10:	d801      	bhi.n	8002c16 <HAL_GPIO_Init+0x13a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	e001      	b.n	8002c1a <HAL_GPIO_Init+0x13e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2bff      	cmp	r3, #255	@ 0xff
 8002c20:	d802      	bhi.n	8002c28 <HAL_GPIO_Init+0x14c>
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	e002      	b.n	8002c2e <HAL_GPIO_Init+0x152>
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	3b08      	subs	r3, #8
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	210f      	movs	r1, #15
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	6a39      	ldr	r1, [r7, #32]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80b1 	beq.w	8002dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4a4c      	ldr	r2, [pc, #304]	@ (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6193      	str	r3, [r2, #24]
 8002c68:	4b4a      	ldr	r3, [pc, #296]	@ (8002d94 <HAL_GPIO_Init+0x2b8>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c74:	4a48      	ldr	r2, [pc, #288]	@ (8002d98 <HAL_GPIO_Init+0x2bc>)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4013      	ands	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a40      	ldr	r2, [pc, #256]	@ (8002d9c <HAL_GPIO_Init+0x2c0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <HAL_GPIO_Init+0x1ec>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8002da0 <HAL_GPIO_Init+0x2c4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_GPIO_Init+0x1e8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3e      	ldr	r2, [pc, #248]	@ (8002da4 <HAL_GPIO_Init+0x2c8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d007      	beq.n	8002cc0 <HAL_GPIO_Init+0x1e4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3d      	ldr	r2, [pc, #244]	@ (8002da8 <HAL_GPIO_Init+0x2cc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_GPIO_Init+0x1e0>
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e006      	b.n	8002cca <HAL_GPIO_Init+0x1ee>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	e004      	b.n	8002cca <HAL_GPIO_Init+0x1ee>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e002      	b.n	8002cca <HAL_GPIO_Init+0x1ee>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_GPIO_Init+0x1ee>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ccc:	f002 0203 	and.w	r2, r2, #3
 8002cd0:	0092      	lsls	r2, r2, #2
 8002cd2:	4093      	lsls	r3, r2
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cda:	492f      	ldr	r1, [pc, #188]	@ (8002d98 <HAL_GPIO_Init+0x2bc>)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d006      	beq.n	8002d02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	492c      	ldr	r1, [pc, #176]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]
 8002d00:	e006      	b.n	8002d10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d02:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	4928      	ldr	r1, [pc, #160]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d1c:	4b23      	ldr	r3, [pc, #140]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	4922      	ldr	r1, [pc, #136]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60cb      	str	r3, [r1, #12]
 8002d28:	e006      	b.n	8002d38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d2a:	4b20      	ldr	r3, [pc, #128]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	491e      	ldr	r1, [pc, #120]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d44:	4b19      	ldr	r3, [pc, #100]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	4918      	ldr	r1, [pc, #96]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d52:	4b16      	ldr	r3, [pc, #88]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	4914      	ldr	r1, [pc, #80]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d021      	beq.n	8002db0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	490e      	ldr	r1, [pc, #56]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
 8002d78:	e021      	b.n	8002dbe <HAL_GPIO_Init+0x2e2>
 8002d7a:	bf00      	nop
 8002d7c:	10320000 	.word	0x10320000
 8002d80:	10310000 	.word	0x10310000
 8002d84:	10220000 	.word	0x10220000
 8002d88:	10210000 	.word	0x10210000
 8002d8c:	10120000 	.word	0x10120000
 8002d90:	10110000 	.word	0x10110000
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40010800 	.word	0x40010800
 8002da0:	40010c00 	.word	0x40010c00
 8002da4:	40011000 	.word	0x40011000
 8002da8:	40011400 	.word	0x40011400
 8002dac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_GPIO_Init+0x304>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	4909      	ldr	r1, [pc, #36]	@ (8002de0 <HAL_GPIO_Init+0x304>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f47f ae8e 	bne.w	8002af0 <HAL_GPIO_Init+0x14>
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	372c      	adds	r7, #44	@ 0x2c
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	40010400 	.word	0x40010400

08002de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
 8002df0:	4613      	mov	r3, r2
 8002df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002df4:	787b      	ldrb	r3, [r7, #1]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e00:	e003      	b.n	8002e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e02:	887b      	ldrh	r3, [r7, #2]
 8002e04:	041a      	lsls	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	611a      	str	r2, [r3, #16]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e12b      	b.n	800307e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fb5e 	bl	80024fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	@ 0x24
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e78:	f001 fbfc 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8002e7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4a81      	ldr	r2, [pc, #516]	@ (8003088 <HAL_I2C_Init+0x274>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d807      	bhi.n	8002e98 <HAL_I2C_Init+0x84>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a80      	ldr	r2, [pc, #512]	@ (800308c <HAL_I2C_Init+0x278>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	bf94      	ite	ls
 8002e90:	2301      	movls	r3, #1
 8002e92:	2300      	movhi	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e006      	b.n	8002ea6 <HAL_I2C_Init+0x92>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a7d      	ldr	r2, [pc, #500]	@ (8003090 <HAL_I2C_Init+0x27c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	bf94      	ite	ls
 8002ea0:	2301      	movls	r3, #1
 8002ea2:	2300      	movhi	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0e7      	b.n	800307e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4a78      	ldr	r2, [pc, #480]	@ (8003094 <HAL_I2C_Init+0x280>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0c9b      	lsrs	r3, r3, #18
 8002eb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a6a      	ldr	r2, [pc, #424]	@ (8003088 <HAL_I2C_Init+0x274>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d802      	bhi.n	8002ee8 <HAL_I2C_Init+0xd4>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	e009      	b.n	8002efc <HAL_I2C_Init+0xe8>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	4a69      	ldr	r2, [pc, #420]	@ (8003098 <HAL_I2C_Init+0x284>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	3301      	adds	r3, #1
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	495c      	ldr	r1, [pc, #368]	@ (8003088 <HAL_I2C_Init+0x274>)
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	d819      	bhi.n	8002f50 <HAL_I2C_Init+0x13c>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e59      	subs	r1, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2a:	1c59      	adds	r1, r3, #1
 8002f2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f30:	400b      	ands	r3, r1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_I2C_Init+0x138>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1e59      	subs	r1, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4a:	e051      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	e04f      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <HAL_I2C_Init+0x168>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e58      	subs	r0, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	440b      	add	r3, r1
 8002f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e012      	b.n	8002fa2 <HAL_I2C_Init+0x18e>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1e58      	subs	r0, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	0099      	lsls	r1, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Init+0x196>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e022      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_I2C_Init+0x1bc>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1e58      	subs	r0, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	440b      	add	r3, r1
 8002fc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fce:	e00f      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e58      	subs	r0, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	0099      	lsls	r1, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	6809      	ldr	r1, [r1, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800301e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6911      	ldr	r1, [r2, #16]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68d2      	ldr	r2, [r2, #12]
 800302a:	4311      	orrs	r1, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	430b      	orrs	r3, r1
 8003032:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	000186a0 	.word	0x000186a0
 800308c:	001e847f 	.word	0x001e847f
 8003090:	003d08ff 	.word	0x003d08ff
 8003094:	431bde83 	.word	0x431bde83
 8003098:	10624dd3 	.word	0x10624dd3

0800309c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	461a      	mov	r2, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	817b      	strh	r3, [r7, #10]
 80030ae:	460b      	mov	r3, r1
 80030b0:	813b      	strh	r3, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030b6:	f7ff fbff 	bl	80028b8 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	f040 80d9 	bne.w	800327c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2319      	movs	r3, #25
 80030d0:	2201      	movs	r2, #1
 80030d2:	496d      	ldr	r1, [pc, #436]	@ (8003288 <HAL_I2C_Mem_Write+0x1ec>)
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fccd 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
 80030e2:	e0cc      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x56>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0c5      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d007      	beq.n	8003118 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003126:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2221      	movs	r2, #33	@ 0x21
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2240      	movs	r2, #64	@ 0x40
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003148:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a4d      	ldr	r2, [pc, #308]	@ (800328c <HAL_I2C_Mem_Write+0x1f0>)
 8003158:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800315a:	88f8      	ldrh	r0, [r7, #6]
 800315c:	893a      	ldrh	r2, [r7, #8]
 800315e:	8979      	ldrh	r1, [r7, #10]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	4603      	mov	r3, r0
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fb04 	bl	8003778 <I2C_RequestMemoryWrite>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d052      	beq.n	800321c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e081      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fd92 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00d      	beq.n	80031a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	2b04      	cmp	r3, #4
 8003190:	d107      	bne.n	80031a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06b      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	781a      	ldrb	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d11b      	bne.n	800321c <HAL_I2C_Mem_Write+0x180>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d017      	beq.n	800321c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	781a      	ldrb	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1aa      	bne.n	800317a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fd85 	bl	8003d38 <I2C_WaitOnBTFFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00d      	beq.n	8003250 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	2b04      	cmp	r3, #4
 800323a:	d107      	bne.n	800324c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e016      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	00100002 	.word	0x00100002
 800328c:	ffff0000 	.word	0xffff0000

08003290 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08c      	sub	sp, #48	@ 0x30
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	4608      	mov	r0, r1
 800329a:	4611      	mov	r1, r2
 800329c:	461a      	mov	r2, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	817b      	strh	r3, [r7, #10]
 80032a2:	460b      	mov	r3, r1
 80032a4:	813b      	strh	r3, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ae:	f7ff fb03 	bl	80028b8 <HAL_GetTick>
 80032b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b20      	cmp	r3, #32
 80032be:	f040 8250 	bne.w	8003762 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2319      	movs	r3, #25
 80032c8:	2201      	movs	r2, #1
 80032ca:	4982      	ldr	r1, [pc, #520]	@ (80034d4 <HAL_I2C_Mem_Read+0x244>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fbd1 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
 80032da:	e243      	b.n	8003764 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_I2C_Mem_Read+0x5a>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e23c      	b.n	8003764 <HAL_I2C_Mem_Read+0x4d4>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d007      	beq.n	8003310 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800331e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2222      	movs	r2, #34	@ 0x22
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2240      	movs	r2, #64	@ 0x40
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800333a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003340:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a62      	ldr	r2, [pc, #392]	@ (80034d8 <HAL_I2C_Mem_Read+0x248>)
 8003350:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003352:	88f8      	ldrh	r0, [r7, #6]
 8003354:	893a      	ldrh	r2, [r7, #8]
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	4603      	mov	r3, r0
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fa9e 	bl	80038a4 <I2C_RequestMemoryRead>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e1f8      	b.n	8003764 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003376:	2b00      	cmp	r3, #0
 8003378:	d113      	bne.n	80033a2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e1cc      	b.n	800373c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d11e      	bne.n	80033e8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033ba:	b672      	cpsid	i
}
 80033bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033e4:	b662      	cpsie	i
}
 80033e6:	e035      	b.n	8003454 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d11e      	bne.n	800342e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003400:	b672      	cpsid	i
}
 8003402:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003428:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800342a:	b662      	cpsie	i
}
 800342c:	e012      	b.n	8003454 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800343c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003454:	e172      	b.n	800373c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345a:	2b03      	cmp	r3, #3
 800345c:	f200 811f 	bhi.w	800369e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003464:	2b01      	cmp	r3, #1
 8003466:	d123      	bne.n	80034b0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800346a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fcab 	bl	8003dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e173      	b.n	8003764 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034ae:	e145      	b.n	800373c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d152      	bne.n	800355e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034be:	2200      	movs	r2, #0
 80034c0:	4906      	ldr	r1, [pc, #24]	@ (80034dc <HAL_I2C_Mem_Read+0x24c>)
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 fad6 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e148      	b.n	8003764 <HAL_I2C_Mem_Read+0x4d4>
 80034d2:	bf00      	nop
 80034d4:	00100002 	.word	0x00100002
 80034d8:	ffff0000 	.word	0xffff0000
 80034dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80034e0:	b672      	cpsid	i
}
 80034e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003526:	b662      	cpsie	i
}
 8003528:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800355c:	e0ee      	b.n	800373c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003564:	2200      	movs	r2, #0
 8003566:	4981      	ldr	r1, [pc, #516]	@ (800376c <HAL_I2C_Mem_Read+0x4dc>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa83 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0f5      	b.n	8003764 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003586:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003588:	b672      	cpsid	i
}
 800358a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035be:	4b6c      	ldr	r3, [pc, #432]	@ (8003770 <HAL_I2C_Mem_Read+0x4e0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	08db      	lsrs	r3, r3, #3
 80035c4:	4a6b      	ldr	r2, [pc, #428]	@ (8003774 <HAL_I2C_Mem_Read+0x4e4>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	0a1a      	lsrs	r2, r3, #8
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	00da      	lsls	r2, r3, #3
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	3b01      	subs	r3, #1
 80035dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d118      	bne.n	8003616 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003606:	b662      	cpsie	i
}
 8003608:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e0a6      	b.n	8003764 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d1d9      	bne.n	80035d8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003666:	b662      	cpsie	i
}
 8003668:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800369c:	e04e      	b.n	800373c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fb90 	bl	8003dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e058      	b.n	8003764 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d124      	bne.n	800373c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d107      	bne.n	800370a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003708:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	f47f ae88 	bne.w	8003456 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3728      	adds	r7, #40	@ 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	00010004 	.word	0x00010004
 8003770:	20000000 	.word	0x20000000
 8003774:	14f8b589 	.word	0x14f8b589

08003778 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	4608      	mov	r0, r1
 8003782:	4611      	mov	r1, r2
 8003784:	461a      	mov	r2, r3
 8003786:	4603      	mov	r3, r0
 8003788:	817b      	strh	r3, [r7, #10]
 800378a:	460b      	mov	r3, r1
 800378c:	813b      	strh	r3, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f960 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037c8:	d103      	bne.n	80037d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e05f      	b.n	8003896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	6a3a      	ldr	r2, [r7, #32]
 80037ea:	492d      	ldr	r1, [pc, #180]	@ (80038a0 <I2C_RequestMemoryWrite+0x128>)
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f9bb 	bl	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e04c      	b.n	8003896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003814:	6a39      	ldr	r1, [r7, #32]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fa46 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00d      	beq.n	800383e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	2b04      	cmp	r3, #4
 8003828:	d107      	bne.n	800383a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003838:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e02b      	b.n	8003896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d105      	bne.n	8003850 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]
 800384e:	e021      	b.n	8003894 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003850:	893b      	ldrh	r3, [r7, #8]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	b29b      	uxth	r3, r3
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800385e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003860:	6a39      	ldr	r1, [r7, #32]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fa20 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	2b04      	cmp	r3, #4
 8003874:	d107      	bne.n	8003886 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003884:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e005      	b.n	8003896 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800388a:	893b      	ldrh	r3, [r7, #8]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	00010002 	.word	0x00010002

080038a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	4608      	mov	r0, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	461a      	mov	r2, r3
 80038b2:	4603      	mov	r3, r0
 80038b4:	817b      	strh	r3, [r7, #10]
 80038b6:	460b      	mov	r3, r1
 80038b8:	813b      	strh	r3, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f8c2 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003904:	d103      	bne.n	800390e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0aa      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003920:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	6a3a      	ldr	r2, [r7, #32]
 8003926:	4952      	ldr	r1, [pc, #328]	@ (8003a70 <I2C_RequestMemoryRead+0x1cc>)
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f91d 	bl	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e097      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800394e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f9a8 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	2b04      	cmp	r3, #4
 8003964:	d107      	bne.n	8003976 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003974:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e076      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003980:	893b      	ldrh	r3, [r7, #8]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	611a      	str	r2, [r3, #16]
 800398a:	e021      	b.n	80039d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800398c:	893b      	ldrh	r3, [r7, #8]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	b29b      	uxth	r3, r3
 8003992:	b2da      	uxtb	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399c:	6a39      	ldr	r1, [r7, #32]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f982 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d107      	bne.n	80039c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e050      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039c6:	893b      	ldrh	r3, [r7, #8]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d2:	6a39      	ldr	r1, [r7, #32]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f967 	bl	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00d      	beq.n	80039fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d107      	bne.n	80039f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e035      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f82b 	bl	8003a74 <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a32:	d103      	bne.n	8003a3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e013      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a40:	897b      	ldrh	r3, [r7, #10]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	6a3a      	ldr	r2, [r7, #32]
 8003a54:	4906      	ldr	r1, [pc, #24]	@ (8003a70 <I2C_RequestMemoryRead+0x1cc>)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f886 	bl	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	00010002 	.word	0x00010002

08003a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a84:	e048      	b.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d044      	beq.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fe ff13 	bl	80028b8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d139      	bne.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	0c1b      	lsrs	r3, r3, #16
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10d      	bne.n	8003aca <I2C_WaitOnFlagUntilTimeout+0x56>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	e00c      	b.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	43da      	mvns	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d116      	bne.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e023      	b.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10d      	bne.n	8003b3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	e00c      	b.n	8003b58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	43da      	mvns	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d093      	beq.n	8003a86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b76:	e071      	b.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b86:	d123      	bne.n	8003bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e067      	b.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d041      	beq.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd8:	f7fe fe6e 	bl	80028b8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d302      	bcc.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d136      	bne.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d10c      	bne.n	8003c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	e00b      	b.n	8003c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e021      	b.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10c      	bne.n	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	43da      	mvns	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4013      	ands	r3, r2
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e00b      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	43da      	mvns	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf14      	ite	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	2300      	moveq	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f47f af6d 	bne.w	8003b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb4:	e034      	b.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f8e3 	bl	8003e82 <I2C_IsAcknowledgeFailed>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e034      	b.n	8003d30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d028      	beq.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fe fdf3 	bl	80028b8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11d      	bne.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b80      	cmp	r3, #128	@ 0x80
 8003cf0:	d016      	beq.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	f043 0220 	orr.w	r2, r3, #32
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2a:	2b80      	cmp	r3, #128	@ 0x80
 8003d2c:	d1c3      	bne.n	8003cb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d44:	e034      	b.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f89b 	bl	8003e82 <I2C_IsAcknowledgeFailed>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e034      	b.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d028      	beq.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5e:	f7fe fdab 	bl	80028b8 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d11d      	bne.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d016      	beq.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e007      	b.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d1c3      	bne.n	8003d46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dd4:	e049      	b.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d119      	bne.n	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0210 	mvn.w	r2, #16
 8003dec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e030      	b.n	8003e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e18:	f7fe fd4e 	bl	80028b8 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d302      	bcc.n	8003e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11d      	bne.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d016      	beq.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e007      	b.n	8003e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e74:	2b40      	cmp	r3, #64	@ 0x40
 8003e76:	d1ae      	bne.n	8003dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e98:	d11b      	bne.n	8003ed2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ea2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	f043 0204 	orr.w	r2, r3, #4
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr
	...

08003ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e272      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8087 	beq.w	800400e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f00:	4b92      	ldr	r3, [pc, #584]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d00c      	beq.n	8003f26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f0c:	4b8f      	ldr	r3, [pc, #572]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d112      	bne.n	8003f3e <HAL_RCC_OscConfig+0x5e>
 8003f18:	4b8c      	ldr	r3, [pc, #560]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f24:	d10b      	bne.n	8003f3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f26:	4b89      	ldr	r3, [pc, #548]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d06c      	beq.n	800400c <HAL_RCC_OscConfig+0x12c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d168      	bne.n	800400c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e24c      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_OscConfig+0x76>
 8003f48:	4b80      	ldr	r3, [pc, #512]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a7f      	ldr	r2, [pc, #508]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	e02e      	b.n	8003fb4 <HAL_RCC_OscConfig+0xd4>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x98>
 8003f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a7a      	ldr	r2, [pc, #488]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b78      	ldr	r3, [pc, #480]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a77      	ldr	r2, [pc, #476]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e01d      	b.n	8003fb4 <HAL_RCC_OscConfig+0xd4>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0xbc>
 8003f82:	4b72      	ldr	r3, [pc, #456]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a71      	ldr	r2, [pc, #452]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a6e      	ldr	r2, [pc, #440]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_OscConfig+0xd4>
 8003f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b68      	ldr	r3, [pc, #416]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a67      	ldr	r2, [pc, #412]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d013      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fc7c 	bl	80028b8 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fe fc78 	bl	80028b8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	@ 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e200      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0xe4>
 8003fe2:	e014      	b.n	800400e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fc68 	bl	80028b8 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fec:	f7fe fc64 	bl	80028b8 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	@ 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1ec      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffe:	4b53      	ldr	r3, [pc, #332]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x10c>
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d063      	beq.n	80040e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800401a:	4b4c      	ldr	r3, [pc, #304]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004026:	4b49      	ldr	r3, [pc, #292]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b08      	cmp	r3, #8
 8004030:	d11c      	bne.n	800406c <HAL_RCC_OscConfig+0x18c>
 8004032:	4b46      	ldr	r3, [pc, #280]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d116      	bne.n	800406c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	4b43      	ldr	r3, [pc, #268]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_RCC_OscConfig+0x176>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d001      	beq.n	8004056 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e1c0      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004056:	4b3d      	ldr	r3, [pc, #244]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4939      	ldr	r1, [pc, #228]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	e03a      	b.n	80040e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004074:	4b36      	ldr	r3, [pc, #216]	@ (8004150 <HAL_RCC_OscConfig+0x270>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fe fc1d 	bl	80028b8 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004082:	f7fe fc19 	bl	80028b8 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e1a1      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004094:	4b2d      	ldr	r3, [pc, #180]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a0:	4b2a      	ldr	r3, [pc, #168]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4927      	ldr	r1, [pc, #156]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]
 80040b4:	e015      	b.n	80040e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b6:	4b26      	ldr	r3, [pc, #152]	@ (8004150 <HAL_RCC_OscConfig+0x270>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fe fbfc 	bl	80028b8 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c4:	f7fe fbf8 	bl	80028b8 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e180      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d6:	4b1d      	ldr	r3, [pc, #116]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d03a      	beq.n	8004164 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d019      	beq.n	800412a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f6:	4b17      	ldr	r3, [pc, #92]	@ (8004154 <HAL_RCC_OscConfig+0x274>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fc:	f7fe fbdc 	bl	80028b8 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004104:	f7fe fbd8 	bl	80028b8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e160      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004116:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <HAL_RCC_OscConfig+0x26c>)
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004122:	2001      	movs	r0, #1
 8004124:	f000 face 	bl	80046c4 <RCC_Delay>
 8004128:	e01c      	b.n	8004164 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412a:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <HAL_RCC_OscConfig+0x274>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004130:	f7fe fbc2 	bl	80028b8 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004136:	e00f      	b.n	8004158 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004138:	f7fe fbbe 	bl	80028b8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d908      	bls.n	8004158 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e146      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
 8004150:	42420000 	.word	0x42420000
 8004154:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004158:	4b92      	ldr	r3, [pc, #584]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e9      	bne.n	8004138 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80a6 	beq.w	80042be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004176:	4b8b      	ldr	r3, [pc, #556]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10d      	bne.n	800419e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	4b88      	ldr	r3, [pc, #544]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4a87      	ldr	r2, [pc, #540]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418c:	61d3      	str	r3, [r2, #28]
 800418e:	4b85      	ldr	r3, [pc, #532]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b82      	ldr	r3, [pc, #520]	@ (80043a8 <HAL_RCC_OscConfig+0x4c8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d118      	bne.n	80041dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041aa:	4b7f      	ldr	r3, [pc, #508]	@ (80043a8 <HAL_RCC_OscConfig+0x4c8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7e      	ldr	r2, [pc, #504]	@ (80043a8 <HAL_RCC_OscConfig+0x4c8>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7fe fb7f 	bl	80028b8 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7fe fb7b 	bl	80028b8 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b64      	cmp	r3, #100	@ 0x64
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e103      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	4b75      	ldr	r3, [pc, #468]	@ (80043a8 <HAL_RCC_OscConfig+0x4c8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x312>
 80041e4:	4b6f      	ldr	r3, [pc, #444]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4a6e      	ldr	r2, [pc, #440]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6213      	str	r3, [r2, #32]
 80041f0:	e02d      	b.n	800424e <HAL_RCC_OscConfig+0x36e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x334>
 80041fa:	4b6a      	ldr	r3, [pc, #424]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	4a69      	ldr	r2, [pc, #420]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	6213      	str	r3, [r2, #32]
 8004206:	4b67      	ldr	r3, [pc, #412]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	4a66      	ldr	r2, [pc, #408]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 800420c:	f023 0304 	bic.w	r3, r3, #4
 8004210:	6213      	str	r3, [r2, #32]
 8004212:	e01c      	b.n	800424e <HAL_RCC_OscConfig+0x36e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b05      	cmp	r3, #5
 800421a:	d10c      	bne.n	8004236 <HAL_RCC_OscConfig+0x356>
 800421c:	4b61      	ldr	r3, [pc, #388]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	4a60      	ldr	r2, [pc, #384]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	f043 0304 	orr.w	r3, r3, #4
 8004226:	6213      	str	r3, [r2, #32]
 8004228:	4b5e      	ldr	r3, [pc, #376]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4a5d      	ldr	r2, [pc, #372]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6213      	str	r3, [r2, #32]
 8004234:	e00b      	b.n	800424e <HAL_RCC_OscConfig+0x36e>
 8004236:	4b5b      	ldr	r3, [pc, #364]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	4a5a      	ldr	r2, [pc, #360]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	6213      	str	r3, [r2, #32]
 8004242:	4b58      	ldr	r3, [pc, #352]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	4a57      	ldr	r2, [pc, #348]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d015      	beq.n	8004282 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004256:	f7fe fb2f 	bl	80028b8 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425c:	e00a      	b.n	8004274 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425e:	f7fe fb2b 	bl	80028b8 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e0b1      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004274:	4b4b      	ldr	r3, [pc, #300]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0ee      	beq.n	800425e <HAL_RCC_OscConfig+0x37e>
 8004280:	e014      	b.n	80042ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004282:	f7fe fb19 	bl	80028b8 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	e00a      	b.n	80042a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428a:	f7fe fb15 	bl	80028b8 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e09b      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a0:	4b40      	ldr	r3, [pc, #256]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1ee      	bne.n	800428a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b2:	4b3c      	ldr	r3, [pc, #240]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	4a3b      	ldr	r2, [pc, #236]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8087 	beq.w	80043d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c8:	4b36      	ldr	r3, [pc, #216]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d061      	beq.n	8004398 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d146      	bne.n	800436a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042dc:	4b33      	ldr	r3, [pc, #204]	@ (80043ac <HAL_RCC_OscConfig+0x4cc>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fe fae9 	bl	80028b8 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ea:	f7fe fae5 	bl	80028b8 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e06d      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042fc:	4b29      	ldr	r3, [pc, #164]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f0      	bne.n	80042ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004310:	d108      	bne.n	8004324 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004312:	4b24      	ldr	r3, [pc, #144]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4921      	ldr	r1, [pc, #132]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004324:	4b1f      	ldr	r3, [pc, #124]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a19      	ldr	r1, [r3, #32]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	430b      	orrs	r3, r1
 8004336:	491b      	ldr	r1, [pc, #108]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800433c:	4b1b      	ldr	r3, [pc, #108]	@ (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fe fab9 	bl	80028b8 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434a:	f7fe fab5 	bl	80028b8 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e03d      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800435c:	4b11      	ldr	r3, [pc, #68]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x46a>
 8004368:	e035      	b.n	80043d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fe faa2 	bl	80028b8 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fe fa9e 	bl	80028b8 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e026      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_RCC_OscConfig+0x4c4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x498>
 8004396:	e01e      	b.n	80043d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e019      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40007000 	.word	0x40007000
 80043ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_RCC_OscConfig+0x500>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d106      	bne.n	80043d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40021000 	.word	0x40021000

080043e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0d0      	b.n	800459a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f8:	4b6a      	ldr	r3, [pc, #424]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d910      	bls.n	8004428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b67      	ldr	r3, [pc, #412]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 0207 	bic.w	r2, r3, #7
 800440e:	4965      	ldr	r1, [pc, #404]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b63      	ldr	r3, [pc, #396]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0b8      	b.n	800459a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004440:	4b59      	ldr	r3, [pc, #356]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4a58      	ldr	r2, [pc, #352]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800444a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004458:	4b53      	ldr	r3, [pc, #332]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a52      	ldr	r2, [pc, #328]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004464:	4b50      	ldr	r3, [pc, #320]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	494d      	ldr	r1, [pc, #308]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004472:	4313      	orrs	r3, r2
 8004474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d040      	beq.n	8004504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d107      	bne.n	800449a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	4b47      	ldr	r3, [pc, #284]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d115      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e07f      	b.n	800459a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a2:	4b41      	ldr	r3, [pc, #260]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e073      	b.n	800459a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b2:	4b3d      	ldr	r3, [pc, #244]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e06b      	b.n	800459a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c2:	4b39      	ldr	r3, [pc, #228]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f023 0203 	bic.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4936      	ldr	r1, [pc, #216]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d4:	f7fe f9f0 	bl	80028b8 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044dc:	f7fe f9ec 	bl	80028b8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e053      	b.n	800459a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	4b2d      	ldr	r3, [pc, #180]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 020c 	and.w	r2, r3, #12
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	429a      	cmp	r2, r3
 8004502:	d1eb      	bne.n	80044dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004504:	4b27      	ldr	r3, [pc, #156]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d210      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b24      	ldr	r3, [pc, #144]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 0207 	bic.w	r2, r3, #7
 800451a:	4922      	ldr	r1, [pc, #136]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c0>)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b20      	ldr	r3, [pc, #128]	@ (80045a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e032      	b.n	800459a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4916      	ldr	r1, [pc, #88]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 800454e:	4313      	orrs	r3, r2
 8004550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800455e:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	490e      	ldr	r1, [pc, #56]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004572:	f000 f821 	bl	80045b8 <HAL_RCC_GetSysClockFreq>
 8004576:	4602      	mov	r2, r0
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_RCC_ClockConfig+0x1c4>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	490a      	ldr	r1, [pc, #40]	@ (80045ac <HAL_RCC_ClockConfig+0x1c8>)
 8004584:	5ccb      	ldrb	r3, [r1, r3]
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	4a09      	ldr	r2, [pc, #36]	@ (80045b0 <HAL_RCC_ClockConfig+0x1cc>)
 800458c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe f94e 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40022000 	.word	0x40022000
 80045a8:	40021000 	.word	0x40021000
 80045ac:	0800b0c8 	.word	0x0800b0c8
 80045b0:	20000000 	.word	0x20000000
 80045b4:	20000004 	.word	0x20000004

080045b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	2300      	movs	r3, #0
 80045cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045d2:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <HAL_RCC_GetSysClockFreq+0x94>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d002      	beq.n	80045e8 <HAL_RCC_GetSysClockFreq+0x30>
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d003      	beq.n	80045ee <HAL_RCC_GetSysClockFreq+0x36>
 80045e6:	e027      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045e8:	4b19      	ldr	r3, [pc, #100]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ea:	613b      	str	r3, [r7, #16]
      break;
 80045ec:	e027      	b.n	800463e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	0c9b      	lsrs	r3, r3, #18
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	4a17      	ldr	r2, [pc, #92]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045f8:	5cd3      	ldrb	r3, [r2, r3]
 80045fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d010      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004606:	4b11      	ldr	r3, [pc, #68]	@ (800464c <HAL_RCC_GetSysClockFreq+0x94>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	0c5b      	lsrs	r3, r3, #17
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	4a11      	ldr	r2, [pc, #68]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004612:	5cd3      	ldrb	r3, [r2, r3]
 8004614:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a0d      	ldr	r2, [pc, #52]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x98>)
 800461a:	fb03 f202 	mul.w	r2, r3, r2
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e004      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a0c      	ldr	r2, [pc, #48]	@ (800465c <HAL_RCC_GetSysClockFreq+0xa4>)
 800462c:	fb02 f303 	mul.w	r3, r2, r3
 8004630:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	613b      	str	r3, [r7, #16]
      break;
 8004636:	e002      	b.n	800463e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x98>)
 800463a:	613b      	str	r3, [r7, #16]
      break;
 800463c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800463e:	693b      	ldr	r3, [r7, #16]
}
 8004640:	4618      	mov	r0, r3
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	007a1200 	.word	0x007a1200
 8004654:	0800b0e0 	.word	0x0800b0e0
 8004658:	0800b0f0 	.word	0x0800b0f0
 800465c:	003d0900 	.word	0x003d0900

08004660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004664:	4b02      	ldr	r3, [pc, #8]	@ (8004670 <HAL_RCC_GetHCLKFreq+0x10>)
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr
 8004670:	20000000 	.word	0x20000000

08004674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004678:	f7ff fff2 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b05      	ldr	r3, [pc, #20]	@ (8004694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4903      	ldr	r1, [pc, #12]	@ (8004698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004690:	4618      	mov	r0, r3
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	0800b0d8 	.word	0x0800b0d8

0800469c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046a0:	f7ff ffde 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	0adb      	lsrs	r3, r3, #11
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4903      	ldr	r1, [pc, #12]	@ (80046c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40021000 	.word	0x40021000
 80046c0:	0800b0d8 	.word	0x0800b0d8

080046c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046cc:	4b0a      	ldr	r3, [pc, #40]	@ (80046f8 <RCC_Delay+0x34>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	@ (80046fc <RCC_Delay+0x38>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	0a5b      	lsrs	r3, r3, #9
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046e0:	bf00      	nop
  }
  while (Delay --);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	60fa      	str	r2, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f9      	bne.n	80046e0 <RCC_Delay+0x1c>
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	20000000 	.word	0x20000000
 80046fc:	10624dd3 	.word	0x10624dd3

08004700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e042      	b.n	8004798 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd ff26 	bl	8002578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2224      	movs	r2, #36	@ 0x24
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f971 	bl	8004a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	@ 0x28
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d175      	bne.n	80048ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_UART_Transmit+0x2c>
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e06e      	b.n	80048ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2221      	movs	r2, #33	@ 0x21
 80047da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047de:	f7fe f86b 	bl	80028b8 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	88fa      	ldrh	r2, [r7, #6]
 80047ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f8:	d108      	bne.n	800480c <HAL_UART_Transmit+0x6c>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e003      	b.n	8004814 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004814:	e02e      	b.n	8004874 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	2180      	movs	r1, #128	@ 0x80
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f848 	bl	80048b6 <UART_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e03a      	b.n	80048ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800484c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	3302      	adds	r3, #2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e007      	b.n	8004866 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	3301      	adds	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1cb      	bne.n	8004816 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	2140      	movs	r1, #64	@ 0x40
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f814 	bl	80048b6 <UART_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e006      	b.n	80048ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b086      	sub	sp, #24
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c6:	e03b      	b.n	8004940 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d037      	beq.n	8004940 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d0:	f7fd fff2 	bl	80028b8 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	6a3a      	ldr	r2, [r7, #32]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d302      	bcc.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e03a      	b.n	8004960 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d023      	beq.n	8004940 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b80      	cmp	r3, #128	@ 0x80
 80048fc:	d020      	beq.n	8004940 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b40      	cmp	r3, #64	@ 0x40
 8004902:	d01d      	beq.n	8004940 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b08      	cmp	r3, #8
 8004910:	d116      	bne.n	8004940 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f81d 	bl	8004968 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2208      	movs	r2, #8
 8004932:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e00f      	b.n	8004960 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	4013      	ands	r3, r2
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	429a      	cmp	r2, r3
 800495c:	d0b4      	beq.n	80048c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004968:	b480      	push	{r7}
 800496a:	b095      	sub	sp, #84	@ 0x54
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004982:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004990:	643a      	str	r2, [r7, #64]	@ 0x40
 8004992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004996:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800499e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e5      	bne.n	8004970 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3314      	adds	r3, #20
 80049c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e5      	bne.n	80049a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d119      	bne.n	8004a14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	330c      	adds	r3, #12
 80049e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f023 0310 	bic.w	r3, r3, #16
 80049f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a00:	61ba      	str	r2, [r7, #24]
 8004a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6979      	ldr	r1, [r7, #20]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e5      	bne.n	80049e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a22:	bf00      	nop
 8004a24:	3754      	adds	r7, #84	@ 0x54
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a66:	f023 030c 	bic.w	r3, r3, #12
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b40 <UART_SetConfig+0x114>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d103      	bne.n	8004a9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a94:	f7ff fe02 	bl	800469c <HAL_RCC_GetPCLK2Freq>
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	e002      	b.n	8004aa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a9c:	f7ff fdea 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8004aa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009a      	lsls	r2, r3, #2
 8004aac:	441a      	add	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	4a22      	ldr	r2, [pc, #136]	@ (8004b44 <UART_SetConfig+0x118>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	0119      	lsls	r1, r3, #4
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b44 <UART_SetConfig+0x118>)
 8004ada:	fba3 0302 	umull	r0, r3, r3, r2
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2064      	movs	r0, #100	@ 0x64
 8004ae2:	fb00 f303 	mul.w	r3, r0, r3
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	3332      	adds	r3, #50	@ 0x32
 8004aec:	4a15      	ldr	r2, [pc, #84]	@ (8004b44 <UART_SetConfig+0x118>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004af8:	4419      	add	r1, r3
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009a      	lsls	r2, r3, #2
 8004b04:	441a      	add	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b10:	4b0c      	ldr	r3, [pc, #48]	@ (8004b44 <UART_SetConfig+0x118>)
 8004b12:	fba3 0302 	umull	r0, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	2064      	movs	r0, #100	@ 0x64
 8004b1a:	fb00 f303 	mul.w	r3, r0, r3
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	3332      	adds	r3, #50	@ 0x32
 8004b24:	4a07      	ldr	r2, [pc, #28]	@ (8004b44 <UART_SetConfig+0x118>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	f003 020f 	and.w	r2, r3, #15
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	440a      	add	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40013800 	.word	0x40013800
 8004b44:	51eb851f 	.word	0x51eb851f

08004b48 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b08f      	sub	sp, #60	@ 0x3c
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8004b56:	f04f 0100 	mov.w	r1, #0
 8004b5a:	6838      	ldr	r0, [r7, #0]
 8004b5c:	f7fc faa6 	bl	80010ac <__aeabi_fcmpeq>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <MahonyAHRSupdateIMU+0x40>
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004b6c:	f7fc fa9e 	bl	80010ac <__aeabi_fcmpeq>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <MahonyAHRSupdateIMU+0x40>
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004b7c:	f7fc fa96 	bl	80010ac <__aeabi_fcmpeq>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 8163 	bne.w	8004e4e <MahonyAHRSupdateIMU+0x306>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004b88:	6839      	ldr	r1, [r7, #0]
 8004b8a:	6838      	ldr	r0, [r7, #0]
 8004b8c:	f7fc f8fa 	bl	8000d84 <__aeabi_fmul>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461c      	mov	r4, r3
 8004b94:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004b96:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004b98:	f7fc f8f4 	bl	8000d84 <__aeabi_fmul>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f7fb ffe7 	bl	8000b74 <__addsf3>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461c      	mov	r4, r3
 8004baa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004bac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004bae:	f7fc f8e9 	bl	8000d84 <__aeabi_fmul>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fb ffdc 	bl	8000b74 <__addsf3>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fa84 	bl	80050cc <invSqrt>
 8004bc4:	6378      	str	r0, [r7, #52]	@ 0x34
		ax *= recipNorm;
 8004bc6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004bc8:	6838      	ldr	r0, [r7, #0]
 8004bca:	f7fc f8db 	bl	8000d84 <__aeabi_fmul>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8004bd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004bd4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004bd6:	f7fc f8d5 	bl	8000d84 <__aeabi_fmul>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
		az *= recipNorm;        
 8004bde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004be0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004be2:	f7fc f8cf 	bl	8000d84 <__aeabi_fmul>
 8004be6:	4603      	mov	r3, r0
 8004be8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
 8004bea:	4b77      	ldr	r3, [pc, #476]	@ (8004dc8 <MahonyAHRSupdateIMU+0x280>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a77      	ldr	r2, [pc, #476]	@ (8004dcc <MahonyAHRSupdateIMU+0x284>)
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fc f8c5 	bl	8000d84 <__aeabi_fmul>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	461c      	mov	r4, r3
 8004bfe:	4b74      	ldr	r3, [pc, #464]	@ (8004dd0 <MahonyAHRSupdateIMU+0x288>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a74      	ldr	r2, [pc, #464]	@ (8004dd4 <MahonyAHRSupdateIMU+0x28c>)
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	4611      	mov	r1, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fc f8bb 	bl	8000d84 <__aeabi_fmul>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4619      	mov	r1, r3
 8004c12:	4620      	mov	r0, r4
 8004c14:	f7fb ffac 	bl	8000b70 <__aeabi_fsub>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	633b      	str	r3, [r7, #48]	@ 0x30
		halfvy = q0 * q1 + q2 * q3;
 8004c1c:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd0 <MahonyAHRSupdateIMU+0x288>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a69      	ldr	r2, [pc, #420]	@ (8004dc8 <MahonyAHRSupdateIMU+0x280>)
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fc f8ac 	bl	8000d84 <__aeabi_fmul>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	461c      	mov	r4, r3
 8004c30:	4b68      	ldr	r3, [pc, #416]	@ (8004dd4 <MahonyAHRSupdateIMU+0x28c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a65      	ldr	r2, [pc, #404]	@ (8004dcc <MahonyAHRSupdateIMU+0x284>)
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fc f8a2 	bl	8000d84 <__aeabi_fmul>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4619      	mov	r1, r3
 8004c44:	4620      	mov	r0, r4
 8004c46:	f7fb ff95 	bl	8000b74 <__addsf3>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8004c4e:	4b60      	ldr	r3, [pc, #384]	@ (8004dd0 <MahonyAHRSupdateIMU+0x288>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a5f      	ldr	r2, [pc, #380]	@ (8004dd0 <MahonyAHRSupdateIMU+0x288>)
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fc f893 	bl	8000d84 <__aeabi_fmul>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fb ff83 	bl	8000b70 <__aeabi_fsub>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	461c      	mov	r4, r3
 8004c6e:	4b57      	ldr	r3, [pc, #348]	@ (8004dcc <MahonyAHRSupdateIMU+0x284>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a56      	ldr	r2, [pc, #344]	@ (8004dcc <MahonyAHRSupdateIMU+0x284>)
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	4611      	mov	r1, r2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fc f883 	bl	8000d84 <__aeabi_fmul>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4619      	mov	r1, r3
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7fb ff76 	bl	8000b74 <__addsf3>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	
		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8004c8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c8e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004c90:	f7fc f878 	bl	8000d84 <__aeabi_fmul>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461c      	mov	r4, r3
 8004c98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c9a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004c9c:	f7fc f872 	bl	8000d84 <__aeabi_fmul>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f7fb ff63 	bl	8000b70 <__aeabi_fsub>
 8004caa:	4603      	mov	r3, r0
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
		halfey = (az * halfvx - ax * halfvz);
 8004cae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cb0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004cb2:	f7fc f867 	bl	8000d84 <__aeabi_fmul>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	461c      	mov	r4, r3
 8004cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cbc:	6838      	ldr	r0, [r7, #0]
 8004cbe:	f7fc f861 	bl	8000d84 <__aeabi_fmul>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f7fb ff52 	bl	8000b70 <__aeabi_fsub>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	623b      	str	r3, [r7, #32]
		halfez = (ax * halfvy - ay * halfvx);
 8004cd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cd2:	6838      	ldr	r0, [r7, #0]
 8004cd4:	f7fc f856 	bl	8000d84 <__aeabi_fmul>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	461c      	mov	r4, r3
 8004cdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cde:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004ce0:	f7fc f850 	bl	8000d84 <__aeabi_fmul>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7fb ff41 	bl	8000b70 <__aeabi_fsub>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	61fb      	str	r3, [r7, #28]

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8004cf2:	4b39      	ldr	r3, [pc, #228]	@ (8004dd8 <MahonyAHRSupdateIMU+0x290>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f04f 0100 	mov.w	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fc f9fe 	bl	80010fc <__aeabi_fcmpgt>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d070      	beq.n	8004de8 <MahonyAHRSupdateIMU+0x2a0>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8004d06:	4b34      	ldr	r3, [pc, #208]	@ (8004dd8 <MahonyAHRSupdateIMU+0x290>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fc f839 	bl	8000d84 <__aeabi_fmul>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f04f 516c 	mov.w	r1, #989855744	@ 0x3b000000
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fc f833 	bl	8000d84 <__aeabi_fmul>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b2e      	ldr	r3, [pc, #184]	@ (8004ddc <MahonyAHRSupdateIMU+0x294>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f7fb ff23 	bl	8000b74 <__addsf3>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b2a      	ldr	r3, [pc, #168]	@ (8004ddc <MahonyAHRSupdateIMU+0x294>)
 8004d34:	601a      	str	r2, [r3, #0]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8004d36:	4b28      	ldr	r3, [pc, #160]	@ (8004dd8 <MahonyAHRSupdateIMU+0x290>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a39      	ldr	r1, [r7, #32]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fc f821 	bl	8000d84 <__aeabi_fmul>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f04f 516c 	mov.w	r1, #989855744	@ 0x3b000000
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fc f81b 	bl	8000d84 <__aeabi_fmul>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	461a      	mov	r2, r3
 8004d52:	4b23      	ldr	r3, [pc, #140]	@ (8004de0 <MahonyAHRSupdateIMU+0x298>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f7fb ff0b 	bl	8000b74 <__addsf3>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	4b1f      	ldr	r3, [pc, #124]	@ (8004de0 <MahonyAHRSupdateIMU+0x298>)
 8004d64:	601a      	str	r2, [r3, #0]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8004d66:	4b1c      	ldr	r3, [pc, #112]	@ (8004dd8 <MahonyAHRSupdateIMU+0x290>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69f9      	ldr	r1, [r7, #28]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fc f809 	bl	8000d84 <__aeabi_fmul>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f04f 516c 	mov.w	r1, #989855744	@ 0x3b000000
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fc f803 	bl	8000d84 <__aeabi_fmul>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	461a      	mov	r2, r3
 8004d82:	4b18      	ldr	r3, [pc, #96]	@ (8004de4 <MahonyAHRSupdateIMU+0x29c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f7fb fef3 	bl	8000b74 <__addsf3>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b14      	ldr	r3, [pc, #80]	@ (8004de4 <MahonyAHRSupdateIMU+0x29c>)
 8004d94:	601a      	str	r2, [r3, #0]
			gx += integralFBx;	// apply integral feedback
 8004d96:	4b11      	ldr	r3, [pc, #68]	@ (8004ddc <MahonyAHRSupdateIMU+0x294>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7fb fee9 	bl	8000b74 <__addsf3>
 8004da2:	4603      	mov	r3, r0
 8004da4:	60fb      	str	r3, [r7, #12]
			gy += integralFBy;
 8004da6:	4b0e      	ldr	r3, [pc, #56]	@ (8004de0 <MahonyAHRSupdateIMU+0x298>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4619      	mov	r1, r3
 8004dac:	68b8      	ldr	r0, [r7, #8]
 8004dae:	f7fb fee1 	bl	8000b74 <__addsf3>
 8004db2:	4603      	mov	r3, r0
 8004db4:	60bb      	str	r3, [r7, #8]
			gz += integralFBz;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <MahonyAHRSupdateIMU+0x29c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fb fed9 	bl	8000b74 <__addsf3>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	e01b      	b.n	8004e00 <MahonyAHRSupdateIMU+0x2b8>
 8004dc8:	200002f8 	.word	0x200002f8
 8004dcc:	20000300 	.word	0x20000300
 8004dd0:	20000010 	.word	0x20000010
 8004dd4:	200002fc 	.word	0x200002fc
 8004dd8:	200002f4 	.word	0x200002f4
 8004ddc:	20000304 	.word	0x20000304
 8004de0:	20000308 	.word	0x20000308
 8004de4:	2000030c 	.word	0x2000030c
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8004de8:	4b97      	ldr	r3, [pc, #604]	@ (8005048 <MahonyAHRSupdateIMU+0x500>)
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8004df0:	4b96      	ldr	r3, [pc, #600]	@ (800504c <MahonyAHRSupdateIMU+0x504>)
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8004df8:	4b95      	ldr	r3, [pc, #596]	@ (8005050 <MahonyAHRSupdateIMU+0x508>)
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8004e00:	4b94      	ldr	r3, [pc, #592]	@ (8005054 <MahonyAHRSupdateIMU+0x50c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fb ffbc 	bl	8000d84 <__aeabi_fmul>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4619      	mov	r1, r3
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7fb feaf 	bl	8000b74 <__addsf3>
 8004e16:	4603      	mov	r3, r0
 8004e18:	60fb      	str	r3, [r7, #12]
		gy += twoKp * halfey;
 8004e1a:	4b8e      	ldr	r3, [pc, #568]	@ (8005054 <MahonyAHRSupdateIMU+0x50c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6a39      	ldr	r1, [r7, #32]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fb ffaf 	bl	8000d84 <__aeabi_fmul>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4619      	mov	r1, r3
 8004e2a:	68b8      	ldr	r0, [r7, #8]
 8004e2c:	f7fb fea2 	bl	8000b74 <__addsf3>
 8004e30:	4603      	mov	r3, r0
 8004e32:	60bb      	str	r3, [r7, #8]
		gz += twoKp * halfez;
 8004e34:	4b87      	ldr	r3, [pc, #540]	@ (8005054 <MahonyAHRSupdateIMU+0x50c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69f9      	ldr	r1, [r7, #28]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fb ffa2 	bl	8000d84 <__aeabi_fmul>
 8004e40:	4603      	mov	r3, r0
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7fb fe95 	bl	8000b74 <__addsf3>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	607b      	str	r3, [r7, #4]
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8004e4e:	f04f 516a 	mov.w	r1, #981467136	@ 0x3a800000
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7fb ff96 	bl	8000d84 <__aeabi_fmul>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	60fb      	str	r3, [r7, #12]
	gy *= (0.5f * (1.0f / sampleFreq));
 8004e5c:	f04f 516a 	mov.w	r1, #981467136	@ 0x3a800000
 8004e60:	68b8      	ldr	r0, [r7, #8]
 8004e62:	f7fb ff8f 	bl	8000d84 <__aeabi_fmul>
 8004e66:	4603      	mov	r3, r0
 8004e68:	60bb      	str	r3, [r7, #8]
	gz *= (0.5f * (1.0f / sampleFreq));
 8004e6a:	f04f 516a 	mov.w	r1, #981467136	@ 0x3a800000
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fb ff88 	bl	8000d84 <__aeabi_fmul>
 8004e74:	4603      	mov	r3, r0
 8004e76:	607b      	str	r3, [r7, #4]
	qa = q0;
 8004e78:	4b77      	ldr	r3, [pc, #476]	@ (8005058 <MahonyAHRSupdateIMU+0x510>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	61bb      	str	r3, [r7, #24]
	qb = q1;
 8004e7e:	4b77      	ldr	r3, [pc, #476]	@ (800505c <MahonyAHRSupdateIMU+0x514>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	617b      	str	r3, [r7, #20]
	qc = q2;
 8004e84:	4b76      	ldr	r3, [pc, #472]	@ (8005060 <MahonyAHRSupdateIMU+0x518>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	613b      	str	r3, [r7, #16]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004e90:	68f9      	ldr	r1, [r7, #12]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fb ff76 	bl	8000d84 <__aeabi_fmul>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461c      	mov	r4, r3
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	6938      	ldr	r0, [r7, #16]
 8004ea0:	f7fb ff70 	bl	8000d84 <__aeabi_fmul>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f7fb fe61 	bl	8000b70 <__aeabi_fsub>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461c      	mov	r4, r3
 8004eb2:	4b6c      	ldr	r3, [pc, #432]	@ (8005064 <MahonyAHRSupdateIMU+0x51c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fb ff63 	bl	8000d84 <__aeabi_fmul>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f7fb fe54 	bl	8000b70 <__aeabi_fsub>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4b62      	ldr	r3, [pc, #392]	@ (8005058 <MahonyAHRSupdateIMU+0x510>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f7fb fe4e 	bl	8000b74 <__addsf3>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	4b5e      	ldr	r3, [pc, #376]	@ (8005058 <MahonyAHRSupdateIMU+0x510>)
 8004ede:	601a      	str	r2, [r3, #0]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8004ee0:	68f9      	ldr	r1, [r7, #12]
 8004ee2:	69b8      	ldr	r0, [r7, #24]
 8004ee4:	f7fb ff4e 	bl	8000d84 <__aeabi_fmul>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461c      	mov	r4, r3
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	6938      	ldr	r0, [r7, #16]
 8004ef0:	f7fb ff48 	bl	8000d84 <__aeabi_fmul>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f7fb fe3b 	bl	8000b74 <__addsf3>
 8004efe:	4603      	mov	r3, r0
 8004f00:	461c      	mov	r4, r3
 8004f02:	4b58      	ldr	r3, [pc, #352]	@ (8005064 <MahonyAHRSupdateIMU+0x51c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fb ff3b 	bl	8000d84 <__aeabi_fmul>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4619      	mov	r1, r3
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7fb fe2c 	bl	8000b70 <__aeabi_fsub>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4b4f      	ldr	r3, [pc, #316]	@ (800505c <MahonyAHRSupdateIMU+0x514>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f7fb fe26 	bl	8000b74 <__addsf3>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800505c <MahonyAHRSupdateIMU+0x514>)
 8004f2e:	601a      	str	r2, [r3, #0]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	69b8      	ldr	r0, [r7, #24]
 8004f34:	f7fb ff26 	bl	8000d84 <__aeabi_fmul>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461c      	mov	r4, r3
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	6978      	ldr	r0, [r7, #20]
 8004f40:	f7fb ff20 	bl	8000d84 <__aeabi_fmul>
 8004f44:	4603      	mov	r3, r0
 8004f46:	4619      	mov	r1, r3
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f7fb fe11 	bl	8000b70 <__aeabi_fsub>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	461c      	mov	r4, r3
 8004f52:	4b44      	ldr	r3, [pc, #272]	@ (8005064 <MahonyAHRSupdateIMU+0x51c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68f9      	ldr	r1, [r7, #12]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb ff13 	bl	8000d84 <__aeabi_fmul>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4619      	mov	r1, r3
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7fb fe06 	bl	8000b74 <__addsf3>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8005060 <MahonyAHRSupdateIMU+0x518>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f7fb fdfe 	bl	8000b74 <__addsf3>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4b38      	ldr	r3, [pc, #224]	@ (8005060 <MahonyAHRSupdateIMU+0x518>)
 8004f7e:	601a      	str	r2, [r3, #0]
	q3 += (qa * gz + qb * gy - qc * gx); 
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	69b8      	ldr	r0, [r7, #24]
 8004f84:	f7fb fefe 	bl	8000d84 <__aeabi_fmul>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461c      	mov	r4, r3
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	6978      	ldr	r0, [r7, #20]
 8004f90:	f7fb fef8 	bl	8000d84 <__aeabi_fmul>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4619      	mov	r1, r3
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f7fb fdeb 	bl	8000b74 <__addsf3>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461c      	mov	r4, r3
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	6938      	ldr	r0, [r7, #16]
 8004fa6:	f7fb feed 	bl	8000d84 <__aeabi_fmul>
 8004faa:	4603      	mov	r3, r0
 8004fac:	4619      	mov	r1, r3
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f7fb fdde 	bl	8000b70 <__aeabi_fsub>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8005064 <MahonyAHRSupdateIMU+0x51c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f7fb fdd8 	bl	8000b74 <__addsf3>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4b26      	ldr	r3, [pc, #152]	@ (8005064 <MahonyAHRSupdateIMU+0x51c>)
 8004fca:	601a      	str	r2, [r3, #0]
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004fcc:	4b22      	ldr	r3, [pc, #136]	@ (8005058 <MahonyAHRSupdateIMU+0x510>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a21      	ldr	r2, [pc, #132]	@ (8005058 <MahonyAHRSupdateIMU+0x510>)
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fb fed4 	bl	8000d84 <__aeabi_fmul>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	461c      	mov	r4, r3
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800505c <MahonyAHRSupdateIMU+0x514>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800505c <MahonyAHRSupdateIMU+0x514>)
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fb feca 	bl	8000d84 <__aeabi_fmul>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f7fb fdbd 	bl	8000b74 <__addsf3>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	461c      	mov	r4, r3
 8004ffe:	4b18      	ldr	r3, [pc, #96]	@ (8005060 <MahonyAHRSupdateIMU+0x518>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a17      	ldr	r2, [pc, #92]	@ (8005060 <MahonyAHRSupdateIMU+0x518>)
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f7fb febb 	bl	8000d84 <__aeabi_fmul>
 800500e:	4603      	mov	r3, r0
 8005010:	4619      	mov	r1, r3
 8005012:	4620      	mov	r0, r4
 8005014:	f7fb fdae 	bl	8000b74 <__addsf3>
 8005018:	4603      	mov	r3, r0
 800501a:	461c      	mov	r4, r3
 800501c:	4b11      	ldr	r3, [pc, #68]	@ (8005064 <MahonyAHRSupdateIMU+0x51c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a10      	ldr	r2, [pc, #64]	@ (8005064 <MahonyAHRSupdateIMU+0x51c>)
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	4611      	mov	r1, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f7fb feac 	bl	8000d84 <__aeabi_fmul>
 800502c:	4603      	mov	r3, r0
 800502e:	4619      	mov	r1, r3
 8005030:	4620      	mov	r0, r4
 8005032:	f7fb fd9f 	bl	8000b74 <__addsf3>
 8005036:	4603      	mov	r3, r0
 8005038:	4618      	mov	r0, r3
 800503a:	f000 f847 	bl	80050cc <invSqrt>
 800503e:	6378      	str	r0, [r7, #52]	@ 0x34
	q0 *= recipNorm;
 8005040:	4b05      	ldr	r3, [pc, #20]	@ (8005058 <MahonyAHRSupdateIMU+0x510>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	e010      	b.n	8005068 <MahonyAHRSupdateIMU+0x520>
 8005046:	bf00      	nop
 8005048:	20000304 	.word	0x20000304
 800504c:	20000308 	.word	0x20000308
 8005050:	2000030c 	.word	0x2000030c
 8005054:	2000000c 	.word	0x2000000c
 8005058:	20000010 	.word	0x20000010
 800505c:	200002f8 	.word	0x200002f8
 8005060:	200002fc 	.word	0x200002fc
 8005064:	20000300 	.word	0x20000300
 8005068:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb fe8a 	bl	8000d84 <__aeabi_fmul>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	4b11      	ldr	r3, [pc, #68]	@ (80050bc <MahonyAHRSupdateIMU+0x574>)
 8005076:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8005078:	4b11      	ldr	r3, [pc, #68]	@ (80050c0 <MahonyAHRSupdateIMU+0x578>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800507e:	4618      	mov	r0, r3
 8005080:	f7fb fe80 	bl	8000d84 <__aeabi_fmul>
 8005084:	4603      	mov	r3, r0
 8005086:	461a      	mov	r2, r3
 8005088:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <MahonyAHRSupdateIMU+0x578>)
 800508a:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 800508c:	4b0d      	ldr	r3, [pc, #52]	@ (80050c4 <MahonyAHRSupdateIMU+0x57c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005092:	4618      	mov	r0, r3
 8005094:	f7fb fe76 	bl	8000d84 <__aeabi_fmul>
 8005098:	4603      	mov	r3, r0
 800509a:	461a      	mov	r2, r3
 800509c:	4b09      	ldr	r3, [pc, #36]	@ (80050c4 <MahonyAHRSupdateIMU+0x57c>)
 800509e:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 80050a0:	4b09      	ldr	r3, [pc, #36]	@ (80050c8 <MahonyAHRSupdateIMU+0x580>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fb fe6c 	bl	8000d84 <__aeabi_fmul>
 80050ac:	4603      	mov	r3, r0
 80050ae:	461a      	mov	r2, r3
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <MahonyAHRSupdateIMU+0x580>)
 80050b2:	601a      	str	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	373c      	adds	r7, #60	@ 0x3c
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd90      	pop	{r4, r7, pc}
 80050bc:	20000010 	.word	0x20000010
 80050c0:	200002f8 	.word	0x200002f8
 80050c4:	200002fc 	.word	0x200002fc
 80050c8:	20000300 	.word	0x20000300

080050cc <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80050d4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fb fe53 	bl	8000d84 <__aeabi_fmul>
 80050de:	4603      	mov	r3, r0
 80050e0:	617b      	str	r3, [r7, #20]
	float y = x;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80050e6:	f107 0310 	add.w	r3, r7, #16
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	105a      	asrs	r2, r3, #1
 80050f2:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <invSqrt+0x74>)
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80050f8:	f107 030c 	add.w	r3, r7, #12
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	6979      	ldr	r1, [r7, #20]
 8005104:	4618      	mov	r0, r3
 8005106:	f7fb fe3d 	bl	8000d84 <__aeabi_fmul>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7fb fe36 	bl	8000d84 <__aeabi_fmul>
 8005118:	4603      	mov	r3, r0
 800511a:	4619      	mov	r1, r3
 800511c:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8005120:	f7fb fd26 	bl	8000b70 <__aeabi_fsub>
 8005124:	4603      	mov	r3, r0
 8005126:	461a      	mov	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f7fb fe29 	bl	8000d84 <__aeabi_fmul>
 8005132:	4603      	mov	r3, r0
 8005134:	613b      	str	r3, [r7, #16]
	return y;
 8005136:	693b      	ldr	r3, [r7, #16]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	5f3759df 	.word	0x5f3759df

08005144 <__cvt>:
 8005144:	2b00      	cmp	r3, #0
 8005146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800514a:	461d      	mov	r5, r3
 800514c:	bfbb      	ittet	lt
 800514e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005152:	461d      	movlt	r5, r3
 8005154:	2300      	movge	r3, #0
 8005156:	232d      	movlt	r3, #45	@ 0x2d
 8005158:	b088      	sub	sp, #32
 800515a:	4614      	mov	r4, r2
 800515c:	bfb8      	it	lt
 800515e:	4614      	movlt	r4, r2
 8005160:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005162:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005164:	7013      	strb	r3, [r2, #0]
 8005166:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005168:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800516c:	f023 0820 	bic.w	r8, r3, #32
 8005170:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005174:	d005      	beq.n	8005182 <__cvt+0x3e>
 8005176:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800517a:	d100      	bne.n	800517e <__cvt+0x3a>
 800517c:	3601      	adds	r6, #1
 800517e:	2302      	movs	r3, #2
 8005180:	e000      	b.n	8005184 <__cvt+0x40>
 8005182:	2303      	movs	r3, #3
 8005184:	aa07      	add	r2, sp, #28
 8005186:	9204      	str	r2, [sp, #16]
 8005188:	aa06      	add	r2, sp, #24
 800518a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800518e:	e9cd 3600 	strd	r3, r6, [sp]
 8005192:	4622      	mov	r2, r4
 8005194:	462b      	mov	r3, r5
 8005196:	f001 f987 	bl	80064a8 <_dtoa_r>
 800519a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800519e:	4607      	mov	r7, r0
 80051a0:	d119      	bne.n	80051d6 <__cvt+0x92>
 80051a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80051a4:	07db      	lsls	r3, r3, #31
 80051a6:	d50e      	bpl.n	80051c6 <__cvt+0x82>
 80051a8:	eb00 0906 	add.w	r9, r0, r6
 80051ac:	2200      	movs	r2, #0
 80051ae:	2300      	movs	r3, #0
 80051b0:	4620      	mov	r0, r4
 80051b2:	4629      	mov	r1, r5
 80051b4:	f7fb fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80051b8:	b108      	cbz	r0, 80051be <__cvt+0x7a>
 80051ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80051be:	2230      	movs	r2, #48	@ 0x30
 80051c0:	9b07      	ldr	r3, [sp, #28]
 80051c2:	454b      	cmp	r3, r9
 80051c4:	d31e      	bcc.n	8005204 <__cvt+0xc0>
 80051c6:	4638      	mov	r0, r7
 80051c8:	9b07      	ldr	r3, [sp, #28]
 80051ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80051cc:	1bdb      	subs	r3, r3, r7
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	b008      	add	sp, #32
 80051d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051da:	eb00 0906 	add.w	r9, r0, r6
 80051de:	d1e5      	bne.n	80051ac <__cvt+0x68>
 80051e0:	7803      	ldrb	r3, [r0, #0]
 80051e2:	2b30      	cmp	r3, #48	@ 0x30
 80051e4:	d10a      	bne.n	80051fc <__cvt+0xb8>
 80051e6:	2200      	movs	r2, #0
 80051e8:	2300      	movs	r3, #0
 80051ea:	4620      	mov	r0, r4
 80051ec:	4629      	mov	r1, r5
 80051ee:	f7fb fbdb 	bl	80009a8 <__aeabi_dcmpeq>
 80051f2:	b918      	cbnz	r0, 80051fc <__cvt+0xb8>
 80051f4:	f1c6 0601 	rsb	r6, r6, #1
 80051f8:	f8ca 6000 	str.w	r6, [sl]
 80051fc:	f8da 3000 	ldr.w	r3, [sl]
 8005200:	4499      	add	r9, r3
 8005202:	e7d3      	b.n	80051ac <__cvt+0x68>
 8005204:	1c59      	adds	r1, r3, #1
 8005206:	9107      	str	r1, [sp, #28]
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e7d9      	b.n	80051c0 <__cvt+0x7c>

0800520c <__exponent>:
 800520c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800520e:	2900      	cmp	r1, #0
 8005210:	bfb6      	itet	lt
 8005212:	232d      	movlt	r3, #45	@ 0x2d
 8005214:	232b      	movge	r3, #43	@ 0x2b
 8005216:	4249      	neglt	r1, r1
 8005218:	2909      	cmp	r1, #9
 800521a:	7002      	strb	r2, [r0, #0]
 800521c:	7043      	strb	r3, [r0, #1]
 800521e:	dd29      	ble.n	8005274 <__exponent+0x68>
 8005220:	f10d 0307 	add.w	r3, sp, #7
 8005224:	461d      	mov	r5, r3
 8005226:	270a      	movs	r7, #10
 8005228:	fbb1 f6f7 	udiv	r6, r1, r7
 800522c:	461a      	mov	r2, r3
 800522e:	fb07 1416 	mls	r4, r7, r6, r1
 8005232:	3430      	adds	r4, #48	@ 0x30
 8005234:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005238:	460c      	mov	r4, r1
 800523a:	2c63      	cmp	r4, #99	@ 0x63
 800523c:	4631      	mov	r1, r6
 800523e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005242:	dcf1      	bgt.n	8005228 <__exponent+0x1c>
 8005244:	3130      	adds	r1, #48	@ 0x30
 8005246:	1e94      	subs	r4, r2, #2
 8005248:	f803 1c01 	strb.w	r1, [r3, #-1]
 800524c:	4623      	mov	r3, r4
 800524e:	1c41      	adds	r1, r0, #1
 8005250:	42ab      	cmp	r3, r5
 8005252:	d30a      	bcc.n	800526a <__exponent+0x5e>
 8005254:	f10d 0309 	add.w	r3, sp, #9
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	42ac      	cmp	r4, r5
 800525c:	bf88      	it	hi
 800525e:	2300      	movhi	r3, #0
 8005260:	3302      	adds	r3, #2
 8005262:	4403      	add	r3, r0
 8005264:	1a18      	subs	r0, r3, r0
 8005266:	b003      	add	sp, #12
 8005268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800526a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800526e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005272:	e7ed      	b.n	8005250 <__exponent+0x44>
 8005274:	2330      	movs	r3, #48	@ 0x30
 8005276:	3130      	adds	r1, #48	@ 0x30
 8005278:	7083      	strb	r3, [r0, #2]
 800527a:	70c1      	strb	r1, [r0, #3]
 800527c:	1d03      	adds	r3, r0, #4
 800527e:	e7f1      	b.n	8005264 <__exponent+0x58>

08005280 <_printf_float>:
 8005280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	b091      	sub	sp, #68	@ 0x44
 8005286:	460c      	mov	r4, r1
 8005288:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800528c:	4616      	mov	r6, r2
 800528e:	461f      	mov	r7, r3
 8005290:	4605      	mov	r5, r0
 8005292:	f000 fff5 	bl	8006280 <_localeconv_r>
 8005296:	6803      	ldr	r3, [r0, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	9308      	str	r3, [sp, #32]
 800529c:	f7fa ff58 	bl	8000150 <strlen>
 80052a0:	2300      	movs	r3, #0
 80052a2:	930e      	str	r3, [sp, #56]	@ 0x38
 80052a4:	f8d8 3000 	ldr.w	r3, [r8]
 80052a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80052aa:	3307      	adds	r3, #7
 80052ac:	f023 0307 	bic.w	r3, r3, #7
 80052b0:	f103 0208 	add.w	r2, r3, #8
 80052b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80052b8:	f8d4 b000 	ldr.w	fp, [r4]
 80052bc:	f8c8 2000 	str.w	r2, [r8]
 80052c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80052c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052ca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80052ce:	f04f 32ff 	mov.w	r2, #4294967295
 80052d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80052d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80052da:	4b9c      	ldr	r3, [pc, #624]	@ (800554c <_printf_float+0x2cc>)
 80052dc:	f7fb fb96 	bl	8000a0c <__aeabi_dcmpun>
 80052e0:	bb70      	cbnz	r0, 8005340 <_printf_float+0xc0>
 80052e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80052e6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ea:	4b98      	ldr	r3, [pc, #608]	@ (800554c <_printf_float+0x2cc>)
 80052ec:	f7fb fb70 	bl	80009d0 <__aeabi_dcmple>
 80052f0:	bb30      	cbnz	r0, 8005340 <_printf_float+0xc0>
 80052f2:	2200      	movs	r2, #0
 80052f4:	2300      	movs	r3, #0
 80052f6:	4640      	mov	r0, r8
 80052f8:	4649      	mov	r1, r9
 80052fa:	f7fb fb5f 	bl	80009bc <__aeabi_dcmplt>
 80052fe:	b110      	cbz	r0, 8005306 <_printf_float+0x86>
 8005300:	232d      	movs	r3, #45	@ 0x2d
 8005302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005306:	4a92      	ldr	r2, [pc, #584]	@ (8005550 <_printf_float+0x2d0>)
 8005308:	4b92      	ldr	r3, [pc, #584]	@ (8005554 <_printf_float+0x2d4>)
 800530a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800530e:	bf94      	ite	ls
 8005310:	4690      	movls	r8, r2
 8005312:	4698      	movhi	r8, r3
 8005314:	2303      	movs	r3, #3
 8005316:	f04f 0900 	mov.w	r9, #0
 800531a:	6123      	str	r3, [r4, #16]
 800531c:	f02b 0304 	bic.w	r3, fp, #4
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	4633      	mov	r3, r6
 8005324:	4621      	mov	r1, r4
 8005326:	4628      	mov	r0, r5
 8005328:	9700      	str	r7, [sp, #0]
 800532a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800532c:	f000 f9d4 	bl	80056d8 <_printf_common>
 8005330:	3001      	adds	r0, #1
 8005332:	f040 8090 	bne.w	8005456 <_printf_float+0x1d6>
 8005336:	f04f 30ff 	mov.w	r0, #4294967295
 800533a:	b011      	add	sp, #68	@ 0x44
 800533c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005340:	4642      	mov	r2, r8
 8005342:	464b      	mov	r3, r9
 8005344:	4640      	mov	r0, r8
 8005346:	4649      	mov	r1, r9
 8005348:	f7fb fb60 	bl	8000a0c <__aeabi_dcmpun>
 800534c:	b148      	cbz	r0, 8005362 <_printf_float+0xe2>
 800534e:	464b      	mov	r3, r9
 8005350:	2b00      	cmp	r3, #0
 8005352:	bfb8      	it	lt
 8005354:	232d      	movlt	r3, #45	@ 0x2d
 8005356:	4a80      	ldr	r2, [pc, #512]	@ (8005558 <_printf_float+0x2d8>)
 8005358:	bfb8      	it	lt
 800535a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800535e:	4b7f      	ldr	r3, [pc, #508]	@ (800555c <_printf_float+0x2dc>)
 8005360:	e7d3      	b.n	800530a <_printf_float+0x8a>
 8005362:	6863      	ldr	r3, [r4, #4]
 8005364:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	d13f      	bne.n	80053ec <_printf_float+0x16c>
 800536c:	2306      	movs	r3, #6
 800536e:	6063      	str	r3, [r4, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	9206      	str	r2, [sp, #24]
 800537a:	aa0e      	add	r2, sp, #56	@ 0x38
 800537c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005380:	aa0d      	add	r2, sp, #52	@ 0x34
 8005382:	9203      	str	r2, [sp, #12]
 8005384:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005388:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	4642      	mov	r2, r8
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	4628      	mov	r0, r5
 8005394:	464b      	mov	r3, r9
 8005396:	910a      	str	r1, [sp, #40]	@ 0x28
 8005398:	f7ff fed4 	bl	8005144 <__cvt>
 800539c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800539e:	4680      	mov	r8, r0
 80053a0:	2947      	cmp	r1, #71	@ 0x47
 80053a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80053a4:	d128      	bne.n	80053f8 <_printf_float+0x178>
 80053a6:	1cc8      	adds	r0, r1, #3
 80053a8:	db02      	blt.n	80053b0 <_printf_float+0x130>
 80053aa:	6863      	ldr	r3, [r4, #4]
 80053ac:	4299      	cmp	r1, r3
 80053ae:	dd40      	ble.n	8005432 <_printf_float+0x1b2>
 80053b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80053b4:	fa5f fa8a 	uxtb.w	sl, sl
 80053b8:	4652      	mov	r2, sl
 80053ba:	3901      	subs	r1, #1
 80053bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80053c0:	910d      	str	r1, [sp, #52]	@ 0x34
 80053c2:	f7ff ff23 	bl	800520c <__exponent>
 80053c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053c8:	4681      	mov	r9, r0
 80053ca:	1813      	adds	r3, r2, r0
 80053cc:	2a01      	cmp	r2, #1
 80053ce:	6123      	str	r3, [r4, #16]
 80053d0:	dc02      	bgt.n	80053d8 <_printf_float+0x158>
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	07d2      	lsls	r2, r2, #31
 80053d6:	d501      	bpl.n	80053dc <_printf_float+0x15c>
 80053d8:	3301      	adds	r3, #1
 80053da:	6123      	str	r3, [r4, #16]
 80053dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d09e      	beq.n	8005322 <_printf_float+0xa2>
 80053e4:	232d      	movs	r3, #45	@ 0x2d
 80053e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ea:	e79a      	b.n	8005322 <_printf_float+0xa2>
 80053ec:	2947      	cmp	r1, #71	@ 0x47
 80053ee:	d1bf      	bne.n	8005370 <_printf_float+0xf0>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1bd      	bne.n	8005370 <_printf_float+0xf0>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e7ba      	b.n	800536e <_printf_float+0xee>
 80053f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80053fc:	d9dc      	bls.n	80053b8 <_printf_float+0x138>
 80053fe:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005402:	d118      	bne.n	8005436 <_printf_float+0x1b6>
 8005404:	2900      	cmp	r1, #0
 8005406:	6863      	ldr	r3, [r4, #4]
 8005408:	dd0b      	ble.n	8005422 <_printf_float+0x1a2>
 800540a:	6121      	str	r1, [r4, #16]
 800540c:	b913      	cbnz	r3, 8005414 <_printf_float+0x194>
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	07d0      	lsls	r0, r2, #31
 8005412:	d502      	bpl.n	800541a <_printf_float+0x19a>
 8005414:	3301      	adds	r3, #1
 8005416:	440b      	add	r3, r1
 8005418:	6123      	str	r3, [r4, #16]
 800541a:	f04f 0900 	mov.w	r9, #0
 800541e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005420:	e7dc      	b.n	80053dc <_printf_float+0x15c>
 8005422:	b913      	cbnz	r3, 800542a <_printf_float+0x1aa>
 8005424:	6822      	ldr	r2, [r4, #0]
 8005426:	07d2      	lsls	r2, r2, #31
 8005428:	d501      	bpl.n	800542e <_printf_float+0x1ae>
 800542a:	3302      	adds	r3, #2
 800542c:	e7f4      	b.n	8005418 <_printf_float+0x198>
 800542e:	2301      	movs	r3, #1
 8005430:	e7f2      	b.n	8005418 <_printf_float+0x198>
 8005432:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005438:	4299      	cmp	r1, r3
 800543a:	db05      	blt.n	8005448 <_printf_float+0x1c8>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	6121      	str	r1, [r4, #16]
 8005440:	07d8      	lsls	r0, r3, #31
 8005442:	d5ea      	bpl.n	800541a <_printf_float+0x19a>
 8005444:	1c4b      	adds	r3, r1, #1
 8005446:	e7e7      	b.n	8005418 <_printf_float+0x198>
 8005448:	2900      	cmp	r1, #0
 800544a:	bfcc      	ite	gt
 800544c:	2201      	movgt	r2, #1
 800544e:	f1c1 0202 	rsble	r2, r1, #2
 8005452:	4413      	add	r3, r2
 8005454:	e7e0      	b.n	8005418 <_printf_float+0x198>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	055a      	lsls	r2, r3, #21
 800545a:	d407      	bmi.n	800546c <_printf_float+0x1ec>
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	4642      	mov	r2, r8
 8005460:	4631      	mov	r1, r6
 8005462:	4628      	mov	r0, r5
 8005464:	47b8      	blx	r7
 8005466:	3001      	adds	r0, #1
 8005468:	d12b      	bne.n	80054c2 <_printf_float+0x242>
 800546a:	e764      	b.n	8005336 <_printf_float+0xb6>
 800546c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005470:	f240 80dc 	bls.w	800562c <_printf_float+0x3ac>
 8005474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005478:	2200      	movs	r2, #0
 800547a:	2300      	movs	r3, #0
 800547c:	f7fb fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8005480:	2800      	cmp	r0, #0
 8005482:	d033      	beq.n	80054ec <_printf_float+0x26c>
 8005484:	2301      	movs	r3, #1
 8005486:	4631      	mov	r1, r6
 8005488:	4628      	mov	r0, r5
 800548a:	4a35      	ldr	r2, [pc, #212]	@ (8005560 <_printf_float+0x2e0>)
 800548c:	47b8      	blx	r7
 800548e:	3001      	adds	r0, #1
 8005490:	f43f af51 	beq.w	8005336 <_printf_float+0xb6>
 8005494:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005498:	4543      	cmp	r3, r8
 800549a:	db02      	blt.n	80054a2 <_printf_float+0x222>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	07d8      	lsls	r0, r3, #31
 80054a0:	d50f      	bpl.n	80054c2 <_printf_float+0x242>
 80054a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054a6:	4631      	mov	r1, r6
 80054a8:	4628      	mov	r0, r5
 80054aa:	47b8      	blx	r7
 80054ac:	3001      	adds	r0, #1
 80054ae:	f43f af42 	beq.w	8005336 <_printf_float+0xb6>
 80054b2:	f04f 0900 	mov.w	r9, #0
 80054b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80054ba:	f104 0a1a 	add.w	sl, r4, #26
 80054be:	45c8      	cmp	r8, r9
 80054c0:	dc09      	bgt.n	80054d6 <_printf_float+0x256>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	079b      	lsls	r3, r3, #30
 80054c6:	f100 8102 	bmi.w	80056ce <_printf_float+0x44e>
 80054ca:	68e0      	ldr	r0, [r4, #12]
 80054cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054ce:	4298      	cmp	r0, r3
 80054d0:	bfb8      	it	lt
 80054d2:	4618      	movlt	r0, r3
 80054d4:	e731      	b.n	800533a <_printf_float+0xba>
 80054d6:	2301      	movs	r3, #1
 80054d8:	4652      	mov	r2, sl
 80054da:	4631      	mov	r1, r6
 80054dc:	4628      	mov	r0, r5
 80054de:	47b8      	blx	r7
 80054e0:	3001      	adds	r0, #1
 80054e2:	f43f af28 	beq.w	8005336 <_printf_float+0xb6>
 80054e6:	f109 0901 	add.w	r9, r9, #1
 80054ea:	e7e8      	b.n	80054be <_printf_float+0x23e>
 80054ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	dc38      	bgt.n	8005564 <_printf_float+0x2e4>
 80054f2:	2301      	movs	r3, #1
 80054f4:	4631      	mov	r1, r6
 80054f6:	4628      	mov	r0, r5
 80054f8:	4a19      	ldr	r2, [pc, #100]	@ (8005560 <_printf_float+0x2e0>)
 80054fa:	47b8      	blx	r7
 80054fc:	3001      	adds	r0, #1
 80054fe:	f43f af1a 	beq.w	8005336 <_printf_float+0xb6>
 8005502:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005506:	ea59 0303 	orrs.w	r3, r9, r3
 800550a:	d102      	bne.n	8005512 <_printf_float+0x292>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	07d9      	lsls	r1, r3, #31
 8005510:	d5d7      	bpl.n	80054c2 <_printf_float+0x242>
 8005512:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	f43f af0a 	beq.w	8005336 <_printf_float+0xb6>
 8005522:	f04f 0a00 	mov.w	sl, #0
 8005526:	f104 0b1a 	add.w	fp, r4, #26
 800552a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800552c:	425b      	negs	r3, r3
 800552e:	4553      	cmp	r3, sl
 8005530:	dc01      	bgt.n	8005536 <_printf_float+0x2b6>
 8005532:	464b      	mov	r3, r9
 8005534:	e793      	b.n	800545e <_printf_float+0x1de>
 8005536:	2301      	movs	r3, #1
 8005538:	465a      	mov	r2, fp
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	f43f aef8 	beq.w	8005336 <_printf_float+0xb6>
 8005546:	f10a 0a01 	add.w	sl, sl, #1
 800554a:	e7ee      	b.n	800552a <_printf_float+0x2aa>
 800554c:	7fefffff 	.word	0x7fefffff
 8005550:	0800b0f2 	.word	0x0800b0f2
 8005554:	0800b0f6 	.word	0x0800b0f6
 8005558:	0800b0fa 	.word	0x0800b0fa
 800555c:	0800b0fe 	.word	0x0800b0fe
 8005560:	0800b102 	.word	0x0800b102
 8005564:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005566:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800556a:	4553      	cmp	r3, sl
 800556c:	bfa8      	it	ge
 800556e:	4653      	movge	r3, sl
 8005570:	2b00      	cmp	r3, #0
 8005572:	4699      	mov	r9, r3
 8005574:	dc36      	bgt.n	80055e4 <_printf_float+0x364>
 8005576:	f04f 0b00 	mov.w	fp, #0
 800557a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800557e:	f104 021a 	add.w	r2, r4, #26
 8005582:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005584:	930a      	str	r3, [sp, #40]	@ 0x28
 8005586:	eba3 0309 	sub.w	r3, r3, r9
 800558a:	455b      	cmp	r3, fp
 800558c:	dc31      	bgt.n	80055f2 <_printf_float+0x372>
 800558e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005590:	459a      	cmp	sl, r3
 8005592:	dc3a      	bgt.n	800560a <_printf_float+0x38a>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	07da      	lsls	r2, r3, #31
 8005598:	d437      	bmi.n	800560a <_printf_float+0x38a>
 800559a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800559c:	ebaa 0903 	sub.w	r9, sl, r3
 80055a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055a2:	ebaa 0303 	sub.w	r3, sl, r3
 80055a6:	4599      	cmp	r9, r3
 80055a8:	bfa8      	it	ge
 80055aa:	4699      	movge	r9, r3
 80055ac:	f1b9 0f00 	cmp.w	r9, #0
 80055b0:	dc33      	bgt.n	800561a <_printf_float+0x39a>
 80055b2:	f04f 0800 	mov.w	r8, #0
 80055b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055ba:	f104 0b1a 	add.w	fp, r4, #26
 80055be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055c0:	ebaa 0303 	sub.w	r3, sl, r3
 80055c4:	eba3 0309 	sub.w	r3, r3, r9
 80055c8:	4543      	cmp	r3, r8
 80055ca:	f77f af7a 	ble.w	80054c2 <_printf_float+0x242>
 80055ce:	2301      	movs	r3, #1
 80055d0:	465a      	mov	r2, fp
 80055d2:	4631      	mov	r1, r6
 80055d4:	4628      	mov	r0, r5
 80055d6:	47b8      	blx	r7
 80055d8:	3001      	adds	r0, #1
 80055da:	f43f aeac 	beq.w	8005336 <_printf_float+0xb6>
 80055de:	f108 0801 	add.w	r8, r8, #1
 80055e2:	e7ec      	b.n	80055be <_printf_float+0x33e>
 80055e4:	4642      	mov	r2, r8
 80055e6:	4631      	mov	r1, r6
 80055e8:	4628      	mov	r0, r5
 80055ea:	47b8      	blx	r7
 80055ec:	3001      	adds	r0, #1
 80055ee:	d1c2      	bne.n	8005576 <_printf_float+0x2f6>
 80055f0:	e6a1      	b.n	8005336 <_printf_float+0xb6>
 80055f2:	2301      	movs	r3, #1
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	f43f ae9a 	beq.w	8005336 <_printf_float+0xb6>
 8005602:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005604:	f10b 0b01 	add.w	fp, fp, #1
 8005608:	e7bb      	b.n	8005582 <_printf_float+0x302>
 800560a:	4631      	mov	r1, r6
 800560c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005610:	4628      	mov	r0, r5
 8005612:	47b8      	blx	r7
 8005614:	3001      	adds	r0, #1
 8005616:	d1c0      	bne.n	800559a <_printf_float+0x31a>
 8005618:	e68d      	b.n	8005336 <_printf_float+0xb6>
 800561a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800561c:	464b      	mov	r3, r9
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	4442      	add	r2, r8
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	d1c3      	bne.n	80055b2 <_printf_float+0x332>
 800562a:	e684      	b.n	8005336 <_printf_float+0xb6>
 800562c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005630:	f1ba 0f01 	cmp.w	sl, #1
 8005634:	dc01      	bgt.n	800563a <_printf_float+0x3ba>
 8005636:	07db      	lsls	r3, r3, #31
 8005638:	d536      	bpl.n	80056a8 <_printf_float+0x428>
 800563a:	2301      	movs	r3, #1
 800563c:	4642      	mov	r2, r8
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	47b8      	blx	r7
 8005644:	3001      	adds	r0, #1
 8005646:	f43f ae76 	beq.w	8005336 <_printf_float+0xb6>
 800564a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800564e:	4631      	mov	r1, r6
 8005650:	4628      	mov	r0, r5
 8005652:	47b8      	blx	r7
 8005654:	3001      	adds	r0, #1
 8005656:	f43f ae6e 	beq.w	8005336 <_printf_float+0xb6>
 800565a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800565e:	2200      	movs	r2, #0
 8005660:	2300      	movs	r3, #0
 8005662:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005666:	f7fb f99f 	bl	80009a8 <__aeabi_dcmpeq>
 800566a:	b9c0      	cbnz	r0, 800569e <_printf_float+0x41e>
 800566c:	4653      	mov	r3, sl
 800566e:	f108 0201 	add.w	r2, r8, #1
 8005672:	4631      	mov	r1, r6
 8005674:	4628      	mov	r0, r5
 8005676:	47b8      	blx	r7
 8005678:	3001      	adds	r0, #1
 800567a:	d10c      	bne.n	8005696 <_printf_float+0x416>
 800567c:	e65b      	b.n	8005336 <_printf_float+0xb6>
 800567e:	2301      	movs	r3, #1
 8005680:	465a      	mov	r2, fp
 8005682:	4631      	mov	r1, r6
 8005684:	4628      	mov	r0, r5
 8005686:	47b8      	blx	r7
 8005688:	3001      	adds	r0, #1
 800568a:	f43f ae54 	beq.w	8005336 <_printf_float+0xb6>
 800568e:	f108 0801 	add.w	r8, r8, #1
 8005692:	45d0      	cmp	r8, sl
 8005694:	dbf3      	blt.n	800567e <_printf_float+0x3fe>
 8005696:	464b      	mov	r3, r9
 8005698:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800569c:	e6e0      	b.n	8005460 <_printf_float+0x1e0>
 800569e:	f04f 0800 	mov.w	r8, #0
 80056a2:	f104 0b1a 	add.w	fp, r4, #26
 80056a6:	e7f4      	b.n	8005692 <_printf_float+0x412>
 80056a8:	2301      	movs	r3, #1
 80056aa:	4642      	mov	r2, r8
 80056ac:	e7e1      	b.n	8005672 <_printf_float+0x3f2>
 80056ae:	2301      	movs	r3, #1
 80056b0:	464a      	mov	r2, r9
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b8      	blx	r7
 80056b8:	3001      	adds	r0, #1
 80056ba:	f43f ae3c 	beq.w	8005336 <_printf_float+0xb6>
 80056be:	f108 0801 	add.w	r8, r8, #1
 80056c2:	68e3      	ldr	r3, [r4, #12]
 80056c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80056c6:	1a5b      	subs	r3, r3, r1
 80056c8:	4543      	cmp	r3, r8
 80056ca:	dcf0      	bgt.n	80056ae <_printf_float+0x42e>
 80056cc:	e6fd      	b.n	80054ca <_printf_float+0x24a>
 80056ce:	f04f 0800 	mov.w	r8, #0
 80056d2:	f104 0919 	add.w	r9, r4, #25
 80056d6:	e7f4      	b.n	80056c2 <_printf_float+0x442>

080056d8 <_printf_common>:
 80056d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056dc:	4616      	mov	r6, r2
 80056de:	4698      	mov	r8, r3
 80056e0:	688a      	ldr	r2, [r1, #8]
 80056e2:	690b      	ldr	r3, [r1, #16]
 80056e4:	4607      	mov	r7, r0
 80056e6:	4293      	cmp	r3, r2
 80056e8:	bfb8      	it	lt
 80056ea:	4613      	movlt	r3, r2
 80056ec:	6033      	str	r3, [r6, #0]
 80056ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056f2:	460c      	mov	r4, r1
 80056f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056f8:	b10a      	cbz	r2, 80056fe <_printf_common+0x26>
 80056fa:	3301      	adds	r3, #1
 80056fc:	6033      	str	r3, [r6, #0]
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	0699      	lsls	r1, r3, #26
 8005702:	bf42      	ittt	mi
 8005704:	6833      	ldrmi	r3, [r6, #0]
 8005706:	3302      	addmi	r3, #2
 8005708:	6033      	strmi	r3, [r6, #0]
 800570a:	6825      	ldr	r5, [r4, #0]
 800570c:	f015 0506 	ands.w	r5, r5, #6
 8005710:	d106      	bne.n	8005720 <_printf_common+0x48>
 8005712:	f104 0a19 	add.w	sl, r4, #25
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	6832      	ldr	r2, [r6, #0]
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	42ab      	cmp	r3, r5
 800571e:	dc2b      	bgt.n	8005778 <_printf_common+0xa0>
 8005720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005724:	6822      	ldr	r2, [r4, #0]
 8005726:	3b00      	subs	r3, #0
 8005728:	bf18      	it	ne
 800572a:	2301      	movne	r3, #1
 800572c:	0692      	lsls	r2, r2, #26
 800572e:	d430      	bmi.n	8005792 <_printf_common+0xba>
 8005730:	4641      	mov	r1, r8
 8005732:	4638      	mov	r0, r7
 8005734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005738:	47c8      	blx	r9
 800573a:	3001      	adds	r0, #1
 800573c:	d023      	beq.n	8005786 <_printf_common+0xae>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	6922      	ldr	r2, [r4, #16]
 8005742:	f003 0306 	and.w	r3, r3, #6
 8005746:	2b04      	cmp	r3, #4
 8005748:	bf14      	ite	ne
 800574a:	2500      	movne	r5, #0
 800574c:	6833      	ldreq	r3, [r6, #0]
 800574e:	f04f 0600 	mov.w	r6, #0
 8005752:	bf08      	it	eq
 8005754:	68e5      	ldreq	r5, [r4, #12]
 8005756:	f104 041a 	add.w	r4, r4, #26
 800575a:	bf08      	it	eq
 800575c:	1aed      	subeq	r5, r5, r3
 800575e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005762:	bf08      	it	eq
 8005764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005768:	4293      	cmp	r3, r2
 800576a:	bfc4      	itt	gt
 800576c:	1a9b      	subgt	r3, r3, r2
 800576e:	18ed      	addgt	r5, r5, r3
 8005770:	42b5      	cmp	r5, r6
 8005772:	d11a      	bne.n	80057aa <_printf_common+0xd2>
 8005774:	2000      	movs	r0, #0
 8005776:	e008      	b.n	800578a <_printf_common+0xb2>
 8005778:	2301      	movs	r3, #1
 800577a:	4652      	mov	r2, sl
 800577c:	4641      	mov	r1, r8
 800577e:	4638      	mov	r0, r7
 8005780:	47c8      	blx	r9
 8005782:	3001      	adds	r0, #1
 8005784:	d103      	bne.n	800578e <_printf_common+0xb6>
 8005786:	f04f 30ff 	mov.w	r0, #4294967295
 800578a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578e:	3501      	adds	r5, #1
 8005790:	e7c1      	b.n	8005716 <_printf_common+0x3e>
 8005792:	2030      	movs	r0, #48	@ 0x30
 8005794:	18e1      	adds	r1, r4, r3
 8005796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057a0:	4422      	add	r2, r4
 80057a2:	3302      	adds	r3, #2
 80057a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057a8:	e7c2      	b.n	8005730 <_printf_common+0x58>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4622      	mov	r2, r4
 80057ae:	4641      	mov	r1, r8
 80057b0:	4638      	mov	r0, r7
 80057b2:	47c8      	blx	r9
 80057b4:	3001      	adds	r0, #1
 80057b6:	d0e6      	beq.n	8005786 <_printf_common+0xae>
 80057b8:	3601      	adds	r6, #1
 80057ba:	e7d9      	b.n	8005770 <_printf_common+0x98>

080057bc <_printf_i>:
 80057bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	7e0f      	ldrb	r7, [r1, #24]
 80057c2:	4691      	mov	r9, r2
 80057c4:	2f78      	cmp	r7, #120	@ 0x78
 80057c6:	4680      	mov	r8, r0
 80057c8:	460c      	mov	r4, r1
 80057ca:	469a      	mov	sl, r3
 80057cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057d2:	d807      	bhi.n	80057e4 <_printf_i+0x28>
 80057d4:	2f62      	cmp	r7, #98	@ 0x62
 80057d6:	d80a      	bhi.n	80057ee <_printf_i+0x32>
 80057d8:	2f00      	cmp	r7, #0
 80057da:	f000 80d3 	beq.w	8005984 <_printf_i+0x1c8>
 80057de:	2f58      	cmp	r7, #88	@ 0x58
 80057e0:	f000 80ba 	beq.w	8005958 <_printf_i+0x19c>
 80057e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057ec:	e03a      	b.n	8005864 <_printf_i+0xa8>
 80057ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057f2:	2b15      	cmp	r3, #21
 80057f4:	d8f6      	bhi.n	80057e4 <_printf_i+0x28>
 80057f6:	a101      	add	r1, pc, #4	@ (adr r1, 80057fc <_printf_i+0x40>)
 80057f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057fc:	08005855 	.word	0x08005855
 8005800:	08005869 	.word	0x08005869
 8005804:	080057e5 	.word	0x080057e5
 8005808:	080057e5 	.word	0x080057e5
 800580c:	080057e5 	.word	0x080057e5
 8005810:	080057e5 	.word	0x080057e5
 8005814:	08005869 	.word	0x08005869
 8005818:	080057e5 	.word	0x080057e5
 800581c:	080057e5 	.word	0x080057e5
 8005820:	080057e5 	.word	0x080057e5
 8005824:	080057e5 	.word	0x080057e5
 8005828:	0800596b 	.word	0x0800596b
 800582c:	08005893 	.word	0x08005893
 8005830:	08005925 	.word	0x08005925
 8005834:	080057e5 	.word	0x080057e5
 8005838:	080057e5 	.word	0x080057e5
 800583c:	0800598d 	.word	0x0800598d
 8005840:	080057e5 	.word	0x080057e5
 8005844:	08005893 	.word	0x08005893
 8005848:	080057e5 	.word	0x080057e5
 800584c:	080057e5 	.word	0x080057e5
 8005850:	0800592d 	.word	0x0800592d
 8005854:	6833      	ldr	r3, [r6, #0]
 8005856:	1d1a      	adds	r2, r3, #4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6032      	str	r2, [r6, #0]
 800585c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005864:	2301      	movs	r3, #1
 8005866:	e09e      	b.n	80059a6 <_printf_i+0x1ea>
 8005868:	6833      	ldr	r3, [r6, #0]
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	1d19      	adds	r1, r3, #4
 800586e:	6031      	str	r1, [r6, #0]
 8005870:	0606      	lsls	r6, r0, #24
 8005872:	d501      	bpl.n	8005878 <_printf_i+0xbc>
 8005874:	681d      	ldr	r5, [r3, #0]
 8005876:	e003      	b.n	8005880 <_printf_i+0xc4>
 8005878:	0645      	lsls	r5, r0, #25
 800587a:	d5fb      	bpl.n	8005874 <_printf_i+0xb8>
 800587c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005880:	2d00      	cmp	r5, #0
 8005882:	da03      	bge.n	800588c <_printf_i+0xd0>
 8005884:	232d      	movs	r3, #45	@ 0x2d
 8005886:	426d      	negs	r5, r5
 8005888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800588c:	230a      	movs	r3, #10
 800588e:	4859      	ldr	r0, [pc, #356]	@ (80059f4 <_printf_i+0x238>)
 8005890:	e011      	b.n	80058b6 <_printf_i+0xfa>
 8005892:	6821      	ldr	r1, [r4, #0]
 8005894:	6833      	ldr	r3, [r6, #0]
 8005896:	0608      	lsls	r0, r1, #24
 8005898:	f853 5b04 	ldr.w	r5, [r3], #4
 800589c:	d402      	bmi.n	80058a4 <_printf_i+0xe8>
 800589e:	0649      	lsls	r1, r1, #25
 80058a0:	bf48      	it	mi
 80058a2:	b2ad      	uxthmi	r5, r5
 80058a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80058a6:	6033      	str	r3, [r6, #0]
 80058a8:	bf14      	ite	ne
 80058aa:	230a      	movne	r3, #10
 80058ac:	2308      	moveq	r3, #8
 80058ae:	4851      	ldr	r0, [pc, #324]	@ (80059f4 <_printf_i+0x238>)
 80058b0:	2100      	movs	r1, #0
 80058b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058b6:	6866      	ldr	r6, [r4, #4]
 80058b8:	2e00      	cmp	r6, #0
 80058ba:	bfa8      	it	ge
 80058bc:	6821      	ldrge	r1, [r4, #0]
 80058be:	60a6      	str	r6, [r4, #8]
 80058c0:	bfa4      	itt	ge
 80058c2:	f021 0104 	bicge.w	r1, r1, #4
 80058c6:	6021      	strge	r1, [r4, #0]
 80058c8:	b90d      	cbnz	r5, 80058ce <_printf_i+0x112>
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	d04b      	beq.n	8005966 <_printf_i+0x1aa>
 80058ce:	4616      	mov	r6, r2
 80058d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80058d4:	fb03 5711 	mls	r7, r3, r1, r5
 80058d8:	5dc7      	ldrb	r7, [r0, r7]
 80058da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058de:	462f      	mov	r7, r5
 80058e0:	42bb      	cmp	r3, r7
 80058e2:	460d      	mov	r5, r1
 80058e4:	d9f4      	bls.n	80058d0 <_printf_i+0x114>
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d10b      	bne.n	8005902 <_printf_i+0x146>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	07df      	lsls	r7, r3, #31
 80058ee:	d508      	bpl.n	8005902 <_printf_i+0x146>
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	6861      	ldr	r1, [r4, #4]
 80058f4:	4299      	cmp	r1, r3
 80058f6:	bfde      	ittt	le
 80058f8:	2330      	movle	r3, #48	@ 0x30
 80058fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005902:	1b92      	subs	r2, r2, r6
 8005904:	6122      	str	r2, [r4, #16]
 8005906:	464b      	mov	r3, r9
 8005908:	4621      	mov	r1, r4
 800590a:	4640      	mov	r0, r8
 800590c:	f8cd a000 	str.w	sl, [sp]
 8005910:	aa03      	add	r2, sp, #12
 8005912:	f7ff fee1 	bl	80056d8 <_printf_common>
 8005916:	3001      	adds	r0, #1
 8005918:	d14a      	bne.n	80059b0 <_printf_i+0x1f4>
 800591a:	f04f 30ff 	mov.w	r0, #4294967295
 800591e:	b004      	add	sp, #16
 8005920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	f043 0320 	orr.w	r3, r3, #32
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	2778      	movs	r7, #120	@ 0x78
 800592e:	4832      	ldr	r0, [pc, #200]	@ (80059f8 <_printf_i+0x23c>)
 8005930:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	6831      	ldr	r1, [r6, #0]
 8005938:	061f      	lsls	r7, r3, #24
 800593a:	f851 5b04 	ldr.w	r5, [r1], #4
 800593e:	d402      	bmi.n	8005946 <_printf_i+0x18a>
 8005940:	065f      	lsls	r7, r3, #25
 8005942:	bf48      	it	mi
 8005944:	b2ad      	uxthmi	r5, r5
 8005946:	6031      	str	r1, [r6, #0]
 8005948:	07d9      	lsls	r1, r3, #31
 800594a:	bf44      	itt	mi
 800594c:	f043 0320 	orrmi.w	r3, r3, #32
 8005950:	6023      	strmi	r3, [r4, #0]
 8005952:	b11d      	cbz	r5, 800595c <_printf_i+0x1a0>
 8005954:	2310      	movs	r3, #16
 8005956:	e7ab      	b.n	80058b0 <_printf_i+0xf4>
 8005958:	4826      	ldr	r0, [pc, #152]	@ (80059f4 <_printf_i+0x238>)
 800595a:	e7e9      	b.n	8005930 <_printf_i+0x174>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	f023 0320 	bic.w	r3, r3, #32
 8005962:	6023      	str	r3, [r4, #0]
 8005964:	e7f6      	b.n	8005954 <_printf_i+0x198>
 8005966:	4616      	mov	r6, r2
 8005968:	e7bd      	b.n	80058e6 <_printf_i+0x12a>
 800596a:	6833      	ldr	r3, [r6, #0]
 800596c:	6825      	ldr	r5, [r4, #0]
 800596e:	1d18      	adds	r0, r3, #4
 8005970:	6961      	ldr	r1, [r4, #20]
 8005972:	6030      	str	r0, [r6, #0]
 8005974:	062e      	lsls	r6, r5, #24
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	d501      	bpl.n	800597e <_printf_i+0x1c2>
 800597a:	6019      	str	r1, [r3, #0]
 800597c:	e002      	b.n	8005984 <_printf_i+0x1c8>
 800597e:	0668      	lsls	r0, r5, #25
 8005980:	d5fb      	bpl.n	800597a <_printf_i+0x1be>
 8005982:	8019      	strh	r1, [r3, #0]
 8005984:	2300      	movs	r3, #0
 8005986:	4616      	mov	r6, r2
 8005988:	6123      	str	r3, [r4, #16]
 800598a:	e7bc      	b.n	8005906 <_printf_i+0x14a>
 800598c:	6833      	ldr	r3, [r6, #0]
 800598e:	2100      	movs	r1, #0
 8005990:	1d1a      	adds	r2, r3, #4
 8005992:	6032      	str	r2, [r6, #0]
 8005994:	681e      	ldr	r6, [r3, #0]
 8005996:	6862      	ldr	r2, [r4, #4]
 8005998:	4630      	mov	r0, r6
 800599a:	f000 fce8 	bl	800636e <memchr>
 800599e:	b108      	cbz	r0, 80059a4 <_printf_i+0x1e8>
 80059a0:	1b80      	subs	r0, r0, r6
 80059a2:	6060      	str	r0, [r4, #4]
 80059a4:	6863      	ldr	r3, [r4, #4]
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	2300      	movs	r3, #0
 80059aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ae:	e7aa      	b.n	8005906 <_printf_i+0x14a>
 80059b0:	4632      	mov	r2, r6
 80059b2:	4649      	mov	r1, r9
 80059b4:	4640      	mov	r0, r8
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	47d0      	blx	sl
 80059ba:	3001      	adds	r0, #1
 80059bc:	d0ad      	beq.n	800591a <_printf_i+0x15e>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	079b      	lsls	r3, r3, #30
 80059c2:	d413      	bmi.n	80059ec <_printf_i+0x230>
 80059c4:	68e0      	ldr	r0, [r4, #12]
 80059c6:	9b03      	ldr	r3, [sp, #12]
 80059c8:	4298      	cmp	r0, r3
 80059ca:	bfb8      	it	lt
 80059cc:	4618      	movlt	r0, r3
 80059ce:	e7a6      	b.n	800591e <_printf_i+0x162>
 80059d0:	2301      	movs	r3, #1
 80059d2:	4632      	mov	r2, r6
 80059d4:	4649      	mov	r1, r9
 80059d6:	4640      	mov	r0, r8
 80059d8:	47d0      	blx	sl
 80059da:	3001      	adds	r0, #1
 80059dc:	d09d      	beq.n	800591a <_printf_i+0x15e>
 80059de:	3501      	adds	r5, #1
 80059e0:	68e3      	ldr	r3, [r4, #12]
 80059e2:	9903      	ldr	r1, [sp, #12]
 80059e4:	1a5b      	subs	r3, r3, r1
 80059e6:	42ab      	cmp	r3, r5
 80059e8:	dcf2      	bgt.n	80059d0 <_printf_i+0x214>
 80059ea:	e7eb      	b.n	80059c4 <_printf_i+0x208>
 80059ec:	2500      	movs	r5, #0
 80059ee:	f104 0619 	add.w	r6, r4, #25
 80059f2:	e7f5      	b.n	80059e0 <_printf_i+0x224>
 80059f4:	0800b104 	.word	0x0800b104
 80059f8:	0800b115 	.word	0x0800b115

080059fc <_scanf_float>:
 80059fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a00:	b087      	sub	sp, #28
 8005a02:	9303      	str	r3, [sp, #12]
 8005a04:	688b      	ldr	r3, [r1, #8]
 8005a06:	4617      	mov	r7, r2
 8005a08:	1e5a      	subs	r2, r3, #1
 8005a0a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005a0e:	bf82      	ittt	hi
 8005a10:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005a14:	eb03 0b05 	addhi.w	fp, r3, r5
 8005a18:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005a1c:	460a      	mov	r2, r1
 8005a1e:	f04f 0500 	mov.w	r5, #0
 8005a22:	bf88      	it	hi
 8005a24:	608b      	strhi	r3, [r1, #8]
 8005a26:	680b      	ldr	r3, [r1, #0]
 8005a28:	4680      	mov	r8, r0
 8005a2a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005a2e:	f842 3b1c 	str.w	r3, [r2], #28
 8005a32:	460c      	mov	r4, r1
 8005a34:	bf98      	it	ls
 8005a36:	f04f 0b00 	movls.w	fp, #0
 8005a3a:	4616      	mov	r6, r2
 8005a3c:	46aa      	mov	sl, r5
 8005a3e:	46a9      	mov	r9, r5
 8005a40:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005a44:	9201      	str	r2, [sp, #4]
 8005a46:	9502      	str	r5, [sp, #8]
 8005a48:	68a2      	ldr	r2, [r4, #8]
 8005a4a:	b152      	cbz	r2, 8005a62 <_scanf_float+0x66>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b4e      	cmp	r3, #78	@ 0x4e
 8005a52:	d865      	bhi.n	8005b20 <_scanf_float+0x124>
 8005a54:	2b40      	cmp	r3, #64	@ 0x40
 8005a56:	d83d      	bhi.n	8005ad4 <_scanf_float+0xd8>
 8005a58:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005a5c:	b2c8      	uxtb	r0, r1
 8005a5e:	280e      	cmp	r0, #14
 8005a60:	d93b      	bls.n	8005ada <_scanf_float+0xde>
 8005a62:	f1b9 0f00 	cmp.w	r9, #0
 8005a66:	d003      	beq.n	8005a70 <_scanf_float+0x74>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a74:	f1ba 0f01 	cmp.w	sl, #1
 8005a78:	f200 8118 	bhi.w	8005cac <_scanf_float+0x2b0>
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	429e      	cmp	r6, r3
 8005a80:	f200 8109 	bhi.w	8005c96 <_scanf_float+0x29a>
 8005a84:	2001      	movs	r0, #1
 8005a86:	b007      	add	sp, #28
 8005a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005a90:	2a0d      	cmp	r2, #13
 8005a92:	d8e6      	bhi.n	8005a62 <_scanf_float+0x66>
 8005a94:	a101      	add	r1, pc, #4	@ (adr r1, 8005a9c <_scanf_float+0xa0>)
 8005a96:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005be3 	.word	0x08005be3
 8005aa0:	08005a63 	.word	0x08005a63
 8005aa4:	08005a63 	.word	0x08005a63
 8005aa8:	08005a63 	.word	0x08005a63
 8005aac:	08005c43 	.word	0x08005c43
 8005ab0:	08005c1b 	.word	0x08005c1b
 8005ab4:	08005a63 	.word	0x08005a63
 8005ab8:	08005a63 	.word	0x08005a63
 8005abc:	08005bf1 	.word	0x08005bf1
 8005ac0:	08005a63 	.word	0x08005a63
 8005ac4:	08005a63 	.word	0x08005a63
 8005ac8:	08005a63 	.word	0x08005a63
 8005acc:	08005a63 	.word	0x08005a63
 8005ad0:	08005ba9 	.word	0x08005ba9
 8005ad4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005ad8:	e7da      	b.n	8005a90 <_scanf_float+0x94>
 8005ada:	290e      	cmp	r1, #14
 8005adc:	d8c1      	bhi.n	8005a62 <_scanf_float+0x66>
 8005ade:	a001      	add	r0, pc, #4	@ (adr r0, 8005ae4 <_scanf_float+0xe8>)
 8005ae0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ae4:	08005b99 	.word	0x08005b99
 8005ae8:	08005a63 	.word	0x08005a63
 8005aec:	08005b99 	.word	0x08005b99
 8005af0:	08005c2f 	.word	0x08005c2f
 8005af4:	08005a63 	.word	0x08005a63
 8005af8:	08005b41 	.word	0x08005b41
 8005afc:	08005b7f 	.word	0x08005b7f
 8005b00:	08005b7f 	.word	0x08005b7f
 8005b04:	08005b7f 	.word	0x08005b7f
 8005b08:	08005b7f 	.word	0x08005b7f
 8005b0c:	08005b7f 	.word	0x08005b7f
 8005b10:	08005b7f 	.word	0x08005b7f
 8005b14:	08005b7f 	.word	0x08005b7f
 8005b18:	08005b7f 	.word	0x08005b7f
 8005b1c:	08005b7f 	.word	0x08005b7f
 8005b20:	2b6e      	cmp	r3, #110	@ 0x6e
 8005b22:	d809      	bhi.n	8005b38 <_scanf_float+0x13c>
 8005b24:	2b60      	cmp	r3, #96	@ 0x60
 8005b26:	d8b1      	bhi.n	8005a8c <_scanf_float+0x90>
 8005b28:	2b54      	cmp	r3, #84	@ 0x54
 8005b2a:	d07b      	beq.n	8005c24 <_scanf_float+0x228>
 8005b2c:	2b59      	cmp	r3, #89	@ 0x59
 8005b2e:	d198      	bne.n	8005a62 <_scanf_float+0x66>
 8005b30:	2d07      	cmp	r5, #7
 8005b32:	d196      	bne.n	8005a62 <_scanf_float+0x66>
 8005b34:	2508      	movs	r5, #8
 8005b36:	e02c      	b.n	8005b92 <_scanf_float+0x196>
 8005b38:	2b74      	cmp	r3, #116	@ 0x74
 8005b3a:	d073      	beq.n	8005c24 <_scanf_float+0x228>
 8005b3c:	2b79      	cmp	r3, #121	@ 0x79
 8005b3e:	e7f6      	b.n	8005b2e <_scanf_float+0x132>
 8005b40:	6821      	ldr	r1, [r4, #0]
 8005b42:	05c8      	lsls	r0, r1, #23
 8005b44:	d51b      	bpl.n	8005b7e <_scanf_float+0x182>
 8005b46:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005b4a:	6021      	str	r1, [r4, #0]
 8005b4c:	f109 0901 	add.w	r9, r9, #1
 8005b50:	f1bb 0f00 	cmp.w	fp, #0
 8005b54:	d003      	beq.n	8005b5e <_scanf_float+0x162>
 8005b56:	3201      	adds	r2, #1
 8005b58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b5c:	60a2      	str	r2, [r4, #8]
 8005b5e:	68a3      	ldr	r3, [r4, #8]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	60a3      	str	r3, [r4, #8]
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	3301      	adds	r3, #1
 8005b68:	6123      	str	r3, [r4, #16]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	f340 8087 	ble.w	8005c84 <_scanf_float+0x288>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	e764      	b.n	8005a48 <_scanf_float+0x4c>
 8005b7e:	eb1a 0105 	adds.w	r1, sl, r5
 8005b82:	f47f af6e 	bne.w	8005a62 <_scanf_float+0x66>
 8005b86:	460d      	mov	r5, r1
 8005b88:	468a      	mov	sl, r1
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	f806 3b01 	strb.w	r3, [r6], #1
 8005b96:	e7e2      	b.n	8005b5e <_scanf_float+0x162>
 8005b98:	6822      	ldr	r2, [r4, #0]
 8005b9a:	0610      	lsls	r0, r2, #24
 8005b9c:	f57f af61 	bpl.w	8005a62 <_scanf_float+0x66>
 8005ba0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ba4:	6022      	str	r2, [r4, #0]
 8005ba6:	e7f4      	b.n	8005b92 <_scanf_float+0x196>
 8005ba8:	f1ba 0f00 	cmp.w	sl, #0
 8005bac:	d10e      	bne.n	8005bcc <_scanf_float+0x1d0>
 8005bae:	f1b9 0f00 	cmp.w	r9, #0
 8005bb2:	d10e      	bne.n	8005bd2 <_scanf_float+0x1d6>
 8005bb4:	6822      	ldr	r2, [r4, #0]
 8005bb6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005bba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005bbe:	d108      	bne.n	8005bd2 <_scanf_float+0x1d6>
 8005bc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005bc4:	f04f 0a01 	mov.w	sl, #1
 8005bc8:	6022      	str	r2, [r4, #0]
 8005bca:	e7e2      	b.n	8005b92 <_scanf_float+0x196>
 8005bcc:	f1ba 0f02 	cmp.w	sl, #2
 8005bd0:	d055      	beq.n	8005c7e <_scanf_float+0x282>
 8005bd2:	2d01      	cmp	r5, #1
 8005bd4:	d002      	beq.n	8005bdc <_scanf_float+0x1e0>
 8005bd6:	2d04      	cmp	r5, #4
 8005bd8:	f47f af43 	bne.w	8005a62 <_scanf_float+0x66>
 8005bdc:	3501      	adds	r5, #1
 8005bde:	b2ed      	uxtb	r5, r5
 8005be0:	e7d7      	b.n	8005b92 <_scanf_float+0x196>
 8005be2:	f1ba 0f01 	cmp.w	sl, #1
 8005be6:	f47f af3c 	bne.w	8005a62 <_scanf_float+0x66>
 8005bea:	f04f 0a02 	mov.w	sl, #2
 8005bee:	e7d0      	b.n	8005b92 <_scanf_float+0x196>
 8005bf0:	b97d      	cbnz	r5, 8005c12 <_scanf_float+0x216>
 8005bf2:	f1b9 0f00 	cmp.w	r9, #0
 8005bf6:	f47f af37 	bne.w	8005a68 <_scanf_float+0x6c>
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005c00:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005c04:	f040 8103 	bne.w	8005e0e <_scanf_float+0x412>
 8005c08:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005c0c:	2501      	movs	r5, #1
 8005c0e:	6022      	str	r2, [r4, #0]
 8005c10:	e7bf      	b.n	8005b92 <_scanf_float+0x196>
 8005c12:	2d03      	cmp	r5, #3
 8005c14:	d0e2      	beq.n	8005bdc <_scanf_float+0x1e0>
 8005c16:	2d05      	cmp	r5, #5
 8005c18:	e7de      	b.n	8005bd8 <_scanf_float+0x1dc>
 8005c1a:	2d02      	cmp	r5, #2
 8005c1c:	f47f af21 	bne.w	8005a62 <_scanf_float+0x66>
 8005c20:	2503      	movs	r5, #3
 8005c22:	e7b6      	b.n	8005b92 <_scanf_float+0x196>
 8005c24:	2d06      	cmp	r5, #6
 8005c26:	f47f af1c 	bne.w	8005a62 <_scanf_float+0x66>
 8005c2a:	2507      	movs	r5, #7
 8005c2c:	e7b1      	b.n	8005b92 <_scanf_float+0x196>
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	0591      	lsls	r1, r2, #22
 8005c32:	f57f af16 	bpl.w	8005a62 <_scanf_float+0x66>
 8005c36:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005c3a:	6022      	str	r2, [r4, #0]
 8005c3c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c40:	e7a7      	b.n	8005b92 <_scanf_float+0x196>
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005c48:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005c4c:	d006      	beq.n	8005c5c <_scanf_float+0x260>
 8005c4e:	0550      	lsls	r0, r2, #21
 8005c50:	f57f af07 	bpl.w	8005a62 <_scanf_float+0x66>
 8005c54:	f1b9 0f00 	cmp.w	r9, #0
 8005c58:	f000 80d9 	beq.w	8005e0e <_scanf_float+0x412>
 8005c5c:	0591      	lsls	r1, r2, #22
 8005c5e:	bf58      	it	pl
 8005c60:	9902      	ldrpl	r1, [sp, #8]
 8005c62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005c66:	bf58      	it	pl
 8005c68:	eba9 0101 	subpl.w	r1, r9, r1
 8005c6c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005c70:	f04f 0900 	mov.w	r9, #0
 8005c74:	bf58      	it	pl
 8005c76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005c7a:	6022      	str	r2, [r4, #0]
 8005c7c:	e789      	b.n	8005b92 <_scanf_float+0x196>
 8005c7e:	f04f 0a03 	mov.w	sl, #3
 8005c82:	e786      	b.n	8005b92 <_scanf_float+0x196>
 8005c84:	4639      	mov	r1, r7
 8005c86:	4640      	mov	r0, r8
 8005c88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005c8c:	4798      	blx	r3
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f43f aeda 	beq.w	8005a48 <_scanf_float+0x4c>
 8005c94:	e6e5      	b.n	8005a62 <_scanf_float+0x66>
 8005c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c9a:	463a      	mov	r2, r7
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ca2:	4798      	blx	r3
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	6123      	str	r3, [r4, #16]
 8005caa:	e6e7      	b.n	8005a7c <_scanf_float+0x80>
 8005cac:	1e6b      	subs	r3, r5, #1
 8005cae:	2b06      	cmp	r3, #6
 8005cb0:	d824      	bhi.n	8005cfc <_scanf_float+0x300>
 8005cb2:	2d02      	cmp	r5, #2
 8005cb4:	d836      	bhi.n	8005d24 <_scanf_float+0x328>
 8005cb6:	9b01      	ldr	r3, [sp, #4]
 8005cb8:	429e      	cmp	r6, r3
 8005cba:	f67f aee3 	bls.w	8005a84 <_scanf_float+0x88>
 8005cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005cc2:	463a      	mov	r2, r7
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cca:	4798      	blx	r3
 8005ccc:	6923      	ldr	r3, [r4, #16]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	e7f0      	b.n	8005cb6 <_scanf_float+0x2ba>
 8005cd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005cd8:	463a      	mov	r2, r7
 8005cda:	4640      	mov	r0, r8
 8005cdc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005ce0:	4798      	blx	r3
 8005ce2:	6923      	ldr	r3, [r4, #16]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	6123      	str	r3, [r4, #16]
 8005ce8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cec:	fa5f fa8a 	uxtb.w	sl, sl
 8005cf0:	f1ba 0f02 	cmp.w	sl, #2
 8005cf4:	d1ee      	bne.n	8005cd4 <_scanf_float+0x2d8>
 8005cf6:	3d03      	subs	r5, #3
 8005cf8:	b2ed      	uxtb	r5, r5
 8005cfa:	1b76      	subs	r6, r6, r5
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	05da      	lsls	r2, r3, #23
 8005d00:	d530      	bpl.n	8005d64 <_scanf_float+0x368>
 8005d02:	055b      	lsls	r3, r3, #21
 8005d04:	d511      	bpl.n	8005d2a <_scanf_float+0x32e>
 8005d06:	9b01      	ldr	r3, [sp, #4]
 8005d08:	429e      	cmp	r6, r3
 8005d0a:	f67f aebb 	bls.w	8005a84 <_scanf_float+0x88>
 8005d0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d12:	463a      	mov	r2, r7
 8005d14:	4640      	mov	r0, r8
 8005d16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d1a:	4798      	blx	r3
 8005d1c:	6923      	ldr	r3, [r4, #16]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	6123      	str	r3, [r4, #16]
 8005d22:	e7f0      	b.n	8005d06 <_scanf_float+0x30a>
 8005d24:	46aa      	mov	sl, r5
 8005d26:	46b3      	mov	fp, r6
 8005d28:	e7de      	b.n	8005ce8 <_scanf_float+0x2ec>
 8005d2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	2965      	cmp	r1, #101	@ 0x65
 8005d32:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d36:	f106 35ff 	add.w	r5, r6, #4294967295
 8005d3a:	6123      	str	r3, [r4, #16]
 8005d3c:	d00c      	beq.n	8005d58 <_scanf_float+0x35c>
 8005d3e:	2945      	cmp	r1, #69	@ 0x45
 8005d40:	d00a      	beq.n	8005d58 <_scanf_float+0x35c>
 8005d42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d46:	463a      	mov	r2, r7
 8005d48:	4640      	mov	r0, r8
 8005d4a:	4798      	blx	r3
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	1eb5      	subs	r5, r6, #2
 8005d56:	6123      	str	r3, [r4, #16]
 8005d58:	463a      	mov	r2, r7
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005d60:	4798      	blx	r3
 8005d62:	462e      	mov	r6, r5
 8005d64:	6822      	ldr	r2, [r4, #0]
 8005d66:	f012 0210 	ands.w	r2, r2, #16
 8005d6a:	d001      	beq.n	8005d70 <_scanf_float+0x374>
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e68a      	b.n	8005a86 <_scanf_float+0x8a>
 8005d70:	7032      	strb	r2, [r6, #0]
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d7c:	d11c      	bne.n	8005db8 <_scanf_float+0x3bc>
 8005d7e:	9b02      	ldr	r3, [sp, #8]
 8005d80:	454b      	cmp	r3, r9
 8005d82:	eba3 0209 	sub.w	r2, r3, r9
 8005d86:	d123      	bne.n	8005dd0 <_scanf_float+0x3d4>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	9901      	ldr	r1, [sp, #4]
 8005d8e:	f002 fcf3 	bl	8008778 <_strtod_r>
 8005d92:	9b03      	ldr	r3, [sp, #12]
 8005d94:	6825      	ldr	r5, [r4, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f015 0f02 	tst.w	r5, #2
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	460f      	mov	r7, r1
 8005da0:	f103 0204 	add.w	r2, r3, #4
 8005da4:	d01f      	beq.n	8005de6 <_scanf_float+0x3ea>
 8005da6:	9903      	ldr	r1, [sp, #12]
 8005da8:	600a      	str	r2, [r1, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	e9c3 6700 	strd	r6, r7, [r3]
 8005db0:	68e3      	ldr	r3, [r4, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60e3      	str	r3, [r4, #12]
 8005db6:	e7d9      	b.n	8005d6c <_scanf_float+0x370>
 8005db8:	9b04      	ldr	r3, [sp, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0e4      	beq.n	8005d88 <_scanf_float+0x38c>
 8005dbe:	9905      	ldr	r1, [sp, #20]
 8005dc0:	230a      	movs	r3, #10
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	3101      	adds	r1, #1
 8005dc6:	f002 fd57 	bl	8008878 <_strtol_r>
 8005dca:	9b04      	ldr	r3, [sp, #16]
 8005dcc:	9e05      	ldr	r6, [sp, #20]
 8005dce:	1ac2      	subs	r2, r0, r3
 8005dd0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005dd4:	429e      	cmp	r6, r3
 8005dd6:	bf28      	it	cs
 8005dd8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005ddc:	4630      	mov	r0, r6
 8005dde:	490d      	ldr	r1, [pc, #52]	@ (8005e14 <_scanf_float+0x418>)
 8005de0:	f000 f94e 	bl	8006080 <siprintf>
 8005de4:	e7d0      	b.n	8005d88 <_scanf_float+0x38c>
 8005de6:	076d      	lsls	r5, r5, #29
 8005de8:	d4dd      	bmi.n	8005da6 <_scanf_float+0x3aa>
 8005dea:	9d03      	ldr	r5, [sp, #12]
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	681d      	ldr	r5, [r3, #0]
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	f7fa fe0a 	bl	8000a0c <__aeabi_dcmpun>
 8005df8:	b120      	cbz	r0, 8005e04 <_scanf_float+0x408>
 8005dfa:	4807      	ldr	r0, [pc, #28]	@ (8005e18 <_scanf_float+0x41c>)
 8005dfc:	f000 fac6 	bl	800638c <nanf>
 8005e00:	6028      	str	r0, [r5, #0]
 8005e02:	e7d5      	b.n	8005db0 <_scanf_float+0x3b4>
 8005e04:	4630      	mov	r0, r6
 8005e06:	4639      	mov	r1, r7
 8005e08:	f7fa fe5e 	bl	8000ac8 <__aeabi_d2f>
 8005e0c:	e7f8      	b.n	8005e00 <_scanf_float+0x404>
 8005e0e:	f04f 0900 	mov.w	r9, #0
 8005e12:	e62d      	b.n	8005a70 <_scanf_float+0x74>
 8005e14:	0800b126 	.word	0x0800b126
 8005e18:	0800b4bd 	.word	0x0800b4bd

08005e1c <std>:
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	b510      	push	{r4, lr}
 8005e20:	4604      	mov	r4, r0
 8005e22:	e9c0 3300 	strd	r3, r3, [r0]
 8005e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e2a:	6083      	str	r3, [r0, #8]
 8005e2c:	8181      	strh	r1, [r0, #12]
 8005e2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e30:	81c2      	strh	r2, [r0, #14]
 8005e32:	6183      	str	r3, [r0, #24]
 8005e34:	4619      	mov	r1, r3
 8005e36:	2208      	movs	r2, #8
 8005e38:	305c      	adds	r0, #92	@ 0x5c
 8005e3a:	f000 fa19 	bl	8006270 <memset>
 8005e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e74 <std+0x58>)
 8005e40:	6224      	str	r4, [r4, #32]
 8005e42:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e44:	4b0c      	ldr	r3, [pc, #48]	@ (8005e78 <std+0x5c>)
 8005e46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e48:	4b0c      	ldr	r3, [pc, #48]	@ (8005e7c <std+0x60>)
 8005e4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e80 <std+0x64>)
 8005e4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e50:	4b0c      	ldr	r3, [pc, #48]	@ (8005e84 <std+0x68>)
 8005e52:	429c      	cmp	r4, r3
 8005e54:	d006      	beq.n	8005e64 <std+0x48>
 8005e56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e5a:	4294      	cmp	r4, r2
 8005e5c:	d002      	beq.n	8005e64 <std+0x48>
 8005e5e:	33d0      	adds	r3, #208	@ 0xd0
 8005e60:	429c      	cmp	r4, r3
 8005e62:	d105      	bne.n	8005e70 <std+0x54>
 8005e64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6c:	f000 ba7c 	b.w	8006368 <__retarget_lock_init_recursive>
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	bf00      	nop
 8005e74:	080060c1 	.word	0x080060c1
 8005e78:	080060e3 	.word	0x080060e3
 8005e7c:	0800611b 	.word	0x0800611b
 8005e80:	0800613f 	.word	0x0800613f
 8005e84:	20000310 	.word	0x20000310

08005e88 <stdio_exit_handler>:
 8005e88:	4a02      	ldr	r2, [pc, #8]	@ (8005e94 <stdio_exit_handler+0xc>)
 8005e8a:	4903      	ldr	r1, [pc, #12]	@ (8005e98 <stdio_exit_handler+0x10>)
 8005e8c:	4803      	ldr	r0, [pc, #12]	@ (8005e9c <stdio_exit_handler+0x14>)
 8005e8e:	f000 b869 	b.w	8005f64 <_fwalk_sglue>
 8005e92:	bf00      	nop
 8005e94:	20000014 	.word	0x20000014
 8005e98:	08008ead 	.word	0x08008ead
 8005e9c:	20000024 	.word	0x20000024

08005ea0 <cleanup_stdio>:
 8005ea0:	6841      	ldr	r1, [r0, #4]
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed4 <cleanup_stdio+0x34>)
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	4299      	cmp	r1, r3
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	d001      	beq.n	8005eb0 <cleanup_stdio+0x10>
 8005eac:	f002 fffe 	bl	8008eac <_fflush_r>
 8005eb0:	68a1      	ldr	r1, [r4, #8]
 8005eb2:	4b09      	ldr	r3, [pc, #36]	@ (8005ed8 <cleanup_stdio+0x38>)
 8005eb4:	4299      	cmp	r1, r3
 8005eb6:	d002      	beq.n	8005ebe <cleanup_stdio+0x1e>
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f002 fff7 	bl	8008eac <_fflush_r>
 8005ebe:	68e1      	ldr	r1, [r4, #12]
 8005ec0:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <cleanup_stdio+0x3c>)
 8005ec2:	4299      	cmp	r1, r3
 8005ec4:	d004      	beq.n	8005ed0 <cleanup_stdio+0x30>
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ecc:	f002 bfee 	b.w	8008eac <_fflush_r>
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000310 	.word	0x20000310
 8005ed8:	20000378 	.word	0x20000378
 8005edc:	200003e0 	.word	0x200003e0

08005ee0 <global_stdio_init.part.0>:
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8005f10 <global_stdio_init.part.0+0x30>)
 8005ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8005f14 <global_stdio_init.part.0+0x34>)
 8005ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8005f18 <global_stdio_init.part.0+0x38>)
 8005ee8:	4620      	mov	r0, r4
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	2104      	movs	r1, #4
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f7ff ff94 	bl	8005e1c <std>
 8005ef4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ef8:	2201      	movs	r2, #1
 8005efa:	2109      	movs	r1, #9
 8005efc:	f7ff ff8e 	bl	8005e1c <std>
 8005f00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f04:	2202      	movs	r2, #2
 8005f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f0a:	2112      	movs	r1, #18
 8005f0c:	f7ff bf86 	b.w	8005e1c <std>
 8005f10:	20000448 	.word	0x20000448
 8005f14:	20000310 	.word	0x20000310
 8005f18:	08005e89 	.word	0x08005e89

08005f1c <__sfp_lock_acquire>:
 8005f1c:	4801      	ldr	r0, [pc, #4]	@ (8005f24 <__sfp_lock_acquire+0x8>)
 8005f1e:	f000 ba24 	b.w	800636a <__retarget_lock_acquire_recursive>
 8005f22:	bf00      	nop
 8005f24:	20000451 	.word	0x20000451

08005f28 <__sfp_lock_release>:
 8005f28:	4801      	ldr	r0, [pc, #4]	@ (8005f30 <__sfp_lock_release+0x8>)
 8005f2a:	f000 ba1f 	b.w	800636c <__retarget_lock_release_recursive>
 8005f2e:	bf00      	nop
 8005f30:	20000451 	.word	0x20000451

08005f34 <__sinit>:
 8005f34:	b510      	push	{r4, lr}
 8005f36:	4604      	mov	r4, r0
 8005f38:	f7ff fff0 	bl	8005f1c <__sfp_lock_acquire>
 8005f3c:	6a23      	ldr	r3, [r4, #32]
 8005f3e:	b11b      	cbz	r3, 8005f48 <__sinit+0x14>
 8005f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f44:	f7ff bff0 	b.w	8005f28 <__sfp_lock_release>
 8005f48:	4b04      	ldr	r3, [pc, #16]	@ (8005f5c <__sinit+0x28>)
 8005f4a:	6223      	str	r3, [r4, #32]
 8005f4c:	4b04      	ldr	r3, [pc, #16]	@ (8005f60 <__sinit+0x2c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f5      	bne.n	8005f40 <__sinit+0xc>
 8005f54:	f7ff ffc4 	bl	8005ee0 <global_stdio_init.part.0>
 8005f58:	e7f2      	b.n	8005f40 <__sinit+0xc>
 8005f5a:	bf00      	nop
 8005f5c:	08005ea1 	.word	0x08005ea1
 8005f60:	20000448 	.word	0x20000448

08005f64 <_fwalk_sglue>:
 8005f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f68:	4607      	mov	r7, r0
 8005f6a:	4688      	mov	r8, r1
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	2600      	movs	r6, #0
 8005f70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f74:	f1b9 0901 	subs.w	r9, r9, #1
 8005f78:	d505      	bpl.n	8005f86 <_fwalk_sglue+0x22>
 8005f7a:	6824      	ldr	r4, [r4, #0]
 8005f7c:	2c00      	cmp	r4, #0
 8005f7e:	d1f7      	bne.n	8005f70 <_fwalk_sglue+0xc>
 8005f80:	4630      	mov	r0, r6
 8005f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d907      	bls.n	8005f9c <_fwalk_sglue+0x38>
 8005f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f90:	3301      	adds	r3, #1
 8005f92:	d003      	beq.n	8005f9c <_fwalk_sglue+0x38>
 8005f94:	4629      	mov	r1, r5
 8005f96:	4638      	mov	r0, r7
 8005f98:	47c0      	blx	r8
 8005f9a:	4306      	orrs	r6, r0
 8005f9c:	3568      	adds	r5, #104	@ 0x68
 8005f9e:	e7e9      	b.n	8005f74 <_fwalk_sglue+0x10>

08005fa0 <iprintf>:
 8005fa0:	b40f      	push	{r0, r1, r2, r3}
 8005fa2:	b507      	push	{r0, r1, r2, lr}
 8005fa4:	4906      	ldr	r1, [pc, #24]	@ (8005fc0 <iprintf+0x20>)
 8005fa6:	ab04      	add	r3, sp, #16
 8005fa8:	6808      	ldr	r0, [r1, #0]
 8005faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fae:	6881      	ldr	r1, [r0, #8]
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	f002 fde3 	bl	8008b7c <_vfiprintf_r>
 8005fb6:	b003      	add	sp, #12
 8005fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fbc:	b004      	add	sp, #16
 8005fbe:	4770      	bx	lr
 8005fc0:	20000020 	.word	0x20000020

08005fc4 <_puts_r>:
 8005fc4:	6a03      	ldr	r3, [r0, #32]
 8005fc6:	b570      	push	{r4, r5, r6, lr}
 8005fc8:	4605      	mov	r5, r0
 8005fca:	460e      	mov	r6, r1
 8005fcc:	6884      	ldr	r4, [r0, #8]
 8005fce:	b90b      	cbnz	r3, 8005fd4 <_puts_r+0x10>
 8005fd0:	f7ff ffb0 	bl	8005f34 <__sinit>
 8005fd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fd6:	07db      	lsls	r3, r3, #31
 8005fd8:	d405      	bmi.n	8005fe6 <_puts_r+0x22>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	0598      	lsls	r0, r3, #22
 8005fde:	d402      	bmi.n	8005fe6 <_puts_r+0x22>
 8005fe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fe2:	f000 f9c2 	bl	800636a <__retarget_lock_acquire_recursive>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	0719      	lsls	r1, r3, #28
 8005fea:	d502      	bpl.n	8005ff2 <_puts_r+0x2e>
 8005fec:	6923      	ldr	r3, [r4, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d135      	bne.n	800605e <_puts_r+0x9a>
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f8e5 	bl	80061c4 <__swsetup_r>
 8005ffa:	b380      	cbz	r0, 800605e <_puts_r+0x9a>
 8005ffc:	f04f 35ff 	mov.w	r5, #4294967295
 8006000:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006002:	07da      	lsls	r2, r3, #31
 8006004:	d405      	bmi.n	8006012 <_puts_r+0x4e>
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	059b      	lsls	r3, r3, #22
 800600a:	d402      	bmi.n	8006012 <_puts_r+0x4e>
 800600c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800600e:	f000 f9ad 	bl	800636c <__retarget_lock_release_recursive>
 8006012:	4628      	mov	r0, r5
 8006014:	bd70      	pop	{r4, r5, r6, pc}
 8006016:	2b00      	cmp	r3, #0
 8006018:	da04      	bge.n	8006024 <_puts_r+0x60>
 800601a:	69a2      	ldr	r2, [r4, #24]
 800601c:	429a      	cmp	r2, r3
 800601e:	dc17      	bgt.n	8006050 <_puts_r+0x8c>
 8006020:	290a      	cmp	r1, #10
 8006022:	d015      	beq.n	8006050 <_puts_r+0x8c>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	6022      	str	r2, [r4, #0]
 800602a:	7019      	strb	r1, [r3, #0]
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006032:	3b01      	subs	r3, #1
 8006034:	60a3      	str	r3, [r4, #8]
 8006036:	2900      	cmp	r1, #0
 8006038:	d1ed      	bne.n	8006016 <_puts_r+0x52>
 800603a:	2b00      	cmp	r3, #0
 800603c:	da11      	bge.n	8006062 <_puts_r+0x9e>
 800603e:	4622      	mov	r2, r4
 8006040:	210a      	movs	r1, #10
 8006042:	4628      	mov	r0, r5
 8006044:	f000 f87f 	bl	8006146 <__swbuf_r>
 8006048:	3001      	adds	r0, #1
 800604a:	d0d7      	beq.n	8005ffc <_puts_r+0x38>
 800604c:	250a      	movs	r5, #10
 800604e:	e7d7      	b.n	8006000 <_puts_r+0x3c>
 8006050:	4622      	mov	r2, r4
 8006052:	4628      	mov	r0, r5
 8006054:	f000 f877 	bl	8006146 <__swbuf_r>
 8006058:	3001      	adds	r0, #1
 800605a:	d1e7      	bne.n	800602c <_puts_r+0x68>
 800605c:	e7ce      	b.n	8005ffc <_puts_r+0x38>
 800605e:	3e01      	subs	r6, #1
 8006060:	e7e4      	b.n	800602c <_puts_r+0x68>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	6022      	str	r2, [r4, #0]
 8006068:	220a      	movs	r2, #10
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	e7ee      	b.n	800604c <_puts_r+0x88>
	...

08006070 <puts>:
 8006070:	4b02      	ldr	r3, [pc, #8]	@ (800607c <puts+0xc>)
 8006072:	4601      	mov	r1, r0
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	f7ff bfa5 	b.w	8005fc4 <_puts_r>
 800607a:	bf00      	nop
 800607c:	20000020 	.word	0x20000020

08006080 <siprintf>:
 8006080:	b40e      	push	{r1, r2, r3}
 8006082:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006086:	b500      	push	{lr}
 8006088:	b09c      	sub	sp, #112	@ 0x70
 800608a:	ab1d      	add	r3, sp, #116	@ 0x74
 800608c:	9002      	str	r0, [sp, #8]
 800608e:	9006      	str	r0, [sp, #24]
 8006090:	9107      	str	r1, [sp, #28]
 8006092:	9104      	str	r1, [sp, #16]
 8006094:	4808      	ldr	r0, [pc, #32]	@ (80060b8 <siprintf+0x38>)
 8006096:	4909      	ldr	r1, [pc, #36]	@ (80060bc <siprintf+0x3c>)
 8006098:	f853 2b04 	ldr.w	r2, [r3], #4
 800609c:	9105      	str	r1, [sp, #20]
 800609e:	6800      	ldr	r0, [r0, #0]
 80060a0:	a902      	add	r1, sp, #8
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	f002 fc46 	bl	8008934 <_svfiprintf_r>
 80060a8:	2200      	movs	r2, #0
 80060aa:	9b02      	ldr	r3, [sp, #8]
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	b01c      	add	sp, #112	@ 0x70
 80060b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060b4:	b003      	add	sp, #12
 80060b6:	4770      	bx	lr
 80060b8:	20000020 	.word	0x20000020
 80060bc:	ffff0208 	.word	0xffff0208

080060c0 <__sread>:
 80060c0:	b510      	push	{r4, lr}
 80060c2:	460c      	mov	r4, r1
 80060c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c8:	f000 f900 	bl	80062cc <_read_r>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	bfab      	itete	ge
 80060d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060d2:	89a3      	ldrhlt	r3, [r4, #12]
 80060d4:	181b      	addge	r3, r3, r0
 80060d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060da:	bfac      	ite	ge
 80060dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060de:	81a3      	strhlt	r3, [r4, #12]
 80060e0:	bd10      	pop	{r4, pc}

080060e2 <__swrite>:
 80060e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e6:	461f      	mov	r7, r3
 80060e8:	898b      	ldrh	r3, [r1, #12]
 80060ea:	4605      	mov	r5, r0
 80060ec:	05db      	lsls	r3, r3, #23
 80060ee:	460c      	mov	r4, r1
 80060f0:	4616      	mov	r6, r2
 80060f2:	d505      	bpl.n	8006100 <__swrite+0x1e>
 80060f4:	2302      	movs	r3, #2
 80060f6:	2200      	movs	r2, #0
 80060f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fc:	f000 f8d4 	bl	80062a8 <_lseek_r>
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	4632      	mov	r2, r6
 8006104:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	4628      	mov	r0, r5
 800610c:	463b      	mov	r3, r7
 800610e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	f000 b8eb 	b.w	80062f0 <_write_r>

0800611a <__sseek>:
 800611a:	b510      	push	{r4, lr}
 800611c:	460c      	mov	r4, r1
 800611e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006122:	f000 f8c1 	bl	80062a8 <_lseek_r>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	bf15      	itete	ne
 800612c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800612e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006132:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006136:	81a3      	strheq	r3, [r4, #12]
 8006138:	bf18      	it	ne
 800613a:	81a3      	strhne	r3, [r4, #12]
 800613c:	bd10      	pop	{r4, pc}

0800613e <__sclose>:
 800613e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006142:	f000 b8a1 	b.w	8006288 <_close_r>

08006146 <__swbuf_r>:
 8006146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006148:	460e      	mov	r6, r1
 800614a:	4614      	mov	r4, r2
 800614c:	4605      	mov	r5, r0
 800614e:	b118      	cbz	r0, 8006158 <__swbuf_r+0x12>
 8006150:	6a03      	ldr	r3, [r0, #32]
 8006152:	b90b      	cbnz	r3, 8006158 <__swbuf_r+0x12>
 8006154:	f7ff feee 	bl	8005f34 <__sinit>
 8006158:	69a3      	ldr	r3, [r4, #24]
 800615a:	60a3      	str	r3, [r4, #8]
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	071a      	lsls	r2, r3, #28
 8006160:	d501      	bpl.n	8006166 <__swbuf_r+0x20>
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	b943      	cbnz	r3, 8006178 <__swbuf_r+0x32>
 8006166:	4621      	mov	r1, r4
 8006168:	4628      	mov	r0, r5
 800616a:	f000 f82b 	bl	80061c4 <__swsetup_r>
 800616e:	b118      	cbz	r0, 8006178 <__swbuf_r+0x32>
 8006170:	f04f 37ff 	mov.w	r7, #4294967295
 8006174:	4638      	mov	r0, r7
 8006176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	6922      	ldr	r2, [r4, #16]
 800617c:	b2f6      	uxtb	r6, r6
 800617e:	1a98      	subs	r0, r3, r2
 8006180:	6963      	ldr	r3, [r4, #20]
 8006182:	4637      	mov	r7, r6
 8006184:	4283      	cmp	r3, r0
 8006186:	dc05      	bgt.n	8006194 <__swbuf_r+0x4e>
 8006188:	4621      	mov	r1, r4
 800618a:	4628      	mov	r0, r5
 800618c:	f002 fe8e 	bl	8008eac <_fflush_r>
 8006190:	2800      	cmp	r0, #0
 8006192:	d1ed      	bne.n	8006170 <__swbuf_r+0x2a>
 8006194:	68a3      	ldr	r3, [r4, #8]
 8006196:	3b01      	subs	r3, #1
 8006198:	60a3      	str	r3, [r4, #8]
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	6022      	str	r2, [r4, #0]
 80061a0:	701e      	strb	r6, [r3, #0]
 80061a2:	6962      	ldr	r2, [r4, #20]
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d004      	beq.n	80061b4 <__swbuf_r+0x6e>
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	07db      	lsls	r3, r3, #31
 80061ae:	d5e1      	bpl.n	8006174 <__swbuf_r+0x2e>
 80061b0:	2e0a      	cmp	r6, #10
 80061b2:	d1df      	bne.n	8006174 <__swbuf_r+0x2e>
 80061b4:	4621      	mov	r1, r4
 80061b6:	4628      	mov	r0, r5
 80061b8:	f002 fe78 	bl	8008eac <_fflush_r>
 80061bc:	2800      	cmp	r0, #0
 80061be:	d0d9      	beq.n	8006174 <__swbuf_r+0x2e>
 80061c0:	e7d6      	b.n	8006170 <__swbuf_r+0x2a>
	...

080061c4 <__swsetup_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4b29      	ldr	r3, [pc, #164]	@ (800626c <__swsetup_r+0xa8>)
 80061c8:	4605      	mov	r5, r0
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	460c      	mov	r4, r1
 80061ce:	b118      	cbz	r0, 80061d8 <__swsetup_r+0x14>
 80061d0:	6a03      	ldr	r3, [r0, #32]
 80061d2:	b90b      	cbnz	r3, 80061d8 <__swsetup_r+0x14>
 80061d4:	f7ff feae 	bl	8005f34 <__sinit>
 80061d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061dc:	0719      	lsls	r1, r3, #28
 80061de:	d422      	bmi.n	8006226 <__swsetup_r+0x62>
 80061e0:	06da      	lsls	r2, r3, #27
 80061e2:	d407      	bmi.n	80061f4 <__swsetup_r+0x30>
 80061e4:	2209      	movs	r2, #9
 80061e6:	602a      	str	r2, [r5, #0]
 80061e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	e033      	b.n	800625c <__swsetup_r+0x98>
 80061f4:	0758      	lsls	r0, r3, #29
 80061f6:	d512      	bpl.n	800621e <__swsetup_r+0x5a>
 80061f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061fa:	b141      	cbz	r1, 800620e <__swsetup_r+0x4a>
 80061fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006200:	4299      	cmp	r1, r3
 8006202:	d002      	beq.n	800620a <__swsetup_r+0x46>
 8006204:	4628      	mov	r0, r5
 8006206:	f000 ff17 	bl	8007038 <_free_r>
 800620a:	2300      	movs	r3, #0
 800620c:	6363      	str	r3, [r4, #52]	@ 0x34
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006214:	81a3      	strh	r3, [r4, #12]
 8006216:	2300      	movs	r3, #0
 8006218:	6063      	str	r3, [r4, #4]
 800621a:	6923      	ldr	r3, [r4, #16]
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	f043 0308 	orr.w	r3, r3, #8
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	b94b      	cbnz	r3, 800623e <__swsetup_r+0x7a>
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006234:	d003      	beq.n	800623e <__swsetup_r+0x7a>
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f002 fe84 	bl	8008f46 <__smakebuf_r>
 800623e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006242:	f013 0201 	ands.w	r2, r3, #1
 8006246:	d00a      	beq.n	800625e <__swsetup_r+0x9a>
 8006248:	2200      	movs	r2, #0
 800624a:	60a2      	str	r2, [r4, #8]
 800624c:	6962      	ldr	r2, [r4, #20]
 800624e:	4252      	negs	r2, r2
 8006250:	61a2      	str	r2, [r4, #24]
 8006252:	6922      	ldr	r2, [r4, #16]
 8006254:	b942      	cbnz	r2, 8006268 <__swsetup_r+0xa4>
 8006256:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800625a:	d1c5      	bne.n	80061e8 <__swsetup_r+0x24>
 800625c:	bd38      	pop	{r3, r4, r5, pc}
 800625e:	0799      	lsls	r1, r3, #30
 8006260:	bf58      	it	pl
 8006262:	6962      	ldrpl	r2, [r4, #20]
 8006264:	60a2      	str	r2, [r4, #8]
 8006266:	e7f4      	b.n	8006252 <__swsetup_r+0x8e>
 8006268:	2000      	movs	r0, #0
 800626a:	e7f7      	b.n	800625c <__swsetup_r+0x98>
 800626c:	20000020 	.word	0x20000020

08006270 <memset>:
 8006270:	4603      	mov	r3, r0
 8006272:	4402      	add	r2, r0
 8006274:	4293      	cmp	r3, r2
 8006276:	d100      	bne.n	800627a <memset+0xa>
 8006278:	4770      	bx	lr
 800627a:	f803 1b01 	strb.w	r1, [r3], #1
 800627e:	e7f9      	b.n	8006274 <memset+0x4>

08006280 <_localeconv_r>:
 8006280:	4800      	ldr	r0, [pc, #0]	@ (8006284 <_localeconv_r+0x4>)
 8006282:	4770      	bx	lr
 8006284:	20000160 	.word	0x20000160

08006288 <_close_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	2300      	movs	r3, #0
 800628c:	4d05      	ldr	r5, [pc, #20]	@ (80062a4 <_close_r+0x1c>)
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	602b      	str	r3, [r5, #0]
 8006294:	f7fc fa25 	bl	80026e2 <_close>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_close_r+0x1a>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_close_r+0x1a>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	2000044c 	.word	0x2000044c

080062a8 <_lseek_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4604      	mov	r4, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	2200      	movs	r2, #0
 80062b2:	4d05      	ldr	r5, [pc, #20]	@ (80062c8 <_lseek_r+0x20>)
 80062b4:	602a      	str	r2, [r5, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f7fc fa37 	bl	800272a <_lseek>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_lseek_r+0x1e>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_lseek_r+0x1e>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	2000044c 	.word	0x2000044c

080062cc <_read_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4604      	mov	r4, r0
 80062d0:	4608      	mov	r0, r1
 80062d2:	4611      	mov	r1, r2
 80062d4:	2200      	movs	r2, #0
 80062d6:	4d05      	ldr	r5, [pc, #20]	@ (80062ec <_read_r+0x20>)
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fc f9e4 	bl	80026a8 <_read>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_read_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_read_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	2000044c 	.word	0x2000044c

080062f0 <_write_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4604      	mov	r4, r0
 80062f4:	4608      	mov	r0, r1
 80062f6:	4611      	mov	r1, r2
 80062f8:	2200      	movs	r2, #0
 80062fa:	4d05      	ldr	r5, [pc, #20]	@ (8006310 <_write_r+0x20>)
 80062fc:	602a      	str	r2, [r5, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	f7fb fdb2 	bl	8001e68 <_write>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d102      	bne.n	800630e <_write_r+0x1e>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b103      	cbz	r3, 800630e <_write_r+0x1e>
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	2000044c 	.word	0x2000044c

08006314 <__errno>:
 8006314:	4b01      	ldr	r3, [pc, #4]	@ (800631c <__errno+0x8>)
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000020 	.word	0x20000020

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	2600      	movs	r6, #0
 8006324:	4d0c      	ldr	r5, [pc, #48]	@ (8006358 <__libc_init_array+0x38>)
 8006326:	4c0d      	ldr	r4, [pc, #52]	@ (800635c <__libc_init_array+0x3c>)
 8006328:	1b64      	subs	r4, r4, r5
 800632a:	10a4      	asrs	r4, r4, #2
 800632c:	42a6      	cmp	r6, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	f004 fe70 	bl	800b014 <_init>
 8006334:	2600      	movs	r6, #0
 8006336:	4d0a      	ldr	r5, [pc, #40]	@ (8006360 <__libc_init_array+0x40>)
 8006338:	4c0a      	ldr	r4, [pc, #40]	@ (8006364 <__libc_init_array+0x44>)
 800633a:	1b64      	subs	r4, r4, r5
 800633c:	10a4      	asrs	r4, r4, #2
 800633e:	42a6      	cmp	r6, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f855 3b04 	ldr.w	r3, [r5], #4
 8006348:	4798      	blx	r3
 800634a:	3601      	adds	r6, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006352:	4798      	blx	r3
 8006354:	3601      	adds	r6, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	0800b5c8 	.word	0x0800b5c8
 800635c:	0800b5c8 	.word	0x0800b5c8
 8006360:	0800b5c8 	.word	0x0800b5c8
 8006364:	0800b5cc 	.word	0x0800b5cc

08006368 <__retarget_lock_init_recursive>:
 8006368:	4770      	bx	lr

0800636a <__retarget_lock_acquire_recursive>:
 800636a:	4770      	bx	lr

0800636c <__retarget_lock_release_recursive>:
 800636c:	4770      	bx	lr

0800636e <memchr>:
 800636e:	4603      	mov	r3, r0
 8006370:	b510      	push	{r4, lr}
 8006372:	b2c9      	uxtb	r1, r1
 8006374:	4402      	add	r2, r0
 8006376:	4293      	cmp	r3, r2
 8006378:	4618      	mov	r0, r3
 800637a:	d101      	bne.n	8006380 <memchr+0x12>
 800637c:	2000      	movs	r0, #0
 800637e:	e003      	b.n	8006388 <memchr+0x1a>
 8006380:	7804      	ldrb	r4, [r0, #0]
 8006382:	3301      	adds	r3, #1
 8006384:	428c      	cmp	r4, r1
 8006386:	d1f6      	bne.n	8006376 <memchr+0x8>
 8006388:	bd10      	pop	{r4, pc}
	...

0800638c <nanf>:
 800638c:	4800      	ldr	r0, [pc, #0]	@ (8006390 <nanf+0x4>)
 800638e:	4770      	bx	lr
 8006390:	7fc00000 	.word	0x7fc00000

08006394 <quorem>:
 8006394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	6903      	ldr	r3, [r0, #16]
 800639a:	690c      	ldr	r4, [r1, #16]
 800639c:	4607      	mov	r7, r0
 800639e:	42a3      	cmp	r3, r4
 80063a0:	db7e      	blt.n	80064a0 <quorem+0x10c>
 80063a2:	3c01      	subs	r4, #1
 80063a4:	00a3      	lsls	r3, r4, #2
 80063a6:	f100 0514 	add.w	r5, r0, #20
 80063aa:	f101 0814 	add.w	r8, r1, #20
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063be:	3301      	adds	r3, #1
 80063c0:	429a      	cmp	r2, r3
 80063c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80063c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063ca:	d32e      	bcc.n	800642a <quorem+0x96>
 80063cc:	f04f 0a00 	mov.w	sl, #0
 80063d0:	46c4      	mov	ip, r8
 80063d2:	46ae      	mov	lr, r5
 80063d4:	46d3      	mov	fp, sl
 80063d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063da:	b298      	uxth	r0, r3
 80063dc:	fb06 a000 	mla	r0, r6, r0, sl
 80063e0:	0c1b      	lsrs	r3, r3, #16
 80063e2:	0c02      	lsrs	r2, r0, #16
 80063e4:	fb06 2303 	mla	r3, r6, r3, r2
 80063e8:	f8de 2000 	ldr.w	r2, [lr]
 80063ec:	b280      	uxth	r0, r0
 80063ee:	b292      	uxth	r2, r2
 80063f0:	1a12      	subs	r2, r2, r0
 80063f2:	445a      	add	r2, fp
 80063f4:	f8de 0000 	ldr.w	r0, [lr]
 80063f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006402:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006406:	b292      	uxth	r2, r2
 8006408:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800640c:	45e1      	cmp	r9, ip
 800640e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006412:	f84e 2b04 	str.w	r2, [lr], #4
 8006416:	d2de      	bcs.n	80063d6 <quorem+0x42>
 8006418:	9b00      	ldr	r3, [sp, #0]
 800641a:	58eb      	ldr	r3, [r5, r3]
 800641c:	b92b      	cbnz	r3, 800642a <quorem+0x96>
 800641e:	9b01      	ldr	r3, [sp, #4]
 8006420:	3b04      	subs	r3, #4
 8006422:	429d      	cmp	r5, r3
 8006424:	461a      	mov	r2, r3
 8006426:	d32f      	bcc.n	8006488 <quorem+0xf4>
 8006428:	613c      	str	r4, [r7, #16]
 800642a:	4638      	mov	r0, r7
 800642c:	f001 f9c4 	bl	80077b8 <__mcmp>
 8006430:	2800      	cmp	r0, #0
 8006432:	db25      	blt.n	8006480 <quorem+0xec>
 8006434:	4629      	mov	r1, r5
 8006436:	2000      	movs	r0, #0
 8006438:	f858 2b04 	ldr.w	r2, [r8], #4
 800643c:	f8d1 c000 	ldr.w	ip, [r1]
 8006440:	fa1f fe82 	uxth.w	lr, r2
 8006444:	fa1f f38c 	uxth.w	r3, ip
 8006448:	eba3 030e 	sub.w	r3, r3, lr
 800644c:	4403      	add	r3, r0
 800644e:	0c12      	lsrs	r2, r2, #16
 8006450:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006454:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800645e:	45c1      	cmp	r9, r8
 8006460:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006464:	f841 3b04 	str.w	r3, [r1], #4
 8006468:	d2e6      	bcs.n	8006438 <quorem+0xa4>
 800646a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800646e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006472:	b922      	cbnz	r2, 800647e <quorem+0xea>
 8006474:	3b04      	subs	r3, #4
 8006476:	429d      	cmp	r5, r3
 8006478:	461a      	mov	r2, r3
 800647a:	d30b      	bcc.n	8006494 <quorem+0x100>
 800647c:	613c      	str	r4, [r7, #16]
 800647e:	3601      	adds	r6, #1
 8006480:	4630      	mov	r0, r6
 8006482:	b003      	add	sp, #12
 8006484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	3b04      	subs	r3, #4
 800648c:	2a00      	cmp	r2, #0
 800648e:	d1cb      	bne.n	8006428 <quorem+0x94>
 8006490:	3c01      	subs	r4, #1
 8006492:	e7c6      	b.n	8006422 <quorem+0x8e>
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	3b04      	subs	r3, #4
 8006498:	2a00      	cmp	r2, #0
 800649a:	d1ef      	bne.n	800647c <quorem+0xe8>
 800649c:	3c01      	subs	r4, #1
 800649e:	e7ea      	b.n	8006476 <quorem+0xe2>
 80064a0:	2000      	movs	r0, #0
 80064a2:	e7ee      	b.n	8006482 <quorem+0xee>
 80064a4:	0000      	movs	r0, r0
	...

080064a8 <_dtoa_r>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	4614      	mov	r4, r2
 80064ae:	461d      	mov	r5, r3
 80064b0:	69c7      	ldr	r7, [r0, #28]
 80064b2:	b097      	sub	sp, #92	@ 0x5c
 80064b4:	4683      	mov	fp, r0
 80064b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80064ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80064bc:	b97f      	cbnz	r7, 80064de <_dtoa_r+0x36>
 80064be:	2010      	movs	r0, #16
 80064c0:	f000 fe02 	bl	80070c8 <malloc>
 80064c4:	4602      	mov	r2, r0
 80064c6:	f8cb 001c 	str.w	r0, [fp, #28]
 80064ca:	b920      	cbnz	r0, 80064d6 <_dtoa_r+0x2e>
 80064cc:	21ef      	movs	r1, #239	@ 0xef
 80064ce:	4ba8      	ldr	r3, [pc, #672]	@ (8006770 <_dtoa_r+0x2c8>)
 80064d0:	48a8      	ldr	r0, [pc, #672]	@ (8006774 <_dtoa_r+0x2cc>)
 80064d2:	f002 fde7 	bl	80090a4 <__assert_func>
 80064d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064da:	6007      	str	r7, [r0, #0]
 80064dc:	60c7      	str	r7, [r0, #12]
 80064de:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	b159      	cbz	r1, 80064fe <_dtoa_r+0x56>
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	2301      	movs	r3, #1
 80064ea:	4093      	lsls	r3, r2
 80064ec:	604a      	str	r2, [r1, #4]
 80064ee:	608b      	str	r3, [r1, #8]
 80064f0:	4658      	mov	r0, fp
 80064f2:	f000 fedf 	bl	80072b4 <_Bfree>
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	1e2b      	subs	r3, r5, #0
 8006500:	bfaf      	iteee	ge
 8006502:	2300      	movge	r3, #0
 8006504:	2201      	movlt	r2, #1
 8006506:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800650a:	9303      	strlt	r3, [sp, #12]
 800650c:	bfa8      	it	ge
 800650e:	6033      	strge	r3, [r6, #0]
 8006510:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006514:	4b98      	ldr	r3, [pc, #608]	@ (8006778 <_dtoa_r+0x2d0>)
 8006516:	bfb8      	it	lt
 8006518:	6032      	strlt	r2, [r6, #0]
 800651a:	ea33 0308 	bics.w	r3, r3, r8
 800651e:	d112      	bne.n	8006546 <_dtoa_r+0x9e>
 8006520:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006524:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800652c:	4323      	orrs	r3, r4
 800652e:	f000 8550 	beq.w	8006fd2 <_dtoa_r+0xb2a>
 8006532:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006534:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800677c <_dtoa_r+0x2d4>
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8552 	beq.w	8006fe2 <_dtoa_r+0xb3a>
 800653e:	f10a 0303 	add.w	r3, sl, #3
 8006542:	f000 bd4c 	b.w	8006fde <_dtoa_r+0xb36>
 8006546:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800654a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800654e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006552:	2200      	movs	r2, #0
 8006554:	2300      	movs	r3, #0
 8006556:	f7fa fa27 	bl	80009a8 <__aeabi_dcmpeq>
 800655a:	4607      	mov	r7, r0
 800655c:	b158      	cbz	r0, 8006576 <_dtoa_r+0xce>
 800655e:	2301      	movs	r3, #1
 8006560:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006566:	b113      	cbz	r3, 800656e <_dtoa_r+0xc6>
 8006568:	4b85      	ldr	r3, [pc, #532]	@ (8006780 <_dtoa_r+0x2d8>)
 800656a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006784 <_dtoa_r+0x2dc>
 8006572:	f000 bd36 	b.w	8006fe2 <_dtoa_r+0xb3a>
 8006576:	ab14      	add	r3, sp, #80	@ 0x50
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	ab15      	add	r3, sp, #84	@ 0x54
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	4658      	mov	r0, fp
 8006580:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006584:	f001 fa30 	bl	80079e8 <__d2b>
 8006588:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800658c:	4681      	mov	r9, r0
 800658e:	2e00      	cmp	r6, #0
 8006590:	d077      	beq.n	8006682 <_dtoa_r+0x1da>
 8006592:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006598:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800659c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80065aa:	4619      	mov	r1, r3
 80065ac:	2200      	movs	r2, #0
 80065ae:	4b76      	ldr	r3, [pc, #472]	@ (8006788 <_dtoa_r+0x2e0>)
 80065b0:	f7f9 fdda 	bl	8000168 <__aeabi_dsub>
 80065b4:	a368      	add	r3, pc, #416	@ (adr r3, 8006758 <_dtoa_r+0x2b0>)
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f7f9 ff8d 	bl	80004d8 <__aeabi_dmul>
 80065be:	a368      	add	r3, pc, #416	@ (adr r3, 8006760 <_dtoa_r+0x2b8>)
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f7f9 fdd2 	bl	800016c <__adddf3>
 80065c8:	4604      	mov	r4, r0
 80065ca:	4630      	mov	r0, r6
 80065cc:	460d      	mov	r5, r1
 80065ce:	f7f9 ff19 	bl	8000404 <__aeabi_i2d>
 80065d2:	a365      	add	r3, pc, #404	@ (adr r3, 8006768 <_dtoa_r+0x2c0>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7f9 ff7e 	bl	80004d8 <__aeabi_dmul>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4620      	mov	r0, r4
 80065e2:	4629      	mov	r1, r5
 80065e4:	f7f9 fdc2 	bl	800016c <__adddf3>
 80065e8:	4604      	mov	r4, r0
 80065ea:	460d      	mov	r5, r1
 80065ec:	f7fa fa24 	bl	8000a38 <__aeabi_d2iz>
 80065f0:	2200      	movs	r2, #0
 80065f2:	4607      	mov	r7, r0
 80065f4:	2300      	movs	r3, #0
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fa f9df 	bl	80009bc <__aeabi_dcmplt>
 80065fe:	b140      	cbz	r0, 8006612 <_dtoa_r+0x16a>
 8006600:	4638      	mov	r0, r7
 8006602:	f7f9 feff 	bl	8000404 <__aeabi_i2d>
 8006606:	4622      	mov	r2, r4
 8006608:	462b      	mov	r3, r5
 800660a:	f7fa f9cd 	bl	80009a8 <__aeabi_dcmpeq>
 800660e:	b900      	cbnz	r0, 8006612 <_dtoa_r+0x16a>
 8006610:	3f01      	subs	r7, #1
 8006612:	2f16      	cmp	r7, #22
 8006614:	d853      	bhi.n	80066be <_dtoa_r+0x216>
 8006616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800661a:	4b5c      	ldr	r3, [pc, #368]	@ (800678c <_dtoa_r+0x2e4>)
 800661c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f7fa f9ca 	bl	80009bc <__aeabi_dcmplt>
 8006628:	2800      	cmp	r0, #0
 800662a:	d04a      	beq.n	80066c2 <_dtoa_r+0x21a>
 800662c:	2300      	movs	r3, #0
 800662e:	3f01      	subs	r7, #1
 8006630:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006632:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006634:	1b9b      	subs	r3, r3, r6
 8006636:	1e5a      	subs	r2, r3, #1
 8006638:	bf46      	itte	mi
 800663a:	f1c3 0801 	rsbmi	r8, r3, #1
 800663e:	2300      	movmi	r3, #0
 8006640:	f04f 0800 	movpl.w	r8, #0
 8006644:	9209      	str	r2, [sp, #36]	@ 0x24
 8006646:	bf48      	it	mi
 8006648:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800664a:	2f00      	cmp	r7, #0
 800664c:	db3b      	blt.n	80066c6 <_dtoa_r+0x21e>
 800664e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006650:	970e      	str	r7, [sp, #56]	@ 0x38
 8006652:	443b      	add	r3, r7
 8006654:	9309      	str	r3, [sp, #36]	@ 0x24
 8006656:	2300      	movs	r3, #0
 8006658:	930a      	str	r3, [sp, #40]	@ 0x28
 800665a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800665c:	2b09      	cmp	r3, #9
 800665e:	d866      	bhi.n	800672e <_dtoa_r+0x286>
 8006660:	2b05      	cmp	r3, #5
 8006662:	bfc4      	itt	gt
 8006664:	3b04      	subgt	r3, #4
 8006666:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006668:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800666a:	bfc8      	it	gt
 800666c:	2400      	movgt	r4, #0
 800666e:	f1a3 0302 	sub.w	r3, r3, #2
 8006672:	bfd8      	it	le
 8006674:	2401      	movle	r4, #1
 8006676:	2b03      	cmp	r3, #3
 8006678:	d864      	bhi.n	8006744 <_dtoa_r+0x29c>
 800667a:	e8df f003 	tbb	[pc, r3]
 800667e:	382b      	.short	0x382b
 8006680:	5636      	.short	0x5636
 8006682:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006686:	441e      	add	r6, r3
 8006688:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800668c:	2b20      	cmp	r3, #32
 800668e:	bfc1      	itttt	gt
 8006690:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006694:	fa08 f803 	lslgt.w	r8, r8, r3
 8006698:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800669c:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066a0:	bfd6      	itet	le
 80066a2:	f1c3 0320 	rsble	r3, r3, #32
 80066a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80066aa:	fa04 f003 	lslle.w	r0, r4, r3
 80066ae:	f7f9 fe99 	bl	80003e4 <__aeabi_ui2d>
 80066b2:	2201      	movs	r2, #1
 80066b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066b8:	3e01      	subs	r6, #1
 80066ba:	9212      	str	r2, [sp, #72]	@ 0x48
 80066bc:	e775      	b.n	80065aa <_dtoa_r+0x102>
 80066be:	2301      	movs	r3, #1
 80066c0:	e7b6      	b.n	8006630 <_dtoa_r+0x188>
 80066c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80066c4:	e7b5      	b.n	8006632 <_dtoa_r+0x18a>
 80066c6:	427b      	negs	r3, r7
 80066c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80066ca:	2300      	movs	r3, #0
 80066cc:	eba8 0807 	sub.w	r8, r8, r7
 80066d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80066d2:	e7c2      	b.n	800665a <_dtoa_r+0x1b2>
 80066d4:	2300      	movs	r3, #0
 80066d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066da:	2b00      	cmp	r3, #0
 80066dc:	dc35      	bgt.n	800674a <_dtoa_r+0x2a2>
 80066de:	2301      	movs	r3, #1
 80066e0:	461a      	mov	r2, r3
 80066e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80066e6:	9221      	str	r2, [sp, #132]	@ 0x84
 80066e8:	e00b      	b.n	8006702 <_dtoa_r+0x25a>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e7f3      	b.n	80066d6 <_dtoa_r+0x22e>
 80066ee:	2300      	movs	r3, #0
 80066f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80066f4:	18fb      	adds	r3, r7, r3
 80066f6:	9308      	str	r3, [sp, #32]
 80066f8:	3301      	adds	r3, #1
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	9307      	str	r3, [sp, #28]
 80066fe:	bfb8      	it	lt
 8006700:	2301      	movlt	r3, #1
 8006702:	2100      	movs	r1, #0
 8006704:	2204      	movs	r2, #4
 8006706:	f8db 001c 	ldr.w	r0, [fp, #28]
 800670a:	f102 0514 	add.w	r5, r2, #20
 800670e:	429d      	cmp	r5, r3
 8006710:	d91f      	bls.n	8006752 <_dtoa_r+0x2aa>
 8006712:	6041      	str	r1, [r0, #4]
 8006714:	4658      	mov	r0, fp
 8006716:	f000 fd8d 	bl	8007234 <_Balloc>
 800671a:	4682      	mov	sl, r0
 800671c:	2800      	cmp	r0, #0
 800671e:	d139      	bne.n	8006794 <_dtoa_r+0x2ec>
 8006720:	4602      	mov	r2, r0
 8006722:	f240 11af 	movw	r1, #431	@ 0x1af
 8006726:	4b1a      	ldr	r3, [pc, #104]	@ (8006790 <_dtoa_r+0x2e8>)
 8006728:	e6d2      	b.n	80064d0 <_dtoa_r+0x28>
 800672a:	2301      	movs	r3, #1
 800672c:	e7e0      	b.n	80066f0 <_dtoa_r+0x248>
 800672e:	2401      	movs	r4, #1
 8006730:	2300      	movs	r3, #0
 8006732:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006734:	9320      	str	r3, [sp, #128]	@ 0x80
 8006736:	f04f 33ff 	mov.w	r3, #4294967295
 800673a:	2200      	movs	r2, #0
 800673c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006740:	2312      	movs	r3, #18
 8006742:	e7d0      	b.n	80066e6 <_dtoa_r+0x23e>
 8006744:	2301      	movs	r3, #1
 8006746:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006748:	e7f5      	b.n	8006736 <_dtoa_r+0x28e>
 800674a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800674c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006750:	e7d7      	b.n	8006702 <_dtoa_r+0x25a>
 8006752:	3101      	adds	r1, #1
 8006754:	0052      	lsls	r2, r2, #1
 8006756:	e7d8      	b.n	800670a <_dtoa_r+0x262>
 8006758:	636f4361 	.word	0x636f4361
 800675c:	3fd287a7 	.word	0x3fd287a7
 8006760:	8b60c8b3 	.word	0x8b60c8b3
 8006764:	3fc68a28 	.word	0x3fc68a28
 8006768:	509f79fb 	.word	0x509f79fb
 800676c:	3fd34413 	.word	0x3fd34413
 8006770:	0800b138 	.word	0x0800b138
 8006774:	0800b14f 	.word	0x0800b14f
 8006778:	7ff00000 	.word	0x7ff00000
 800677c:	0800b134 	.word	0x0800b134
 8006780:	0800b103 	.word	0x0800b103
 8006784:	0800b102 	.word	0x0800b102
 8006788:	3ff80000 	.word	0x3ff80000
 800678c:	0800b248 	.word	0x0800b248
 8006790:	0800b1a7 	.word	0x0800b1a7
 8006794:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006798:	6018      	str	r0, [r3, #0]
 800679a:	9b07      	ldr	r3, [sp, #28]
 800679c:	2b0e      	cmp	r3, #14
 800679e:	f200 80a4 	bhi.w	80068ea <_dtoa_r+0x442>
 80067a2:	2c00      	cmp	r4, #0
 80067a4:	f000 80a1 	beq.w	80068ea <_dtoa_r+0x442>
 80067a8:	2f00      	cmp	r7, #0
 80067aa:	dd33      	ble.n	8006814 <_dtoa_r+0x36c>
 80067ac:	4b86      	ldr	r3, [pc, #536]	@ (80069c8 <_dtoa_r+0x520>)
 80067ae:	f007 020f 	and.w	r2, r7, #15
 80067b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b6:	05f8      	lsls	r0, r7, #23
 80067b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067c4:	d516      	bpl.n	80067f4 <_dtoa_r+0x34c>
 80067c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067ca:	4b80      	ldr	r3, [pc, #512]	@ (80069cc <_dtoa_r+0x524>)
 80067cc:	2603      	movs	r6, #3
 80067ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067d2:	f7f9 ffab 	bl	800072c <__aeabi_ddiv>
 80067d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067da:	f004 040f 	and.w	r4, r4, #15
 80067de:	4d7b      	ldr	r5, [pc, #492]	@ (80069cc <_dtoa_r+0x524>)
 80067e0:	b954      	cbnz	r4, 80067f8 <_dtoa_r+0x350>
 80067e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ea:	f7f9 ff9f 	bl	800072c <__aeabi_ddiv>
 80067ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f2:	e028      	b.n	8006846 <_dtoa_r+0x39e>
 80067f4:	2602      	movs	r6, #2
 80067f6:	e7f2      	b.n	80067de <_dtoa_r+0x336>
 80067f8:	07e1      	lsls	r1, r4, #31
 80067fa:	d508      	bpl.n	800680e <_dtoa_r+0x366>
 80067fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006800:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006804:	f7f9 fe68 	bl	80004d8 <__aeabi_dmul>
 8006808:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800680c:	3601      	adds	r6, #1
 800680e:	1064      	asrs	r4, r4, #1
 8006810:	3508      	adds	r5, #8
 8006812:	e7e5      	b.n	80067e0 <_dtoa_r+0x338>
 8006814:	f000 80d2 	beq.w	80069bc <_dtoa_r+0x514>
 8006818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800681c:	427c      	negs	r4, r7
 800681e:	4b6a      	ldr	r3, [pc, #424]	@ (80069c8 <_dtoa_r+0x520>)
 8006820:	f004 020f 	and.w	r2, r4, #15
 8006824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fe54 	bl	80004d8 <__aeabi_dmul>
 8006830:	2602      	movs	r6, #2
 8006832:	2300      	movs	r3, #0
 8006834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006838:	4d64      	ldr	r5, [pc, #400]	@ (80069cc <_dtoa_r+0x524>)
 800683a:	1124      	asrs	r4, r4, #4
 800683c:	2c00      	cmp	r4, #0
 800683e:	f040 80b2 	bne.w	80069a6 <_dtoa_r+0x4fe>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1d3      	bne.n	80067ee <_dtoa_r+0x346>
 8006846:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800684a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80b7 	beq.w	80069c0 <_dtoa_r+0x518>
 8006852:	2200      	movs	r2, #0
 8006854:	4620      	mov	r0, r4
 8006856:	4629      	mov	r1, r5
 8006858:	4b5d      	ldr	r3, [pc, #372]	@ (80069d0 <_dtoa_r+0x528>)
 800685a:	f7fa f8af 	bl	80009bc <__aeabi_dcmplt>
 800685e:	2800      	cmp	r0, #0
 8006860:	f000 80ae 	beq.w	80069c0 <_dtoa_r+0x518>
 8006864:	9b07      	ldr	r3, [sp, #28]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80aa 	beq.w	80069c0 <_dtoa_r+0x518>
 800686c:	9b08      	ldr	r3, [sp, #32]
 800686e:	2b00      	cmp	r3, #0
 8006870:	dd37      	ble.n	80068e2 <_dtoa_r+0x43a>
 8006872:	1e7b      	subs	r3, r7, #1
 8006874:	4620      	mov	r0, r4
 8006876:	9304      	str	r3, [sp, #16]
 8006878:	2200      	movs	r2, #0
 800687a:	4629      	mov	r1, r5
 800687c:	4b55      	ldr	r3, [pc, #340]	@ (80069d4 <_dtoa_r+0x52c>)
 800687e:	f7f9 fe2b 	bl	80004d8 <__aeabi_dmul>
 8006882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006886:	9c08      	ldr	r4, [sp, #32]
 8006888:	3601      	adds	r6, #1
 800688a:	4630      	mov	r0, r6
 800688c:	f7f9 fdba 	bl	8000404 <__aeabi_i2d>
 8006890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006894:	f7f9 fe20 	bl	80004d8 <__aeabi_dmul>
 8006898:	2200      	movs	r2, #0
 800689a:	4b4f      	ldr	r3, [pc, #316]	@ (80069d8 <_dtoa_r+0x530>)
 800689c:	f7f9 fc66 	bl	800016c <__adddf3>
 80068a0:	4605      	mov	r5, r0
 80068a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068a6:	2c00      	cmp	r4, #0
 80068a8:	f040 809a 	bne.w	80069e0 <_dtoa_r+0x538>
 80068ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	4b4a      	ldr	r3, [pc, #296]	@ (80069dc <_dtoa_r+0x534>)
 80068b4:	f7f9 fc58 	bl	8000168 <__aeabi_dsub>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068c0:	462a      	mov	r2, r5
 80068c2:	4633      	mov	r3, r6
 80068c4:	f7fa f898 	bl	80009f8 <__aeabi_dcmpgt>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f040 828e 	bne.w	8006dea <_dtoa_r+0x942>
 80068ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068d2:	462a      	mov	r2, r5
 80068d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068d8:	f7fa f870 	bl	80009bc <__aeabi_dcmplt>
 80068dc:	2800      	cmp	r0, #0
 80068de:	f040 8127 	bne.w	8006b30 <_dtoa_r+0x688>
 80068e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80068e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80068ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f2c0 8163 	blt.w	8006bb8 <_dtoa_r+0x710>
 80068f2:	2f0e      	cmp	r7, #14
 80068f4:	f300 8160 	bgt.w	8006bb8 <_dtoa_r+0x710>
 80068f8:	4b33      	ldr	r3, [pc, #204]	@ (80069c8 <_dtoa_r+0x520>)
 80068fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006902:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006906:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006908:	2b00      	cmp	r3, #0
 800690a:	da03      	bge.n	8006914 <_dtoa_r+0x46c>
 800690c:	9b07      	ldr	r3, [sp, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f340 8100 	ble.w	8006b14 <_dtoa_r+0x66c>
 8006914:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006918:	4656      	mov	r6, sl
 800691a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7f9 ff03 	bl	800072c <__aeabi_ddiv>
 8006926:	f7fa f887 	bl	8000a38 <__aeabi_d2iz>
 800692a:	4680      	mov	r8, r0
 800692c:	f7f9 fd6a 	bl	8000404 <__aeabi_i2d>
 8006930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006934:	f7f9 fdd0 	bl	80004d8 <__aeabi_dmul>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4620      	mov	r0, r4
 800693e:	4629      	mov	r1, r5
 8006940:	f7f9 fc12 	bl	8000168 <__aeabi_dsub>
 8006944:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006948:	9d07      	ldr	r5, [sp, #28]
 800694a:	f806 4b01 	strb.w	r4, [r6], #1
 800694e:	eba6 040a 	sub.w	r4, r6, sl
 8006952:	42a5      	cmp	r5, r4
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	f040 8116 	bne.w	8006b88 <_dtoa_r+0x6e0>
 800695c:	f7f9 fc06 	bl	800016c <__adddf3>
 8006960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006964:	4604      	mov	r4, r0
 8006966:	460d      	mov	r5, r1
 8006968:	f7fa f846 	bl	80009f8 <__aeabi_dcmpgt>
 800696c:	2800      	cmp	r0, #0
 800696e:	f040 80f8 	bne.w	8006b62 <_dtoa_r+0x6ba>
 8006972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006976:	4620      	mov	r0, r4
 8006978:	4629      	mov	r1, r5
 800697a:	f7fa f815 	bl	80009a8 <__aeabi_dcmpeq>
 800697e:	b118      	cbz	r0, 8006988 <_dtoa_r+0x4e0>
 8006980:	f018 0f01 	tst.w	r8, #1
 8006984:	f040 80ed 	bne.w	8006b62 <_dtoa_r+0x6ba>
 8006988:	4649      	mov	r1, r9
 800698a:	4658      	mov	r0, fp
 800698c:	f000 fc92 	bl	80072b4 <_Bfree>
 8006990:	2300      	movs	r3, #0
 8006992:	7033      	strb	r3, [r6, #0]
 8006994:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006996:	3701      	adds	r7, #1
 8006998:	601f      	str	r7, [r3, #0]
 800699a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 8320 	beq.w	8006fe2 <_dtoa_r+0xb3a>
 80069a2:	601e      	str	r6, [r3, #0]
 80069a4:	e31d      	b.n	8006fe2 <_dtoa_r+0xb3a>
 80069a6:	07e2      	lsls	r2, r4, #31
 80069a8:	d505      	bpl.n	80069b6 <_dtoa_r+0x50e>
 80069aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069ae:	f7f9 fd93 	bl	80004d8 <__aeabi_dmul>
 80069b2:	2301      	movs	r3, #1
 80069b4:	3601      	adds	r6, #1
 80069b6:	1064      	asrs	r4, r4, #1
 80069b8:	3508      	adds	r5, #8
 80069ba:	e73f      	b.n	800683c <_dtoa_r+0x394>
 80069bc:	2602      	movs	r6, #2
 80069be:	e742      	b.n	8006846 <_dtoa_r+0x39e>
 80069c0:	9c07      	ldr	r4, [sp, #28]
 80069c2:	9704      	str	r7, [sp, #16]
 80069c4:	e761      	b.n	800688a <_dtoa_r+0x3e2>
 80069c6:	bf00      	nop
 80069c8:	0800b248 	.word	0x0800b248
 80069cc:	0800b220 	.word	0x0800b220
 80069d0:	3ff00000 	.word	0x3ff00000
 80069d4:	40240000 	.word	0x40240000
 80069d8:	401c0000 	.word	0x401c0000
 80069dc:	40140000 	.word	0x40140000
 80069e0:	4b70      	ldr	r3, [pc, #448]	@ (8006ba4 <_dtoa_r+0x6fc>)
 80069e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069ec:	4454      	add	r4, sl
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d045      	beq.n	8006a7e <_dtoa_r+0x5d6>
 80069f2:	2000      	movs	r0, #0
 80069f4:	496c      	ldr	r1, [pc, #432]	@ (8006ba8 <_dtoa_r+0x700>)
 80069f6:	f7f9 fe99 	bl	800072c <__aeabi_ddiv>
 80069fa:	4633      	mov	r3, r6
 80069fc:	462a      	mov	r2, r5
 80069fe:	f7f9 fbb3 	bl	8000168 <__aeabi_dsub>
 8006a02:	4656      	mov	r6, sl
 8006a04:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a0c:	f7fa f814 	bl	8000a38 <__aeabi_d2iz>
 8006a10:	4605      	mov	r5, r0
 8006a12:	f7f9 fcf7 	bl	8000404 <__aeabi_i2d>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a1e:	f7f9 fba3 	bl	8000168 <__aeabi_dsub>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	3530      	adds	r5, #48	@ 0x30
 8006a28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a30:	f806 5b01 	strb.w	r5, [r6], #1
 8006a34:	f7f9 ffc2 	bl	80009bc <__aeabi_dcmplt>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d163      	bne.n	8006b04 <_dtoa_r+0x65c>
 8006a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a40:	2000      	movs	r0, #0
 8006a42:	495a      	ldr	r1, [pc, #360]	@ (8006bac <_dtoa_r+0x704>)
 8006a44:	f7f9 fb90 	bl	8000168 <__aeabi_dsub>
 8006a48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a4c:	f7f9 ffb6 	bl	80009bc <__aeabi_dcmplt>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	f040 8087 	bne.w	8006b64 <_dtoa_r+0x6bc>
 8006a56:	42a6      	cmp	r6, r4
 8006a58:	f43f af43 	beq.w	80068e2 <_dtoa_r+0x43a>
 8006a5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a60:	2200      	movs	r2, #0
 8006a62:	4b53      	ldr	r3, [pc, #332]	@ (8006bb0 <_dtoa_r+0x708>)
 8006a64:	f7f9 fd38 	bl	80004d8 <__aeabi_dmul>
 8006a68:	2200      	movs	r2, #0
 8006a6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a72:	4b4f      	ldr	r3, [pc, #316]	@ (8006bb0 <_dtoa_r+0x708>)
 8006a74:	f7f9 fd30 	bl	80004d8 <__aeabi_dmul>
 8006a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a7c:	e7c4      	b.n	8006a08 <_dtoa_r+0x560>
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4628      	mov	r0, r5
 8006a82:	f7f9 fd29 	bl	80004d8 <__aeabi_dmul>
 8006a86:	4656      	mov	r6, sl
 8006a88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a8c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a92:	f7f9 ffd1 	bl	8000a38 <__aeabi_d2iz>
 8006a96:	4605      	mov	r5, r0
 8006a98:	f7f9 fcb4 	bl	8000404 <__aeabi_i2d>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aa4:	f7f9 fb60 	bl	8000168 <__aeabi_dsub>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	3530      	adds	r5, #48	@ 0x30
 8006aae:	f806 5b01 	strb.w	r5, [r6], #1
 8006ab2:	42a6      	cmp	r6, r4
 8006ab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	d124      	bne.n	8006b08 <_dtoa_r+0x660>
 8006abe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ac2:	4b39      	ldr	r3, [pc, #228]	@ (8006ba8 <_dtoa_r+0x700>)
 8006ac4:	f7f9 fb52 	bl	800016c <__adddf3>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ad0:	f7f9 ff92 	bl	80009f8 <__aeabi_dcmpgt>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d145      	bne.n	8006b64 <_dtoa_r+0x6bc>
 8006ad8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006adc:	2000      	movs	r0, #0
 8006ade:	4932      	ldr	r1, [pc, #200]	@ (8006ba8 <_dtoa_r+0x700>)
 8006ae0:	f7f9 fb42 	bl	8000168 <__aeabi_dsub>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aec:	f7f9 ff66 	bl	80009bc <__aeabi_dcmplt>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f43f aef6 	beq.w	80068e2 <_dtoa_r+0x43a>
 8006af6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006af8:	1e73      	subs	r3, r6, #1
 8006afa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006afc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b00:	2b30      	cmp	r3, #48	@ 0x30
 8006b02:	d0f8      	beq.n	8006af6 <_dtoa_r+0x64e>
 8006b04:	9f04      	ldr	r7, [sp, #16]
 8006b06:	e73f      	b.n	8006988 <_dtoa_r+0x4e0>
 8006b08:	4b29      	ldr	r3, [pc, #164]	@ (8006bb0 <_dtoa_r+0x708>)
 8006b0a:	f7f9 fce5 	bl	80004d8 <__aeabi_dmul>
 8006b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b12:	e7bc      	b.n	8006a8e <_dtoa_r+0x5e6>
 8006b14:	d10c      	bne.n	8006b30 <_dtoa_r+0x688>
 8006b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4b25      	ldr	r3, [pc, #148]	@ (8006bb4 <_dtoa_r+0x70c>)
 8006b1e:	f7f9 fcdb 	bl	80004d8 <__aeabi_dmul>
 8006b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b26:	f7f9 ff5d 	bl	80009e4 <__aeabi_dcmpge>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	f000 815b 	beq.w	8006de6 <_dtoa_r+0x93e>
 8006b30:	2400      	movs	r4, #0
 8006b32:	4625      	mov	r5, r4
 8006b34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b36:	4656      	mov	r6, sl
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	9304      	str	r3, [sp, #16]
 8006b3c:	2700      	movs	r7, #0
 8006b3e:	4621      	mov	r1, r4
 8006b40:	4658      	mov	r0, fp
 8006b42:	f000 fbb7 	bl	80072b4 <_Bfree>
 8006b46:	2d00      	cmp	r5, #0
 8006b48:	d0dc      	beq.n	8006b04 <_dtoa_r+0x65c>
 8006b4a:	b12f      	cbz	r7, 8006b58 <_dtoa_r+0x6b0>
 8006b4c:	42af      	cmp	r7, r5
 8006b4e:	d003      	beq.n	8006b58 <_dtoa_r+0x6b0>
 8006b50:	4639      	mov	r1, r7
 8006b52:	4658      	mov	r0, fp
 8006b54:	f000 fbae 	bl	80072b4 <_Bfree>
 8006b58:	4629      	mov	r1, r5
 8006b5a:	4658      	mov	r0, fp
 8006b5c:	f000 fbaa 	bl	80072b4 <_Bfree>
 8006b60:	e7d0      	b.n	8006b04 <_dtoa_r+0x65c>
 8006b62:	9704      	str	r7, [sp, #16]
 8006b64:	4633      	mov	r3, r6
 8006b66:	461e      	mov	r6, r3
 8006b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b6c:	2a39      	cmp	r2, #57	@ 0x39
 8006b6e:	d107      	bne.n	8006b80 <_dtoa_r+0x6d8>
 8006b70:	459a      	cmp	sl, r3
 8006b72:	d1f8      	bne.n	8006b66 <_dtoa_r+0x6be>
 8006b74:	9a04      	ldr	r2, [sp, #16]
 8006b76:	3201      	adds	r2, #1
 8006b78:	9204      	str	r2, [sp, #16]
 8006b7a:	2230      	movs	r2, #48	@ 0x30
 8006b7c:	f88a 2000 	strb.w	r2, [sl]
 8006b80:	781a      	ldrb	r2, [r3, #0]
 8006b82:	3201      	adds	r2, #1
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	e7bd      	b.n	8006b04 <_dtoa_r+0x65c>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4b09      	ldr	r3, [pc, #36]	@ (8006bb0 <_dtoa_r+0x708>)
 8006b8c:	f7f9 fca4 	bl	80004d8 <__aeabi_dmul>
 8006b90:	2200      	movs	r2, #0
 8006b92:	2300      	movs	r3, #0
 8006b94:	4604      	mov	r4, r0
 8006b96:	460d      	mov	r5, r1
 8006b98:	f7f9 ff06 	bl	80009a8 <__aeabi_dcmpeq>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f43f aebc 	beq.w	800691a <_dtoa_r+0x472>
 8006ba2:	e6f1      	b.n	8006988 <_dtoa_r+0x4e0>
 8006ba4:	0800b248 	.word	0x0800b248
 8006ba8:	3fe00000 	.word	0x3fe00000
 8006bac:	3ff00000 	.word	0x3ff00000
 8006bb0:	40240000 	.word	0x40240000
 8006bb4:	40140000 	.word	0x40140000
 8006bb8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	f000 80db 	beq.w	8006d76 <_dtoa_r+0x8ce>
 8006bc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006bc2:	2a01      	cmp	r2, #1
 8006bc4:	f300 80bf 	bgt.w	8006d46 <_dtoa_r+0x89e>
 8006bc8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006bca:	2a00      	cmp	r2, #0
 8006bcc:	f000 80b7 	beq.w	8006d3e <_dtoa_r+0x896>
 8006bd0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006bd4:	4646      	mov	r6, r8
 8006bd6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006bd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bda:	2101      	movs	r1, #1
 8006bdc:	441a      	add	r2, r3
 8006bde:	4658      	mov	r0, fp
 8006be0:	4498      	add	r8, r3
 8006be2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006be4:	f000 fc64 	bl	80074b0 <__i2b>
 8006be8:	4605      	mov	r5, r0
 8006bea:	b15e      	cbz	r6, 8006c04 <_dtoa_r+0x75c>
 8006bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	dd08      	ble.n	8006c04 <_dtoa_r+0x75c>
 8006bf2:	42b3      	cmp	r3, r6
 8006bf4:	bfa8      	it	ge
 8006bf6:	4633      	movge	r3, r6
 8006bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bfa:	eba8 0803 	sub.w	r8, r8, r3
 8006bfe:	1af6      	subs	r6, r6, r3
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c06:	b1f3      	cbz	r3, 8006c46 <_dtoa_r+0x79e>
 8006c08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80b7 	beq.w	8006d7e <_dtoa_r+0x8d6>
 8006c10:	b18c      	cbz	r4, 8006c36 <_dtoa_r+0x78e>
 8006c12:	4629      	mov	r1, r5
 8006c14:	4622      	mov	r2, r4
 8006c16:	4658      	mov	r0, fp
 8006c18:	f000 fd08 	bl	800762c <__pow5mult>
 8006c1c:	464a      	mov	r2, r9
 8006c1e:	4601      	mov	r1, r0
 8006c20:	4605      	mov	r5, r0
 8006c22:	4658      	mov	r0, fp
 8006c24:	f000 fc5a 	bl	80074dc <__multiply>
 8006c28:	4649      	mov	r1, r9
 8006c2a:	9004      	str	r0, [sp, #16]
 8006c2c:	4658      	mov	r0, fp
 8006c2e:	f000 fb41 	bl	80072b4 <_Bfree>
 8006c32:	9b04      	ldr	r3, [sp, #16]
 8006c34:	4699      	mov	r9, r3
 8006c36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c38:	1b1a      	subs	r2, r3, r4
 8006c3a:	d004      	beq.n	8006c46 <_dtoa_r+0x79e>
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	4658      	mov	r0, fp
 8006c40:	f000 fcf4 	bl	800762c <__pow5mult>
 8006c44:	4681      	mov	r9, r0
 8006c46:	2101      	movs	r1, #1
 8006c48:	4658      	mov	r0, fp
 8006c4a:	f000 fc31 	bl	80074b0 <__i2b>
 8006c4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c50:	4604      	mov	r4, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 81c9 	beq.w	8006fea <_dtoa_r+0xb42>
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	4658      	mov	r0, fp
 8006c5e:	f000 fce5 	bl	800762c <__pow5mult>
 8006c62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c64:	4604      	mov	r4, r0
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	f300 808f 	bgt.w	8006d8a <_dtoa_r+0x8e2>
 8006c6c:	9b02      	ldr	r3, [sp, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f040 8087 	bne.w	8006d82 <_dtoa_r+0x8da>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f040 8083 	bne.w	8006d86 <_dtoa_r+0x8de>
 8006c80:	9b03      	ldr	r3, [sp, #12]
 8006c82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c86:	0d1b      	lsrs	r3, r3, #20
 8006c88:	051b      	lsls	r3, r3, #20
 8006c8a:	b12b      	cbz	r3, 8006c98 <_dtoa_r+0x7f0>
 8006c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c8e:	f108 0801 	add.w	r8, r8, #1
 8006c92:	3301      	adds	r3, #1
 8006c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c96:	2301      	movs	r3, #1
 8006c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 81aa 	beq.w	8006ff6 <_dtoa_r+0xb4e>
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ca8:	6918      	ldr	r0, [r3, #16]
 8006caa:	f000 fbb5 	bl	8007418 <__hi0bits>
 8006cae:	f1c0 0020 	rsb	r0, r0, #32
 8006cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb4:	4418      	add	r0, r3
 8006cb6:	f010 001f 	ands.w	r0, r0, #31
 8006cba:	d071      	beq.n	8006da0 <_dtoa_r+0x8f8>
 8006cbc:	f1c0 0320 	rsb	r3, r0, #32
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	dd65      	ble.n	8006d90 <_dtoa_r+0x8e8>
 8006cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc6:	f1c0 001c 	rsb	r0, r0, #28
 8006cca:	4403      	add	r3, r0
 8006ccc:	4480      	add	r8, r0
 8006cce:	4406      	add	r6, r0
 8006cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cd2:	f1b8 0f00 	cmp.w	r8, #0
 8006cd6:	dd05      	ble.n	8006ce4 <_dtoa_r+0x83c>
 8006cd8:	4649      	mov	r1, r9
 8006cda:	4642      	mov	r2, r8
 8006cdc:	4658      	mov	r0, fp
 8006cde:	f000 fcff 	bl	80076e0 <__lshift>
 8006ce2:	4681      	mov	r9, r0
 8006ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	dd05      	ble.n	8006cf6 <_dtoa_r+0x84e>
 8006cea:	4621      	mov	r1, r4
 8006cec:	461a      	mov	r2, r3
 8006cee:	4658      	mov	r0, fp
 8006cf0:	f000 fcf6 	bl	80076e0 <__lshift>
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d053      	beq.n	8006da4 <_dtoa_r+0x8fc>
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4648      	mov	r0, r9
 8006d00:	f000 fd5a 	bl	80077b8 <__mcmp>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	da4d      	bge.n	8006da4 <_dtoa_r+0x8fc>
 8006d08:	1e7b      	subs	r3, r7, #1
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	9304      	str	r3, [sp, #16]
 8006d0e:	220a      	movs	r2, #10
 8006d10:	2300      	movs	r3, #0
 8006d12:	4658      	mov	r0, fp
 8006d14:	f000 faf0 	bl	80072f8 <__multadd>
 8006d18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d1a:	4681      	mov	r9, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 816c 	beq.w	8006ffa <_dtoa_r+0xb52>
 8006d22:	2300      	movs	r3, #0
 8006d24:	4629      	mov	r1, r5
 8006d26:	220a      	movs	r2, #10
 8006d28:	4658      	mov	r0, fp
 8006d2a:	f000 fae5 	bl	80072f8 <__multadd>
 8006d2e:	9b08      	ldr	r3, [sp, #32]
 8006d30:	4605      	mov	r5, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	dc61      	bgt.n	8006dfa <_dtoa_r+0x952>
 8006d36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	dc3b      	bgt.n	8006db4 <_dtoa_r+0x90c>
 8006d3c:	e05d      	b.n	8006dfa <_dtoa_r+0x952>
 8006d3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d40:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d44:	e746      	b.n	8006bd4 <_dtoa_r+0x72c>
 8006d46:	9b07      	ldr	r3, [sp, #28]
 8006d48:	1e5c      	subs	r4, r3, #1
 8006d4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d4c:	42a3      	cmp	r3, r4
 8006d4e:	bfbf      	itttt	lt
 8006d50:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d52:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006d54:	1ae3      	sublt	r3, r4, r3
 8006d56:	18d2      	addlt	r2, r2, r3
 8006d58:	bfa8      	it	ge
 8006d5a:	1b1c      	subge	r4, r3, r4
 8006d5c:	9b07      	ldr	r3, [sp, #28]
 8006d5e:	bfbe      	ittt	lt
 8006d60:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d62:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006d64:	2400      	movlt	r4, #0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bfb5      	itete	lt
 8006d6a:	eba8 0603 	sublt.w	r6, r8, r3
 8006d6e:	4646      	movge	r6, r8
 8006d70:	2300      	movlt	r3, #0
 8006d72:	9b07      	ldrge	r3, [sp, #28]
 8006d74:	e730      	b.n	8006bd8 <_dtoa_r+0x730>
 8006d76:	4646      	mov	r6, r8
 8006d78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d7c:	e735      	b.n	8006bea <_dtoa_r+0x742>
 8006d7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d80:	e75c      	b.n	8006c3c <_dtoa_r+0x794>
 8006d82:	2300      	movs	r3, #0
 8006d84:	e788      	b.n	8006c98 <_dtoa_r+0x7f0>
 8006d86:	9b02      	ldr	r3, [sp, #8]
 8006d88:	e786      	b.n	8006c98 <_dtoa_r+0x7f0>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d8e:	e788      	b.n	8006ca2 <_dtoa_r+0x7fa>
 8006d90:	d09f      	beq.n	8006cd2 <_dtoa_r+0x82a>
 8006d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d94:	331c      	adds	r3, #28
 8006d96:	441a      	add	r2, r3
 8006d98:	4498      	add	r8, r3
 8006d9a:	441e      	add	r6, r3
 8006d9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d9e:	e798      	b.n	8006cd2 <_dtoa_r+0x82a>
 8006da0:	4603      	mov	r3, r0
 8006da2:	e7f6      	b.n	8006d92 <_dtoa_r+0x8ea>
 8006da4:	9b07      	ldr	r3, [sp, #28]
 8006da6:	9704      	str	r7, [sp, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	dc20      	bgt.n	8006dee <_dtoa_r+0x946>
 8006dac:	9308      	str	r3, [sp, #32]
 8006dae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	dd1e      	ble.n	8006df2 <_dtoa_r+0x94a>
 8006db4:	9b08      	ldr	r3, [sp, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f47f aebc 	bne.w	8006b34 <_dtoa_r+0x68c>
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	2205      	movs	r2, #5
 8006dc0:	4658      	mov	r0, fp
 8006dc2:	f000 fa99 	bl	80072f8 <__multadd>
 8006dc6:	4601      	mov	r1, r0
 8006dc8:	4604      	mov	r4, r0
 8006dca:	4648      	mov	r0, r9
 8006dcc:	f000 fcf4 	bl	80077b8 <__mcmp>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f77f aeaf 	ble.w	8006b34 <_dtoa_r+0x68c>
 8006dd6:	2331      	movs	r3, #49	@ 0x31
 8006dd8:	4656      	mov	r6, sl
 8006dda:	f806 3b01 	strb.w	r3, [r6], #1
 8006dde:	9b04      	ldr	r3, [sp, #16]
 8006de0:	3301      	adds	r3, #1
 8006de2:	9304      	str	r3, [sp, #16]
 8006de4:	e6aa      	b.n	8006b3c <_dtoa_r+0x694>
 8006de6:	9c07      	ldr	r4, [sp, #28]
 8006de8:	9704      	str	r7, [sp, #16]
 8006dea:	4625      	mov	r5, r4
 8006dec:	e7f3      	b.n	8006dd6 <_dtoa_r+0x92e>
 8006dee:	9b07      	ldr	r3, [sp, #28]
 8006df0:	9308      	str	r3, [sp, #32]
 8006df2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8104 	beq.w	8007002 <_dtoa_r+0xb5a>
 8006dfa:	2e00      	cmp	r6, #0
 8006dfc:	dd05      	ble.n	8006e0a <_dtoa_r+0x962>
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4632      	mov	r2, r6
 8006e02:	4658      	mov	r0, fp
 8006e04:	f000 fc6c 	bl	80076e0 <__lshift>
 8006e08:	4605      	mov	r5, r0
 8006e0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d05a      	beq.n	8006ec6 <_dtoa_r+0xa1e>
 8006e10:	4658      	mov	r0, fp
 8006e12:	6869      	ldr	r1, [r5, #4]
 8006e14:	f000 fa0e 	bl	8007234 <_Balloc>
 8006e18:	4606      	mov	r6, r0
 8006e1a:	b928      	cbnz	r0, 8006e28 <_dtoa_r+0x980>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e22:	4b83      	ldr	r3, [pc, #524]	@ (8007030 <_dtoa_r+0xb88>)
 8006e24:	f7ff bb54 	b.w	80064d0 <_dtoa_r+0x28>
 8006e28:	692a      	ldr	r2, [r5, #16]
 8006e2a:	f105 010c 	add.w	r1, r5, #12
 8006e2e:	3202      	adds	r2, #2
 8006e30:	0092      	lsls	r2, r2, #2
 8006e32:	300c      	adds	r0, #12
 8006e34:	f002 f922 	bl	800907c <memcpy>
 8006e38:	2201      	movs	r2, #1
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4658      	mov	r0, fp
 8006e3e:	f000 fc4f 	bl	80076e0 <__lshift>
 8006e42:	462f      	mov	r7, r5
 8006e44:	4605      	mov	r5, r0
 8006e46:	f10a 0301 	add.w	r3, sl, #1
 8006e4a:	9307      	str	r3, [sp, #28]
 8006e4c:	9b08      	ldr	r3, [sp, #32]
 8006e4e:	4453      	add	r3, sl
 8006e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e52:	9b02      	ldr	r3, [sp, #8]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e5a:	9b07      	ldr	r3, [sp, #28]
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	4648      	mov	r0, r9
 8006e62:	9302      	str	r3, [sp, #8]
 8006e64:	f7ff fa96 	bl	8006394 <quorem>
 8006e68:	4639      	mov	r1, r7
 8006e6a:	9008      	str	r0, [sp, #32]
 8006e6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e70:	4648      	mov	r0, r9
 8006e72:	f000 fca1 	bl	80077b8 <__mcmp>
 8006e76:	462a      	mov	r2, r5
 8006e78:	9009      	str	r0, [sp, #36]	@ 0x24
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4658      	mov	r0, fp
 8006e7e:	f000 fcb7 	bl	80077f0 <__mdiff>
 8006e82:	68c2      	ldr	r2, [r0, #12]
 8006e84:	4606      	mov	r6, r0
 8006e86:	bb02      	cbnz	r2, 8006eca <_dtoa_r+0xa22>
 8006e88:	4601      	mov	r1, r0
 8006e8a:	4648      	mov	r0, r9
 8006e8c:	f000 fc94 	bl	80077b8 <__mcmp>
 8006e90:	4602      	mov	r2, r0
 8006e92:	4631      	mov	r1, r6
 8006e94:	4658      	mov	r0, fp
 8006e96:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e98:	f000 fa0c 	bl	80072b4 <_Bfree>
 8006e9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ea0:	9e07      	ldr	r6, [sp, #28]
 8006ea2:	ea43 0102 	orr.w	r1, r3, r2
 8006ea6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ea8:	4319      	orrs	r1, r3
 8006eaa:	d110      	bne.n	8006ece <_dtoa_r+0xa26>
 8006eac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006eb0:	d029      	beq.n	8006f06 <_dtoa_r+0xa5e>
 8006eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dd02      	ble.n	8006ebe <_dtoa_r+0xa16>
 8006eb8:	9b08      	ldr	r3, [sp, #32]
 8006eba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006ebe:	9b02      	ldr	r3, [sp, #8]
 8006ec0:	f883 8000 	strb.w	r8, [r3]
 8006ec4:	e63b      	b.n	8006b3e <_dtoa_r+0x696>
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	e7bb      	b.n	8006e42 <_dtoa_r+0x99a>
 8006eca:	2201      	movs	r2, #1
 8006ecc:	e7e1      	b.n	8006e92 <_dtoa_r+0x9ea>
 8006ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	db04      	blt.n	8006ede <_dtoa_r+0xa36>
 8006ed4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006eda:	430b      	orrs	r3, r1
 8006edc:	d120      	bne.n	8006f20 <_dtoa_r+0xa78>
 8006ede:	2a00      	cmp	r2, #0
 8006ee0:	dded      	ble.n	8006ebe <_dtoa_r+0xa16>
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	f000 fbfa 	bl	80076e0 <__lshift>
 8006eec:	4621      	mov	r1, r4
 8006eee:	4681      	mov	r9, r0
 8006ef0:	f000 fc62 	bl	80077b8 <__mcmp>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	dc03      	bgt.n	8006f00 <_dtoa_r+0xa58>
 8006ef8:	d1e1      	bne.n	8006ebe <_dtoa_r+0xa16>
 8006efa:	f018 0f01 	tst.w	r8, #1
 8006efe:	d0de      	beq.n	8006ebe <_dtoa_r+0xa16>
 8006f00:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f04:	d1d8      	bne.n	8006eb8 <_dtoa_r+0xa10>
 8006f06:	2339      	movs	r3, #57	@ 0x39
 8006f08:	9a02      	ldr	r2, [sp, #8]
 8006f0a:	7013      	strb	r3, [r2, #0]
 8006f0c:	4633      	mov	r3, r6
 8006f0e:	461e      	mov	r6, r3
 8006f10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	2a39      	cmp	r2, #57	@ 0x39
 8006f18:	d052      	beq.n	8006fc0 <_dtoa_r+0xb18>
 8006f1a:	3201      	adds	r2, #1
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e60e      	b.n	8006b3e <_dtoa_r+0x696>
 8006f20:	2a00      	cmp	r2, #0
 8006f22:	dd07      	ble.n	8006f34 <_dtoa_r+0xa8c>
 8006f24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f28:	d0ed      	beq.n	8006f06 <_dtoa_r+0xa5e>
 8006f2a:	9a02      	ldr	r2, [sp, #8]
 8006f2c:	f108 0301 	add.w	r3, r8, #1
 8006f30:	7013      	strb	r3, [r2, #0]
 8006f32:	e604      	b.n	8006b3e <_dtoa_r+0x696>
 8006f34:	9b07      	ldr	r3, [sp, #28]
 8006f36:	9a07      	ldr	r2, [sp, #28]
 8006f38:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d028      	beq.n	8006f94 <_dtoa_r+0xaec>
 8006f42:	4649      	mov	r1, r9
 8006f44:	2300      	movs	r3, #0
 8006f46:	220a      	movs	r2, #10
 8006f48:	4658      	mov	r0, fp
 8006f4a:	f000 f9d5 	bl	80072f8 <__multadd>
 8006f4e:	42af      	cmp	r7, r5
 8006f50:	4681      	mov	r9, r0
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	f04f 020a 	mov.w	r2, #10
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	4658      	mov	r0, fp
 8006f5e:	d107      	bne.n	8006f70 <_dtoa_r+0xac8>
 8006f60:	f000 f9ca 	bl	80072f8 <__multadd>
 8006f64:	4607      	mov	r7, r0
 8006f66:	4605      	mov	r5, r0
 8006f68:	9b07      	ldr	r3, [sp, #28]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	9307      	str	r3, [sp, #28]
 8006f6e:	e774      	b.n	8006e5a <_dtoa_r+0x9b2>
 8006f70:	f000 f9c2 	bl	80072f8 <__multadd>
 8006f74:	4629      	mov	r1, r5
 8006f76:	4607      	mov	r7, r0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	220a      	movs	r2, #10
 8006f7c:	4658      	mov	r0, fp
 8006f7e:	f000 f9bb 	bl	80072f8 <__multadd>
 8006f82:	4605      	mov	r5, r0
 8006f84:	e7f0      	b.n	8006f68 <_dtoa_r+0xac0>
 8006f86:	9b08      	ldr	r3, [sp, #32]
 8006f88:	2700      	movs	r7, #0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bfcc      	ite	gt
 8006f8e:	461e      	movgt	r6, r3
 8006f90:	2601      	movle	r6, #1
 8006f92:	4456      	add	r6, sl
 8006f94:	4649      	mov	r1, r9
 8006f96:	2201      	movs	r2, #1
 8006f98:	4658      	mov	r0, fp
 8006f9a:	f000 fba1 	bl	80076e0 <__lshift>
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4681      	mov	r9, r0
 8006fa2:	f000 fc09 	bl	80077b8 <__mcmp>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	dcb0      	bgt.n	8006f0c <_dtoa_r+0xa64>
 8006faa:	d102      	bne.n	8006fb2 <_dtoa_r+0xb0a>
 8006fac:	f018 0f01 	tst.w	r8, #1
 8006fb0:	d1ac      	bne.n	8006f0c <_dtoa_r+0xa64>
 8006fb2:	4633      	mov	r3, r6
 8006fb4:	461e      	mov	r6, r3
 8006fb6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fba:	2a30      	cmp	r2, #48	@ 0x30
 8006fbc:	d0fa      	beq.n	8006fb4 <_dtoa_r+0xb0c>
 8006fbe:	e5be      	b.n	8006b3e <_dtoa_r+0x696>
 8006fc0:	459a      	cmp	sl, r3
 8006fc2:	d1a4      	bne.n	8006f0e <_dtoa_r+0xa66>
 8006fc4:	9b04      	ldr	r3, [sp, #16]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	2331      	movs	r3, #49	@ 0x31
 8006fcc:	f88a 3000 	strb.w	r3, [sl]
 8006fd0:	e5b5      	b.n	8006b3e <_dtoa_r+0x696>
 8006fd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006fd4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007034 <_dtoa_r+0xb8c>
 8006fd8:	b11b      	cbz	r3, 8006fe2 <_dtoa_r+0xb3a>
 8006fda:	f10a 0308 	add.w	r3, sl, #8
 8006fde:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	4650      	mov	r0, sl
 8006fe4:	b017      	add	sp, #92	@ 0x5c
 8006fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	f77f ae3d 	ble.w	8006c6c <_dtoa_r+0x7c4>
 8006ff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ff4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	e65b      	b.n	8006cb2 <_dtoa_r+0x80a>
 8006ffa:	9b08      	ldr	r3, [sp, #32]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f77f aed6 	ble.w	8006dae <_dtoa_r+0x906>
 8007002:	4656      	mov	r6, sl
 8007004:	4621      	mov	r1, r4
 8007006:	4648      	mov	r0, r9
 8007008:	f7ff f9c4 	bl	8006394 <quorem>
 800700c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007010:	9b08      	ldr	r3, [sp, #32]
 8007012:	f806 8b01 	strb.w	r8, [r6], #1
 8007016:	eba6 020a 	sub.w	r2, r6, sl
 800701a:	4293      	cmp	r3, r2
 800701c:	ddb3      	ble.n	8006f86 <_dtoa_r+0xade>
 800701e:	4649      	mov	r1, r9
 8007020:	2300      	movs	r3, #0
 8007022:	220a      	movs	r2, #10
 8007024:	4658      	mov	r0, fp
 8007026:	f000 f967 	bl	80072f8 <__multadd>
 800702a:	4681      	mov	r9, r0
 800702c:	e7ea      	b.n	8007004 <_dtoa_r+0xb5c>
 800702e:	bf00      	nop
 8007030:	0800b1a7 	.word	0x0800b1a7
 8007034:	0800b12b 	.word	0x0800b12b

08007038 <_free_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4605      	mov	r5, r0
 800703c:	2900      	cmp	r1, #0
 800703e:	d040      	beq.n	80070c2 <_free_r+0x8a>
 8007040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007044:	1f0c      	subs	r4, r1, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	bfb8      	it	lt
 800704a:	18e4      	addlt	r4, r4, r3
 800704c:	f000 f8e6 	bl	800721c <__malloc_lock>
 8007050:	4a1c      	ldr	r2, [pc, #112]	@ (80070c4 <_free_r+0x8c>)
 8007052:	6813      	ldr	r3, [r2, #0]
 8007054:	b933      	cbnz	r3, 8007064 <_free_r+0x2c>
 8007056:	6063      	str	r3, [r4, #4]
 8007058:	6014      	str	r4, [r2, #0]
 800705a:	4628      	mov	r0, r5
 800705c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007060:	f000 b8e2 	b.w	8007228 <__malloc_unlock>
 8007064:	42a3      	cmp	r3, r4
 8007066:	d908      	bls.n	800707a <_free_r+0x42>
 8007068:	6820      	ldr	r0, [r4, #0]
 800706a:	1821      	adds	r1, r4, r0
 800706c:	428b      	cmp	r3, r1
 800706e:	bf01      	itttt	eq
 8007070:	6819      	ldreq	r1, [r3, #0]
 8007072:	685b      	ldreq	r3, [r3, #4]
 8007074:	1809      	addeq	r1, r1, r0
 8007076:	6021      	streq	r1, [r4, #0]
 8007078:	e7ed      	b.n	8007056 <_free_r+0x1e>
 800707a:	461a      	mov	r2, r3
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	b10b      	cbz	r3, 8007084 <_free_r+0x4c>
 8007080:	42a3      	cmp	r3, r4
 8007082:	d9fa      	bls.n	800707a <_free_r+0x42>
 8007084:	6811      	ldr	r1, [r2, #0]
 8007086:	1850      	adds	r0, r2, r1
 8007088:	42a0      	cmp	r0, r4
 800708a:	d10b      	bne.n	80070a4 <_free_r+0x6c>
 800708c:	6820      	ldr	r0, [r4, #0]
 800708e:	4401      	add	r1, r0
 8007090:	1850      	adds	r0, r2, r1
 8007092:	4283      	cmp	r3, r0
 8007094:	6011      	str	r1, [r2, #0]
 8007096:	d1e0      	bne.n	800705a <_free_r+0x22>
 8007098:	6818      	ldr	r0, [r3, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	4408      	add	r0, r1
 800709e:	6010      	str	r0, [r2, #0]
 80070a0:	6053      	str	r3, [r2, #4]
 80070a2:	e7da      	b.n	800705a <_free_r+0x22>
 80070a4:	d902      	bls.n	80070ac <_free_r+0x74>
 80070a6:	230c      	movs	r3, #12
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	e7d6      	b.n	800705a <_free_r+0x22>
 80070ac:	6820      	ldr	r0, [r4, #0]
 80070ae:	1821      	adds	r1, r4, r0
 80070b0:	428b      	cmp	r3, r1
 80070b2:	bf01      	itttt	eq
 80070b4:	6819      	ldreq	r1, [r3, #0]
 80070b6:	685b      	ldreq	r3, [r3, #4]
 80070b8:	1809      	addeq	r1, r1, r0
 80070ba:	6021      	streq	r1, [r4, #0]
 80070bc:	6063      	str	r3, [r4, #4]
 80070be:	6054      	str	r4, [r2, #4]
 80070c0:	e7cb      	b.n	800705a <_free_r+0x22>
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20000458 	.word	0x20000458

080070c8 <malloc>:
 80070c8:	4b02      	ldr	r3, [pc, #8]	@ (80070d4 <malloc+0xc>)
 80070ca:	4601      	mov	r1, r0
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	f000 b825 	b.w	800711c <_malloc_r>
 80070d2:	bf00      	nop
 80070d4:	20000020 	.word	0x20000020

080070d8 <sbrk_aligned>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	4e0f      	ldr	r6, [pc, #60]	@ (8007118 <sbrk_aligned+0x40>)
 80070dc:	460c      	mov	r4, r1
 80070de:	6831      	ldr	r1, [r6, #0]
 80070e0:	4605      	mov	r5, r0
 80070e2:	b911      	cbnz	r1, 80070ea <sbrk_aligned+0x12>
 80070e4:	f001 ffba 	bl	800905c <_sbrk_r>
 80070e8:	6030      	str	r0, [r6, #0]
 80070ea:	4621      	mov	r1, r4
 80070ec:	4628      	mov	r0, r5
 80070ee:	f001 ffb5 	bl	800905c <_sbrk_r>
 80070f2:	1c43      	adds	r3, r0, #1
 80070f4:	d103      	bne.n	80070fe <sbrk_aligned+0x26>
 80070f6:	f04f 34ff 	mov.w	r4, #4294967295
 80070fa:	4620      	mov	r0, r4
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
 80070fe:	1cc4      	adds	r4, r0, #3
 8007100:	f024 0403 	bic.w	r4, r4, #3
 8007104:	42a0      	cmp	r0, r4
 8007106:	d0f8      	beq.n	80070fa <sbrk_aligned+0x22>
 8007108:	1a21      	subs	r1, r4, r0
 800710a:	4628      	mov	r0, r5
 800710c:	f001 ffa6 	bl	800905c <_sbrk_r>
 8007110:	3001      	adds	r0, #1
 8007112:	d1f2      	bne.n	80070fa <sbrk_aligned+0x22>
 8007114:	e7ef      	b.n	80070f6 <sbrk_aligned+0x1e>
 8007116:	bf00      	nop
 8007118:	20000454 	.word	0x20000454

0800711c <_malloc_r>:
 800711c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007120:	1ccd      	adds	r5, r1, #3
 8007122:	f025 0503 	bic.w	r5, r5, #3
 8007126:	3508      	adds	r5, #8
 8007128:	2d0c      	cmp	r5, #12
 800712a:	bf38      	it	cc
 800712c:	250c      	movcc	r5, #12
 800712e:	2d00      	cmp	r5, #0
 8007130:	4606      	mov	r6, r0
 8007132:	db01      	blt.n	8007138 <_malloc_r+0x1c>
 8007134:	42a9      	cmp	r1, r5
 8007136:	d904      	bls.n	8007142 <_malloc_r+0x26>
 8007138:	230c      	movs	r3, #12
 800713a:	6033      	str	r3, [r6, #0]
 800713c:	2000      	movs	r0, #0
 800713e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007218 <_malloc_r+0xfc>
 8007146:	f000 f869 	bl	800721c <__malloc_lock>
 800714a:	f8d8 3000 	ldr.w	r3, [r8]
 800714e:	461c      	mov	r4, r3
 8007150:	bb44      	cbnz	r4, 80071a4 <_malloc_r+0x88>
 8007152:	4629      	mov	r1, r5
 8007154:	4630      	mov	r0, r6
 8007156:	f7ff ffbf 	bl	80070d8 <sbrk_aligned>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	4604      	mov	r4, r0
 800715e:	d158      	bne.n	8007212 <_malloc_r+0xf6>
 8007160:	f8d8 4000 	ldr.w	r4, [r8]
 8007164:	4627      	mov	r7, r4
 8007166:	2f00      	cmp	r7, #0
 8007168:	d143      	bne.n	80071f2 <_malloc_r+0xd6>
 800716a:	2c00      	cmp	r4, #0
 800716c:	d04b      	beq.n	8007206 <_malloc_r+0xea>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	4639      	mov	r1, r7
 8007172:	4630      	mov	r0, r6
 8007174:	eb04 0903 	add.w	r9, r4, r3
 8007178:	f001 ff70 	bl	800905c <_sbrk_r>
 800717c:	4581      	cmp	r9, r0
 800717e:	d142      	bne.n	8007206 <_malloc_r+0xea>
 8007180:	6821      	ldr	r1, [r4, #0]
 8007182:	4630      	mov	r0, r6
 8007184:	1a6d      	subs	r5, r5, r1
 8007186:	4629      	mov	r1, r5
 8007188:	f7ff ffa6 	bl	80070d8 <sbrk_aligned>
 800718c:	3001      	adds	r0, #1
 800718e:	d03a      	beq.n	8007206 <_malloc_r+0xea>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	442b      	add	r3, r5
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	f8d8 3000 	ldr.w	r3, [r8]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	bb62      	cbnz	r2, 80071f8 <_malloc_r+0xdc>
 800719e:	f8c8 7000 	str.w	r7, [r8]
 80071a2:	e00f      	b.n	80071c4 <_malloc_r+0xa8>
 80071a4:	6822      	ldr	r2, [r4, #0]
 80071a6:	1b52      	subs	r2, r2, r5
 80071a8:	d420      	bmi.n	80071ec <_malloc_r+0xd0>
 80071aa:	2a0b      	cmp	r2, #11
 80071ac:	d917      	bls.n	80071de <_malloc_r+0xc2>
 80071ae:	1961      	adds	r1, r4, r5
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	6025      	str	r5, [r4, #0]
 80071b4:	bf18      	it	ne
 80071b6:	6059      	strne	r1, [r3, #4]
 80071b8:	6863      	ldr	r3, [r4, #4]
 80071ba:	bf08      	it	eq
 80071bc:	f8c8 1000 	streq.w	r1, [r8]
 80071c0:	5162      	str	r2, [r4, r5]
 80071c2:	604b      	str	r3, [r1, #4]
 80071c4:	4630      	mov	r0, r6
 80071c6:	f000 f82f 	bl	8007228 <__malloc_unlock>
 80071ca:	f104 000b 	add.w	r0, r4, #11
 80071ce:	1d23      	adds	r3, r4, #4
 80071d0:	f020 0007 	bic.w	r0, r0, #7
 80071d4:	1ac2      	subs	r2, r0, r3
 80071d6:	bf1c      	itt	ne
 80071d8:	1a1b      	subne	r3, r3, r0
 80071da:	50a3      	strne	r3, [r4, r2]
 80071dc:	e7af      	b.n	800713e <_malloc_r+0x22>
 80071de:	6862      	ldr	r2, [r4, #4]
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	bf0c      	ite	eq
 80071e4:	f8c8 2000 	streq.w	r2, [r8]
 80071e8:	605a      	strne	r2, [r3, #4]
 80071ea:	e7eb      	b.n	80071c4 <_malloc_r+0xa8>
 80071ec:	4623      	mov	r3, r4
 80071ee:	6864      	ldr	r4, [r4, #4]
 80071f0:	e7ae      	b.n	8007150 <_malloc_r+0x34>
 80071f2:	463c      	mov	r4, r7
 80071f4:	687f      	ldr	r7, [r7, #4]
 80071f6:	e7b6      	b.n	8007166 <_malloc_r+0x4a>
 80071f8:	461a      	mov	r2, r3
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	d1fb      	bne.n	80071f8 <_malloc_r+0xdc>
 8007200:	2300      	movs	r3, #0
 8007202:	6053      	str	r3, [r2, #4]
 8007204:	e7de      	b.n	80071c4 <_malloc_r+0xa8>
 8007206:	230c      	movs	r3, #12
 8007208:	4630      	mov	r0, r6
 800720a:	6033      	str	r3, [r6, #0]
 800720c:	f000 f80c 	bl	8007228 <__malloc_unlock>
 8007210:	e794      	b.n	800713c <_malloc_r+0x20>
 8007212:	6005      	str	r5, [r0, #0]
 8007214:	e7d6      	b.n	80071c4 <_malloc_r+0xa8>
 8007216:	bf00      	nop
 8007218:	20000458 	.word	0x20000458

0800721c <__malloc_lock>:
 800721c:	4801      	ldr	r0, [pc, #4]	@ (8007224 <__malloc_lock+0x8>)
 800721e:	f7ff b8a4 	b.w	800636a <__retarget_lock_acquire_recursive>
 8007222:	bf00      	nop
 8007224:	20000450 	.word	0x20000450

08007228 <__malloc_unlock>:
 8007228:	4801      	ldr	r0, [pc, #4]	@ (8007230 <__malloc_unlock+0x8>)
 800722a:	f7ff b89f 	b.w	800636c <__retarget_lock_release_recursive>
 800722e:	bf00      	nop
 8007230:	20000450 	.word	0x20000450

08007234 <_Balloc>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	69c6      	ldr	r6, [r0, #28]
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	b976      	cbnz	r6, 800725c <_Balloc+0x28>
 800723e:	2010      	movs	r0, #16
 8007240:	f7ff ff42 	bl	80070c8 <malloc>
 8007244:	4602      	mov	r2, r0
 8007246:	61e0      	str	r0, [r4, #28]
 8007248:	b920      	cbnz	r0, 8007254 <_Balloc+0x20>
 800724a:	216b      	movs	r1, #107	@ 0x6b
 800724c:	4b17      	ldr	r3, [pc, #92]	@ (80072ac <_Balloc+0x78>)
 800724e:	4818      	ldr	r0, [pc, #96]	@ (80072b0 <_Balloc+0x7c>)
 8007250:	f001 ff28 	bl	80090a4 <__assert_func>
 8007254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007258:	6006      	str	r6, [r0, #0]
 800725a:	60c6      	str	r6, [r0, #12]
 800725c:	69e6      	ldr	r6, [r4, #28]
 800725e:	68f3      	ldr	r3, [r6, #12]
 8007260:	b183      	cbz	r3, 8007284 <_Balloc+0x50>
 8007262:	69e3      	ldr	r3, [r4, #28]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800726a:	b9b8      	cbnz	r0, 800729c <_Balloc+0x68>
 800726c:	2101      	movs	r1, #1
 800726e:	fa01 f605 	lsl.w	r6, r1, r5
 8007272:	1d72      	adds	r2, r6, #5
 8007274:	4620      	mov	r0, r4
 8007276:	0092      	lsls	r2, r2, #2
 8007278:	f001 ff32 	bl	80090e0 <_calloc_r>
 800727c:	b160      	cbz	r0, 8007298 <_Balloc+0x64>
 800727e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007282:	e00e      	b.n	80072a2 <_Balloc+0x6e>
 8007284:	2221      	movs	r2, #33	@ 0x21
 8007286:	2104      	movs	r1, #4
 8007288:	4620      	mov	r0, r4
 800728a:	f001 ff29 	bl	80090e0 <_calloc_r>
 800728e:	69e3      	ldr	r3, [r4, #28]
 8007290:	60f0      	str	r0, [r6, #12]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e4      	bne.n	8007262 <_Balloc+0x2e>
 8007298:	2000      	movs	r0, #0
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	6802      	ldr	r2, [r0, #0]
 800729e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072a2:	2300      	movs	r3, #0
 80072a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072a8:	e7f7      	b.n	800729a <_Balloc+0x66>
 80072aa:	bf00      	nop
 80072ac:	0800b138 	.word	0x0800b138
 80072b0:	0800b1b8 	.word	0x0800b1b8

080072b4 <_Bfree>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	69c6      	ldr	r6, [r0, #28]
 80072b8:	4605      	mov	r5, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	b976      	cbnz	r6, 80072dc <_Bfree+0x28>
 80072be:	2010      	movs	r0, #16
 80072c0:	f7ff ff02 	bl	80070c8 <malloc>
 80072c4:	4602      	mov	r2, r0
 80072c6:	61e8      	str	r0, [r5, #28]
 80072c8:	b920      	cbnz	r0, 80072d4 <_Bfree+0x20>
 80072ca:	218f      	movs	r1, #143	@ 0x8f
 80072cc:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <_Bfree+0x3c>)
 80072ce:	4809      	ldr	r0, [pc, #36]	@ (80072f4 <_Bfree+0x40>)
 80072d0:	f001 fee8 	bl	80090a4 <__assert_func>
 80072d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072d8:	6006      	str	r6, [r0, #0]
 80072da:	60c6      	str	r6, [r0, #12]
 80072dc:	b13c      	cbz	r4, 80072ee <_Bfree+0x3a>
 80072de:	69eb      	ldr	r3, [r5, #28]
 80072e0:	6862      	ldr	r2, [r4, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072e8:	6021      	str	r1, [r4, #0]
 80072ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	0800b138 	.word	0x0800b138
 80072f4:	0800b1b8 	.word	0x0800b1b8

080072f8 <__multadd>:
 80072f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fc:	4607      	mov	r7, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	461e      	mov	r6, r3
 8007302:	2000      	movs	r0, #0
 8007304:	690d      	ldr	r5, [r1, #16]
 8007306:	f101 0c14 	add.w	ip, r1, #20
 800730a:	f8dc 3000 	ldr.w	r3, [ip]
 800730e:	3001      	adds	r0, #1
 8007310:	b299      	uxth	r1, r3
 8007312:	fb02 6101 	mla	r1, r2, r1, r6
 8007316:	0c1e      	lsrs	r6, r3, #16
 8007318:	0c0b      	lsrs	r3, r1, #16
 800731a:	fb02 3306 	mla	r3, r2, r6, r3
 800731e:	b289      	uxth	r1, r1
 8007320:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007324:	4285      	cmp	r5, r0
 8007326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800732a:	f84c 1b04 	str.w	r1, [ip], #4
 800732e:	dcec      	bgt.n	800730a <__multadd+0x12>
 8007330:	b30e      	cbz	r6, 8007376 <__multadd+0x7e>
 8007332:	68a3      	ldr	r3, [r4, #8]
 8007334:	42ab      	cmp	r3, r5
 8007336:	dc19      	bgt.n	800736c <__multadd+0x74>
 8007338:	6861      	ldr	r1, [r4, #4]
 800733a:	4638      	mov	r0, r7
 800733c:	3101      	adds	r1, #1
 800733e:	f7ff ff79 	bl	8007234 <_Balloc>
 8007342:	4680      	mov	r8, r0
 8007344:	b928      	cbnz	r0, 8007352 <__multadd+0x5a>
 8007346:	4602      	mov	r2, r0
 8007348:	21ba      	movs	r1, #186	@ 0xba
 800734a:	4b0c      	ldr	r3, [pc, #48]	@ (800737c <__multadd+0x84>)
 800734c:	480c      	ldr	r0, [pc, #48]	@ (8007380 <__multadd+0x88>)
 800734e:	f001 fea9 	bl	80090a4 <__assert_func>
 8007352:	6922      	ldr	r2, [r4, #16]
 8007354:	f104 010c 	add.w	r1, r4, #12
 8007358:	3202      	adds	r2, #2
 800735a:	0092      	lsls	r2, r2, #2
 800735c:	300c      	adds	r0, #12
 800735e:	f001 fe8d 	bl	800907c <memcpy>
 8007362:	4621      	mov	r1, r4
 8007364:	4638      	mov	r0, r7
 8007366:	f7ff ffa5 	bl	80072b4 <_Bfree>
 800736a:	4644      	mov	r4, r8
 800736c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007370:	3501      	adds	r5, #1
 8007372:	615e      	str	r6, [r3, #20]
 8007374:	6125      	str	r5, [r4, #16]
 8007376:	4620      	mov	r0, r4
 8007378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800737c:	0800b1a7 	.word	0x0800b1a7
 8007380:	0800b1b8 	.word	0x0800b1b8

08007384 <__s2b>:
 8007384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007388:	4615      	mov	r5, r2
 800738a:	2209      	movs	r2, #9
 800738c:	461f      	mov	r7, r3
 800738e:	3308      	adds	r3, #8
 8007390:	460c      	mov	r4, r1
 8007392:	fb93 f3f2 	sdiv	r3, r3, r2
 8007396:	4606      	mov	r6, r0
 8007398:	2201      	movs	r2, #1
 800739a:	2100      	movs	r1, #0
 800739c:	429a      	cmp	r2, r3
 800739e:	db09      	blt.n	80073b4 <__s2b+0x30>
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff ff47 	bl	8007234 <_Balloc>
 80073a6:	b940      	cbnz	r0, 80073ba <__s2b+0x36>
 80073a8:	4602      	mov	r2, r0
 80073aa:	21d3      	movs	r1, #211	@ 0xd3
 80073ac:	4b18      	ldr	r3, [pc, #96]	@ (8007410 <__s2b+0x8c>)
 80073ae:	4819      	ldr	r0, [pc, #100]	@ (8007414 <__s2b+0x90>)
 80073b0:	f001 fe78 	bl	80090a4 <__assert_func>
 80073b4:	0052      	lsls	r2, r2, #1
 80073b6:	3101      	adds	r1, #1
 80073b8:	e7f0      	b.n	800739c <__s2b+0x18>
 80073ba:	9b08      	ldr	r3, [sp, #32]
 80073bc:	2d09      	cmp	r5, #9
 80073be:	6143      	str	r3, [r0, #20]
 80073c0:	f04f 0301 	mov.w	r3, #1
 80073c4:	6103      	str	r3, [r0, #16]
 80073c6:	dd16      	ble.n	80073f6 <__s2b+0x72>
 80073c8:	f104 0909 	add.w	r9, r4, #9
 80073cc:	46c8      	mov	r8, r9
 80073ce:	442c      	add	r4, r5
 80073d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073d4:	4601      	mov	r1, r0
 80073d6:	220a      	movs	r2, #10
 80073d8:	4630      	mov	r0, r6
 80073da:	3b30      	subs	r3, #48	@ 0x30
 80073dc:	f7ff ff8c 	bl	80072f8 <__multadd>
 80073e0:	45a0      	cmp	r8, r4
 80073e2:	d1f5      	bne.n	80073d0 <__s2b+0x4c>
 80073e4:	f1a5 0408 	sub.w	r4, r5, #8
 80073e8:	444c      	add	r4, r9
 80073ea:	1b2d      	subs	r5, r5, r4
 80073ec:	1963      	adds	r3, r4, r5
 80073ee:	42bb      	cmp	r3, r7
 80073f0:	db04      	blt.n	80073fc <__s2b+0x78>
 80073f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f6:	2509      	movs	r5, #9
 80073f8:	340a      	adds	r4, #10
 80073fa:	e7f6      	b.n	80073ea <__s2b+0x66>
 80073fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007400:	4601      	mov	r1, r0
 8007402:	220a      	movs	r2, #10
 8007404:	4630      	mov	r0, r6
 8007406:	3b30      	subs	r3, #48	@ 0x30
 8007408:	f7ff ff76 	bl	80072f8 <__multadd>
 800740c:	e7ee      	b.n	80073ec <__s2b+0x68>
 800740e:	bf00      	nop
 8007410:	0800b1a7 	.word	0x0800b1a7
 8007414:	0800b1b8 	.word	0x0800b1b8

08007418 <__hi0bits>:
 8007418:	4603      	mov	r3, r0
 800741a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800741e:	bf3a      	itte	cc
 8007420:	0403      	lslcc	r3, r0, #16
 8007422:	2010      	movcc	r0, #16
 8007424:	2000      	movcs	r0, #0
 8007426:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800742a:	bf3c      	itt	cc
 800742c:	021b      	lslcc	r3, r3, #8
 800742e:	3008      	addcc	r0, #8
 8007430:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007434:	bf3c      	itt	cc
 8007436:	011b      	lslcc	r3, r3, #4
 8007438:	3004      	addcc	r0, #4
 800743a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743e:	bf3c      	itt	cc
 8007440:	009b      	lslcc	r3, r3, #2
 8007442:	3002      	addcc	r0, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	db05      	blt.n	8007454 <__hi0bits+0x3c>
 8007448:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800744c:	f100 0001 	add.w	r0, r0, #1
 8007450:	bf08      	it	eq
 8007452:	2020      	moveq	r0, #32
 8007454:	4770      	bx	lr

08007456 <__lo0bits>:
 8007456:	6803      	ldr	r3, [r0, #0]
 8007458:	4602      	mov	r2, r0
 800745a:	f013 0007 	ands.w	r0, r3, #7
 800745e:	d00b      	beq.n	8007478 <__lo0bits+0x22>
 8007460:	07d9      	lsls	r1, r3, #31
 8007462:	d421      	bmi.n	80074a8 <__lo0bits+0x52>
 8007464:	0798      	lsls	r0, r3, #30
 8007466:	bf49      	itett	mi
 8007468:	085b      	lsrmi	r3, r3, #1
 800746a:	089b      	lsrpl	r3, r3, #2
 800746c:	2001      	movmi	r0, #1
 800746e:	6013      	strmi	r3, [r2, #0]
 8007470:	bf5c      	itt	pl
 8007472:	2002      	movpl	r0, #2
 8007474:	6013      	strpl	r3, [r2, #0]
 8007476:	4770      	bx	lr
 8007478:	b299      	uxth	r1, r3
 800747a:	b909      	cbnz	r1, 8007480 <__lo0bits+0x2a>
 800747c:	2010      	movs	r0, #16
 800747e:	0c1b      	lsrs	r3, r3, #16
 8007480:	b2d9      	uxtb	r1, r3
 8007482:	b909      	cbnz	r1, 8007488 <__lo0bits+0x32>
 8007484:	3008      	adds	r0, #8
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	0719      	lsls	r1, r3, #28
 800748a:	bf04      	itt	eq
 800748c:	091b      	lsreq	r3, r3, #4
 800748e:	3004      	addeq	r0, #4
 8007490:	0799      	lsls	r1, r3, #30
 8007492:	bf04      	itt	eq
 8007494:	089b      	lsreq	r3, r3, #2
 8007496:	3002      	addeq	r0, #2
 8007498:	07d9      	lsls	r1, r3, #31
 800749a:	d403      	bmi.n	80074a4 <__lo0bits+0x4e>
 800749c:	085b      	lsrs	r3, r3, #1
 800749e:	f100 0001 	add.w	r0, r0, #1
 80074a2:	d003      	beq.n	80074ac <__lo0bits+0x56>
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	4770      	bx	lr
 80074a8:	2000      	movs	r0, #0
 80074aa:	4770      	bx	lr
 80074ac:	2020      	movs	r0, #32
 80074ae:	4770      	bx	lr

080074b0 <__i2b>:
 80074b0:	b510      	push	{r4, lr}
 80074b2:	460c      	mov	r4, r1
 80074b4:	2101      	movs	r1, #1
 80074b6:	f7ff febd 	bl	8007234 <_Balloc>
 80074ba:	4602      	mov	r2, r0
 80074bc:	b928      	cbnz	r0, 80074ca <__i2b+0x1a>
 80074be:	f240 1145 	movw	r1, #325	@ 0x145
 80074c2:	4b04      	ldr	r3, [pc, #16]	@ (80074d4 <__i2b+0x24>)
 80074c4:	4804      	ldr	r0, [pc, #16]	@ (80074d8 <__i2b+0x28>)
 80074c6:	f001 fded 	bl	80090a4 <__assert_func>
 80074ca:	2301      	movs	r3, #1
 80074cc:	6144      	str	r4, [r0, #20]
 80074ce:	6103      	str	r3, [r0, #16]
 80074d0:	bd10      	pop	{r4, pc}
 80074d2:	bf00      	nop
 80074d4:	0800b1a7 	.word	0x0800b1a7
 80074d8:	0800b1b8 	.word	0x0800b1b8

080074dc <__multiply>:
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	4614      	mov	r4, r2
 80074e2:	690a      	ldr	r2, [r1, #16]
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	460f      	mov	r7, r1
 80074e8:	429a      	cmp	r2, r3
 80074ea:	bfa2      	ittt	ge
 80074ec:	4623      	movge	r3, r4
 80074ee:	460c      	movge	r4, r1
 80074f0:	461f      	movge	r7, r3
 80074f2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80074f6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	6861      	ldr	r1, [r4, #4]
 80074fe:	eb0a 0609 	add.w	r6, sl, r9
 8007502:	42b3      	cmp	r3, r6
 8007504:	b085      	sub	sp, #20
 8007506:	bfb8      	it	lt
 8007508:	3101      	addlt	r1, #1
 800750a:	f7ff fe93 	bl	8007234 <_Balloc>
 800750e:	b930      	cbnz	r0, 800751e <__multiply+0x42>
 8007510:	4602      	mov	r2, r0
 8007512:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007516:	4b43      	ldr	r3, [pc, #268]	@ (8007624 <__multiply+0x148>)
 8007518:	4843      	ldr	r0, [pc, #268]	@ (8007628 <__multiply+0x14c>)
 800751a:	f001 fdc3 	bl	80090a4 <__assert_func>
 800751e:	f100 0514 	add.w	r5, r0, #20
 8007522:	462b      	mov	r3, r5
 8007524:	2200      	movs	r2, #0
 8007526:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800752a:	4543      	cmp	r3, r8
 800752c:	d321      	bcc.n	8007572 <__multiply+0x96>
 800752e:	f107 0114 	add.w	r1, r7, #20
 8007532:	f104 0214 	add.w	r2, r4, #20
 8007536:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800753a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800753e:	9302      	str	r3, [sp, #8]
 8007540:	1b13      	subs	r3, r2, r4
 8007542:	3b15      	subs	r3, #21
 8007544:	f023 0303 	bic.w	r3, r3, #3
 8007548:	3304      	adds	r3, #4
 800754a:	f104 0715 	add.w	r7, r4, #21
 800754e:	42ba      	cmp	r2, r7
 8007550:	bf38      	it	cc
 8007552:	2304      	movcc	r3, #4
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	9b02      	ldr	r3, [sp, #8]
 8007558:	9103      	str	r1, [sp, #12]
 800755a:	428b      	cmp	r3, r1
 800755c:	d80c      	bhi.n	8007578 <__multiply+0x9c>
 800755e:	2e00      	cmp	r6, #0
 8007560:	dd03      	ble.n	800756a <__multiply+0x8e>
 8007562:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007566:	2b00      	cmp	r3, #0
 8007568:	d05a      	beq.n	8007620 <__multiply+0x144>
 800756a:	6106      	str	r6, [r0, #16]
 800756c:	b005      	add	sp, #20
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007572:	f843 2b04 	str.w	r2, [r3], #4
 8007576:	e7d8      	b.n	800752a <__multiply+0x4e>
 8007578:	f8b1 a000 	ldrh.w	sl, [r1]
 800757c:	f1ba 0f00 	cmp.w	sl, #0
 8007580:	d023      	beq.n	80075ca <__multiply+0xee>
 8007582:	46a9      	mov	r9, r5
 8007584:	f04f 0c00 	mov.w	ip, #0
 8007588:	f104 0e14 	add.w	lr, r4, #20
 800758c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007590:	f8d9 3000 	ldr.w	r3, [r9]
 8007594:	fa1f fb87 	uxth.w	fp, r7
 8007598:	b29b      	uxth	r3, r3
 800759a:	fb0a 330b 	mla	r3, sl, fp, r3
 800759e:	4463      	add	r3, ip
 80075a0:	f8d9 c000 	ldr.w	ip, [r9]
 80075a4:	0c3f      	lsrs	r7, r7, #16
 80075a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80075aa:	fb0a c707 	mla	r7, sl, r7, ip
 80075ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075b8:	4572      	cmp	r2, lr
 80075ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075be:	f849 3b04 	str.w	r3, [r9], #4
 80075c2:	d8e3      	bhi.n	800758c <__multiply+0xb0>
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	f845 c003 	str.w	ip, [r5, r3]
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	3104      	adds	r1, #4
 80075ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075d2:	f1b9 0f00 	cmp.w	r9, #0
 80075d6:	d021      	beq.n	800761c <__multiply+0x140>
 80075d8:	46ae      	mov	lr, r5
 80075da:	f04f 0a00 	mov.w	sl, #0
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	f104 0c14 	add.w	ip, r4, #20
 80075e4:	f8bc b000 	ldrh.w	fp, [ip]
 80075e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	fb09 770b 	mla	r7, r9, fp, r7
 80075f2:	4457      	add	r7, sl
 80075f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075f8:	f84e 3b04 	str.w	r3, [lr], #4
 80075fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007600:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007604:	f8be 3000 	ldrh.w	r3, [lr]
 8007608:	4562      	cmp	r2, ip
 800760a:	fb09 330a 	mla	r3, r9, sl, r3
 800760e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007612:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007616:	d8e5      	bhi.n	80075e4 <__multiply+0x108>
 8007618:	9f01      	ldr	r7, [sp, #4]
 800761a:	51eb      	str	r3, [r5, r7]
 800761c:	3504      	adds	r5, #4
 800761e:	e79a      	b.n	8007556 <__multiply+0x7a>
 8007620:	3e01      	subs	r6, #1
 8007622:	e79c      	b.n	800755e <__multiply+0x82>
 8007624:	0800b1a7 	.word	0x0800b1a7
 8007628:	0800b1b8 	.word	0x0800b1b8

0800762c <__pow5mult>:
 800762c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007630:	4615      	mov	r5, r2
 8007632:	f012 0203 	ands.w	r2, r2, #3
 8007636:	4607      	mov	r7, r0
 8007638:	460e      	mov	r6, r1
 800763a:	d007      	beq.n	800764c <__pow5mult+0x20>
 800763c:	4c25      	ldr	r4, [pc, #148]	@ (80076d4 <__pow5mult+0xa8>)
 800763e:	3a01      	subs	r2, #1
 8007640:	2300      	movs	r3, #0
 8007642:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007646:	f7ff fe57 	bl	80072f8 <__multadd>
 800764a:	4606      	mov	r6, r0
 800764c:	10ad      	asrs	r5, r5, #2
 800764e:	d03d      	beq.n	80076cc <__pow5mult+0xa0>
 8007650:	69fc      	ldr	r4, [r7, #28]
 8007652:	b97c      	cbnz	r4, 8007674 <__pow5mult+0x48>
 8007654:	2010      	movs	r0, #16
 8007656:	f7ff fd37 	bl	80070c8 <malloc>
 800765a:	4602      	mov	r2, r0
 800765c:	61f8      	str	r0, [r7, #28]
 800765e:	b928      	cbnz	r0, 800766c <__pow5mult+0x40>
 8007660:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007664:	4b1c      	ldr	r3, [pc, #112]	@ (80076d8 <__pow5mult+0xac>)
 8007666:	481d      	ldr	r0, [pc, #116]	@ (80076dc <__pow5mult+0xb0>)
 8007668:	f001 fd1c 	bl	80090a4 <__assert_func>
 800766c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007670:	6004      	str	r4, [r0, #0]
 8007672:	60c4      	str	r4, [r0, #12]
 8007674:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800767c:	b94c      	cbnz	r4, 8007692 <__pow5mult+0x66>
 800767e:	f240 2171 	movw	r1, #625	@ 0x271
 8007682:	4638      	mov	r0, r7
 8007684:	f7ff ff14 	bl	80074b0 <__i2b>
 8007688:	2300      	movs	r3, #0
 800768a:	4604      	mov	r4, r0
 800768c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007690:	6003      	str	r3, [r0, #0]
 8007692:	f04f 0900 	mov.w	r9, #0
 8007696:	07eb      	lsls	r3, r5, #31
 8007698:	d50a      	bpl.n	80076b0 <__pow5mult+0x84>
 800769a:	4631      	mov	r1, r6
 800769c:	4622      	mov	r2, r4
 800769e:	4638      	mov	r0, r7
 80076a0:	f7ff ff1c 	bl	80074dc <__multiply>
 80076a4:	4680      	mov	r8, r0
 80076a6:	4631      	mov	r1, r6
 80076a8:	4638      	mov	r0, r7
 80076aa:	f7ff fe03 	bl	80072b4 <_Bfree>
 80076ae:	4646      	mov	r6, r8
 80076b0:	106d      	asrs	r5, r5, #1
 80076b2:	d00b      	beq.n	80076cc <__pow5mult+0xa0>
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	b938      	cbnz	r0, 80076c8 <__pow5mult+0x9c>
 80076b8:	4622      	mov	r2, r4
 80076ba:	4621      	mov	r1, r4
 80076bc:	4638      	mov	r0, r7
 80076be:	f7ff ff0d 	bl	80074dc <__multiply>
 80076c2:	6020      	str	r0, [r4, #0]
 80076c4:	f8c0 9000 	str.w	r9, [r0]
 80076c8:	4604      	mov	r4, r0
 80076ca:	e7e4      	b.n	8007696 <__pow5mult+0x6a>
 80076cc:	4630      	mov	r0, r6
 80076ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d2:	bf00      	nop
 80076d4:	0800b214 	.word	0x0800b214
 80076d8:	0800b138 	.word	0x0800b138
 80076dc:	0800b1b8 	.word	0x0800b1b8

080076e0 <__lshift>:
 80076e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e4:	460c      	mov	r4, r1
 80076e6:	4607      	mov	r7, r0
 80076e8:	4691      	mov	r9, r2
 80076ea:	6923      	ldr	r3, [r4, #16]
 80076ec:	6849      	ldr	r1, [r1, #4]
 80076ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076f2:	68a3      	ldr	r3, [r4, #8]
 80076f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076f8:	f108 0601 	add.w	r6, r8, #1
 80076fc:	42b3      	cmp	r3, r6
 80076fe:	db0b      	blt.n	8007718 <__lshift+0x38>
 8007700:	4638      	mov	r0, r7
 8007702:	f7ff fd97 	bl	8007234 <_Balloc>
 8007706:	4605      	mov	r5, r0
 8007708:	b948      	cbnz	r0, 800771e <__lshift+0x3e>
 800770a:	4602      	mov	r2, r0
 800770c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007710:	4b27      	ldr	r3, [pc, #156]	@ (80077b0 <__lshift+0xd0>)
 8007712:	4828      	ldr	r0, [pc, #160]	@ (80077b4 <__lshift+0xd4>)
 8007714:	f001 fcc6 	bl	80090a4 <__assert_func>
 8007718:	3101      	adds	r1, #1
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	e7ee      	b.n	80076fc <__lshift+0x1c>
 800771e:	2300      	movs	r3, #0
 8007720:	f100 0114 	add.w	r1, r0, #20
 8007724:	f100 0210 	add.w	r2, r0, #16
 8007728:	4618      	mov	r0, r3
 800772a:	4553      	cmp	r3, sl
 800772c:	db33      	blt.n	8007796 <__lshift+0xb6>
 800772e:	6920      	ldr	r0, [r4, #16]
 8007730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007734:	f104 0314 	add.w	r3, r4, #20
 8007738:	f019 091f 	ands.w	r9, r9, #31
 800773c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007740:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007744:	d02b      	beq.n	800779e <__lshift+0xbe>
 8007746:	468a      	mov	sl, r1
 8007748:	2200      	movs	r2, #0
 800774a:	f1c9 0e20 	rsb	lr, r9, #32
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	fa00 f009 	lsl.w	r0, r0, r9
 8007754:	4310      	orrs	r0, r2
 8007756:	f84a 0b04 	str.w	r0, [sl], #4
 800775a:	f853 2b04 	ldr.w	r2, [r3], #4
 800775e:	459c      	cmp	ip, r3
 8007760:	fa22 f20e 	lsr.w	r2, r2, lr
 8007764:	d8f3      	bhi.n	800774e <__lshift+0x6e>
 8007766:	ebac 0304 	sub.w	r3, ip, r4
 800776a:	3b15      	subs	r3, #21
 800776c:	f023 0303 	bic.w	r3, r3, #3
 8007770:	3304      	adds	r3, #4
 8007772:	f104 0015 	add.w	r0, r4, #21
 8007776:	4584      	cmp	ip, r0
 8007778:	bf38      	it	cc
 800777a:	2304      	movcc	r3, #4
 800777c:	50ca      	str	r2, [r1, r3]
 800777e:	b10a      	cbz	r2, 8007784 <__lshift+0xa4>
 8007780:	f108 0602 	add.w	r6, r8, #2
 8007784:	3e01      	subs	r6, #1
 8007786:	4638      	mov	r0, r7
 8007788:	4621      	mov	r1, r4
 800778a:	612e      	str	r6, [r5, #16]
 800778c:	f7ff fd92 	bl	80072b4 <_Bfree>
 8007790:	4628      	mov	r0, r5
 8007792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007796:	f842 0f04 	str.w	r0, [r2, #4]!
 800779a:	3301      	adds	r3, #1
 800779c:	e7c5      	b.n	800772a <__lshift+0x4a>
 800779e:	3904      	subs	r1, #4
 80077a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a4:	459c      	cmp	ip, r3
 80077a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80077aa:	d8f9      	bhi.n	80077a0 <__lshift+0xc0>
 80077ac:	e7ea      	b.n	8007784 <__lshift+0xa4>
 80077ae:	bf00      	nop
 80077b0:	0800b1a7 	.word	0x0800b1a7
 80077b4:	0800b1b8 	.word	0x0800b1b8

080077b8 <__mcmp>:
 80077b8:	4603      	mov	r3, r0
 80077ba:	690a      	ldr	r2, [r1, #16]
 80077bc:	6900      	ldr	r0, [r0, #16]
 80077be:	b530      	push	{r4, r5, lr}
 80077c0:	1a80      	subs	r0, r0, r2
 80077c2:	d10e      	bne.n	80077e2 <__mcmp+0x2a>
 80077c4:	3314      	adds	r3, #20
 80077c6:	3114      	adds	r1, #20
 80077c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077d8:	4295      	cmp	r5, r2
 80077da:	d003      	beq.n	80077e4 <__mcmp+0x2c>
 80077dc:	d205      	bcs.n	80077ea <__mcmp+0x32>
 80077de:	f04f 30ff 	mov.w	r0, #4294967295
 80077e2:	bd30      	pop	{r4, r5, pc}
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	d3f3      	bcc.n	80077d0 <__mcmp+0x18>
 80077e8:	e7fb      	b.n	80077e2 <__mcmp+0x2a>
 80077ea:	2001      	movs	r0, #1
 80077ec:	e7f9      	b.n	80077e2 <__mcmp+0x2a>
	...

080077f0 <__mdiff>:
 80077f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	4689      	mov	r9, r1
 80077f6:	4606      	mov	r6, r0
 80077f8:	4611      	mov	r1, r2
 80077fa:	4648      	mov	r0, r9
 80077fc:	4614      	mov	r4, r2
 80077fe:	f7ff ffdb 	bl	80077b8 <__mcmp>
 8007802:	1e05      	subs	r5, r0, #0
 8007804:	d112      	bne.n	800782c <__mdiff+0x3c>
 8007806:	4629      	mov	r1, r5
 8007808:	4630      	mov	r0, r6
 800780a:	f7ff fd13 	bl	8007234 <_Balloc>
 800780e:	4602      	mov	r2, r0
 8007810:	b928      	cbnz	r0, 800781e <__mdiff+0x2e>
 8007812:	f240 2137 	movw	r1, #567	@ 0x237
 8007816:	4b3e      	ldr	r3, [pc, #248]	@ (8007910 <__mdiff+0x120>)
 8007818:	483e      	ldr	r0, [pc, #248]	@ (8007914 <__mdiff+0x124>)
 800781a:	f001 fc43 	bl	80090a4 <__assert_func>
 800781e:	2301      	movs	r3, #1
 8007820:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007824:	4610      	mov	r0, r2
 8007826:	b003      	add	sp, #12
 8007828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782c:	bfbc      	itt	lt
 800782e:	464b      	movlt	r3, r9
 8007830:	46a1      	movlt	r9, r4
 8007832:	4630      	mov	r0, r6
 8007834:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007838:	bfba      	itte	lt
 800783a:	461c      	movlt	r4, r3
 800783c:	2501      	movlt	r5, #1
 800783e:	2500      	movge	r5, #0
 8007840:	f7ff fcf8 	bl	8007234 <_Balloc>
 8007844:	4602      	mov	r2, r0
 8007846:	b918      	cbnz	r0, 8007850 <__mdiff+0x60>
 8007848:	f240 2145 	movw	r1, #581	@ 0x245
 800784c:	4b30      	ldr	r3, [pc, #192]	@ (8007910 <__mdiff+0x120>)
 800784e:	e7e3      	b.n	8007818 <__mdiff+0x28>
 8007850:	f100 0b14 	add.w	fp, r0, #20
 8007854:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007858:	f109 0310 	add.w	r3, r9, #16
 800785c:	60c5      	str	r5, [r0, #12]
 800785e:	f04f 0c00 	mov.w	ip, #0
 8007862:	f109 0514 	add.w	r5, r9, #20
 8007866:	46d9      	mov	r9, fp
 8007868:	6926      	ldr	r6, [r4, #16]
 800786a:	f104 0e14 	add.w	lr, r4, #20
 800786e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007872:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007876:	9301      	str	r3, [sp, #4]
 8007878:	9b01      	ldr	r3, [sp, #4]
 800787a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800787e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007882:	b281      	uxth	r1, r0
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	fa1f f38a 	uxth.w	r3, sl
 800788a:	1a5b      	subs	r3, r3, r1
 800788c:	0c00      	lsrs	r0, r0, #16
 800788e:	4463      	add	r3, ip
 8007890:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007894:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007898:	b29b      	uxth	r3, r3
 800789a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800789e:	4576      	cmp	r6, lr
 80078a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078a4:	f849 3b04 	str.w	r3, [r9], #4
 80078a8:	d8e6      	bhi.n	8007878 <__mdiff+0x88>
 80078aa:	1b33      	subs	r3, r6, r4
 80078ac:	3b15      	subs	r3, #21
 80078ae:	f023 0303 	bic.w	r3, r3, #3
 80078b2:	3415      	adds	r4, #21
 80078b4:	3304      	adds	r3, #4
 80078b6:	42a6      	cmp	r6, r4
 80078b8:	bf38      	it	cc
 80078ba:	2304      	movcc	r3, #4
 80078bc:	441d      	add	r5, r3
 80078be:	445b      	add	r3, fp
 80078c0:	461e      	mov	r6, r3
 80078c2:	462c      	mov	r4, r5
 80078c4:	4544      	cmp	r4, r8
 80078c6:	d30e      	bcc.n	80078e6 <__mdiff+0xf6>
 80078c8:	f108 0103 	add.w	r1, r8, #3
 80078cc:	1b49      	subs	r1, r1, r5
 80078ce:	f021 0103 	bic.w	r1, r1, #3
 80078d2:	3d03      	subs	r5, #3
 80078d4:	45a8      	cmp	r8, r5
 80078d6:	bf38      	it	cc
 80078d8:	2100      	movcc	r1, #0
 80078da:	440b      	add	r3, r1
 80078dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078e0:	b199      	cbz	r1, 800790a <__mdiff+0x11a>
 80078e2:	6117      	str	r7, [r2, #16]
 80078e4:	e79e      	b.n	8007824 <__mdiff+0x34>
 80078e6:	46e6      	mov	lr, ip
 80078e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80078ec:	fa1f fc81 	uxth.w	ip, r1
 80078f0:	44f4      	add	ip, lr
 80078f2:	0c08      	lsrs	r0, r1, #16
 80078f4:	4471      	add	r1, lr
 80078f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078fa:	b289      	uxth	r1, r1
 80078fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007900:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007904:	f846 1b04 	str.w	r1, [r6], #4
 8007908:	e7dc      	b.n	80078c4 <__mdiff+0xd4>
 800790a:	3f01      	subs	r7, #1
 800790c:	e7e6      	b.n	80078dc <__mdiff+0xec>
 800790e:	bf00      	nop
 8007910:	0800b1a7 	.word	0x0800b1a7
 8007914:	0800b1b8 	.word	0x0800b1b8

08007918 <__ulp>:
 8007918:	4b0e      	ldr	r3, [pc, #56]	@ (8007954 <__ulp+0x3c>)
 800791a:	400b      	ands	r3, r1
 800791c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc08      	bgt.n	8007936 <__ulp+0x1e>
 8007924:	425b      	negs	r3, r3
 8007926:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800792a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800792e:	da04      	bge.n	800793a <__ulp+0x22>
 8007930:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007934:	4113      	asrs	r3, r2
 8007936:	2200      	movs	r2, #0
 8007938:	e008      	b.n	800794c <__ulp+0x34>
 800793a:	f1a2 0314 	sub.w	r3, r2, #20
 800793e:	2b1e      	cmp	r3, #30
 8007940:	bfd6      	itet	le
 8007942:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007946:	2201      	movgt	r2, #1
 8007948:	40da      	lsrle	r2, r3
 800794a:	2300      	movs	r3, #0
 800794c:	4619      	mov	r1, r3
 800794e:	4610      	mov	r0, r2
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	7ff00000 	.word	0x7ff00000

08007958 <__b2d>:
 8007958:	6902      	ldr	r2, [r0, #16]
 800795a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795c:	f100 0614 	add.w	r6, r0, #20
 8007960:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007964:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007968:	4f1e      	ldr	r7, [pc, #120]	@ (80079e4 <__b2d+0x8c>)
 800796a:	4620      	mov	r0, r4
 800796c:	f7ff fd54 	bl	8007418 <__hi0bits>
 8007970:	4603      	mov	r3, r0
 8007972:	f1c0 0020 	rsb	r0, r0, #32
 8007976:	2b0a      	cmp	r3, #10
 8007978:	f1a2 0504 	sub.w	r5, r2, #4
 800797c:	6008      	str	r0, [r1, #0]
 800797e:	dc12      	bgt.n	80079a6 <__b2d+0x4e>
 8007980:	42ae      	cmp	r6, r5
 8007982:	bf2c      	ite	cs
 8007984:	2200      	movcs	r2, #0
 8007986:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800798a:	f1c3 0c0b 	rsb	ip, r3, #11
 800798e:	3315      	adds	r3, #21
 8007990:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007994:	fa04 f303 	lsl.w	r3, r4, r3
 8007998:	fa22 f20c 	lsr.w	r2, r2, ip
 800799c:	ea4e 0107 	orr.w	r1, lr, r7
 80079a0:	431a      	orrs	r2, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a6:	42ae      	cmp	r6, r5
 80079a8:	bf36      	itet	cc
 80079aa:	f1a2 0508 	subcc.w	r5, r2, #8
 80079ae:	2200      	movcs	r2, #0
 80079b0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80079b4:	3b0b      	subs	r3, #11
 80079b6:	d012      	beq.n	80079de <__b2d+0x86>
 80079b8:	f1c3 0720 	rsb	r7, r3, #32
 80079bc:	fa22 f107 	lsr.w	r1, r2, r7
 80079c0:	409c      	lsls	r4, r3
 80079c2:	430c      	orrs	r4, r1
 80079c4:	42b5      	cmp	r5, r6
 80079c6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80079ca:	bf94      	ite	ls
 80079cc:	2400      	movls	r4, #0
 80079ce:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80079d2:	409a      	lsls	r2, r3
 80079d4:	40fc      	lsrs	r4, r7
 80079d6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80079da:	4322      	orrs	r2, r4
 80079dc:	e7e1      	b.n	80079a2 <__b2d+0x4a>
 80079de:	ea44 0107 	orr.w	r1, r4, r7
 80079e2:	e7de      	b.n	80079a2 <__b2d+0x4a>
 80079e4:	3ff00000 	.word	0x3ff00000

080079e8 <__d2b>:
 80079e8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80079ec:	2101      	movs	r1, #1
 80079ee:	4690      	mov	r8, r2
 80079f0:	4699      	mov	r9, r3
 80079f2:	9e08      	ldr	r6, [sp, #32]
 80079f4:	f7ff fc1e 	bl	8007234 <_Balloc>
 80079f8:	4604      	mov	r4, r0
 80079fa:	b930      	cbnz	r0, 8007a0a <__d2b+0x22>
 80079fc:	4602      	mov	r2, r0
 80079fe:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a02:	4b23      	ldr	r3, [pc, #140]	@ (8007a90 <__d2b+0xa8>)
 8007a04:	4823      	ldr	r0, [pc, #140]	@ (8007a94 <__d2b+0xac>)
 8007a06:	f001 fb4d 	bl	80090a4 <__assert_func>
 8007a0a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a12:	b10d      	cbz	r5, 8007a18 <__d2b+0x30>
 8007a14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	f1b8 0300 	subs.w	r3, r8, #0
 8007a1e:	d024      	beq.n	8007a6a <__d2b+0x82>
 8007a20:	4668      	mov	r0, sp
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	f7ff fd17 	bl	8007456 <__lo0bits>
 8007a28:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a2c:	b1d8      	cbz	r0, 8007a66 <__d2b+0x7e>
 8007a2e:	f1c0 0320 	rsb	r3, r0, #32
 8007a32:	fa02 f303 	lsl.w	r3, r2, r3
 8007a36:	430b      	orrs	r3, r1
 8007a38:	40c2      	lsrs	r2, r0
 8007a3a:	6163      	str	r3, [r4, #20]
 8007a3c:	9201      	str	r2, [sp, #4]
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	bf0c      	ite	eq
 8007a44:	2201      	moveq	r2, #1
 8007a46:	2202      	movne	r2, #2
 8007a48:	61a3      	str	r3, [r4, #24]
 8007a4a:	6122      	str	r2, [r4, #16]
 8007a4c:	b1ad      	cbz	r5, 8007a7a <__d2b+0x92>
 8007a4e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a52:	4405      	add	r5, r0
 8007a54:	6035      	str	r5, [r6, #0]
 8007a56:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a5c:	6018      	str	r0, [r3, #0]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	b002      	add	sp, #8
 8007a62:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007a66:	6161      	str	r1, [r4, #20]
 8007a68:	e7e9      	b.n	8007a3e <__d2b+0x56>
 8007a6a:	a801      	add	r0, sp, #4
 8007a6c:	f7ff fcf3 	bl	8007456 <__lo0bits>
 8007a70:	9b01      	ldr	r3, [sp, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	6163      	str	r3, [r4, #20]
 8007a76:	3020      	adds	r0, #32
 8007a78:	e7e7      	b.n	8007a4a <__d2b+0x62>
 8007a7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a82:	6030      	str	r0, [r6, #0]
 8007a84:	6918      	ldr	r0, [r3, #16]
 8007a86:	f7ff fcc7 	bl	8007418 <__hi0bits>
 8007a8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a8e:	e7e4      	b.n	8007a5a <__d2b+0x72>
 8007a90:	0800b1a7 	.word	0x0800b1a7
 8007a94:	0800b1b8 	.word	0x0800b1b8

08007a98 <__ratio>:
 8007a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	e9cd 1000 	strd	r1, r0, [sp]
 8007aa2:	a902      	add	r1, sp, #8
 8007aa4:	f7ff ff58 	bl	8007958 <__b2d>
 8007aa8:	468b      	mov	fp, r1
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460f      	mov	r7, r1
 8007aae:	9800      	ldr	r0, [sp, #0]
 8007ab0:	a903      	add	r1, sp, #12
 8007ab2:	f7ff ff51 	bl	8007958 <__b2d>
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	9b01      	ldr	r3, [sp, #4]
 8007aba:	4689      	mov	r9, r1
 8007abc:	6919      	ldr	r1, [r3, #16]
 8007abe:	9b00      	ldr	r3, [sp, #0]
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	1ac9      	subs	r1, r1, r3
 8007ac8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bfcd      	iteet	gt
 8007ad6:	463a      	movgt	r2, r7
 8007ad8:	462a      	movle	r2, r5
 8007ada:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ade:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007ae2:	bfd8      	it	le
 8007ae4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007ae8:	464b      	mov	r3, r9
 8007aea:	4622      	mov	r2, r4
 8007aec:	4659      	mov	r1, fp
 8007aee:	f7f8 fe1d 	bl	800072c <__aeabi_ddiv>
 8007af2:	b005      	add	sp, #20
 8007af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007af8 <__copybits>:
 8007af8:	3901      	subs	r1, #1
 8007afa:	b570      	push	{r4, r5, r6, lr}
 8007afc:	1149      	asrs	r1, r1, #5
 8007afe:	6914      	ldr	r4, [r2, #16]
 8007b00:	3101      	adds	r1, #1
 8007b02:	f102 0314 	add.w	r3, r2, #20
 8007b06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b0e:	1f05      	subs	r5, r0, #4
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	d30c      	bcc.n	8007b2e <__copybits+0x36>
 8007b14:	1aa3      	subs	r3, r4, r2
 8007b16:	3b11      	subs	r3, #17
 8007b18:	f023 0303 	bic.w	r3, r3, #3
 8007b1c:	3211      	adds	r2, #17
 8007b1e:	42a2      	cmp	r2, r4
 8007b20:	bf88      	it	hi
 8007b22:	2300      	movhi	r3, #0
 8007b24:	4418      	add	r0, r3
 8007b26:	2300      	movs	r3, #0
 8007b28:	4288      	cmp	r0, r1
 8007b2a:	d305      	bcc.n	8007b38 <__copybits+0x40>
 8007b2c:	bd70      	pop	{r4, r5, r6, pc}
 8007b2e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b32:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b36:	e7eb      	b.n	8007b10 <__copybits+0x18>
 8007b38:	f840 3b04 	str.w	r3, [r0], #4
 8007b3c:	e7f4      	b.n	8007b28 <__copybits+0x30>

08007b3e <__any_on>:
 8007b3e:	f100 0214 	add.w	r2, r0, #20
 8007b42:	6900      	ldr	r0, [r0, #16]
 8007b44:	114b      	asrs	r3, r1, #5
 8007b46:	4298      	cmp	r0, r3
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	db11      	blt.n	8007b70 <__any_on+0x32>
 8007b4c:	dd0a      	ble.n	8007b64 <__any_on+0x26>
 8007b4e:	f011 011f 	ands.w	r1, r1, #31
 8007b52:	d007      	beq.n	8007b64 <__any_on+0x26>
 8007b54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b58:	fa24 f001 	lsr.w	r0, r4, r1
 8007b5c:	fa00 f101 	lsl.w	r1, r0, r1
 8007b60:	428c      	cmp	r4, r1
 8007b62:	d10b      	bne.n	8007b7c <__any_on+0x3e>
 8007b64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d803      	bhi.n	8007b74 <__any_on+0x36>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	bd10      	pop	{r4, pc}
 8007b70:	4603      	mov	r3, r0
 8007b72:	e7f7      	b.n	8007b64 <__any_on+0x26>
 8007b74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b78:	2900      	cmp	r1, #0
 8007b7a:	d0f5      	beq.n	8007b68 <__any_on+0x2a>
 8007b7c:	2001      	movs	r0, #1
 8007b7e:	e7f6      	b.n	8007b6e <__any_on+0x30>

08007b80 <sulp>:
 8007b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b84:	460f      	mov	r7, r1
 8007b86:	4690      	mov	r8, r2
 8007b88:	f7ff fec6 	bl	8007918 <__ulp>
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	f1b8 0f00 	cmp.w	r8, #0
 8007b94:	d011      	beq.n	8007bba <sulp+0x3a>
 8007b96:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007b9a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	dd0b      	ble.n	8007bba <sulp+0x3a>
 8007ba2:	2400      	movs	r4, #0
 8007ba4:	051b      	lsls	r3, r3, #20
 8007ba6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007baa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007bae:	4622      	mov	r2, r4
 8007bb0:	462b      	mov	r3, r5
 8007bb2:	f7f8 fc91 	bl	80004d8 <__aeabi_dmul>
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	460d      	mov	r5, r1
 8007bba:	4620      	mov	r0, r4
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc2:	0000      	movs	r0, r0
 8007bc4:	0000      	movs	r0, r0
	...

08007bc8 <_strtod_l>:
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	b09f      	sub	sp, #124	@ 0x7c
 8007bce:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	921a      	str	r2, [sp, #104]	@ 0x68
 8007bd6:	f04f 0a00 	mov.w	sl, #0
 8007bda:	f04f 0b00 	mov.w	fp, #0
 8007bde:	460a      	mov	r2, r1
 8007be0:	9005      	str	r0, [sp, #20]
 8007be2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007be4:	7811      	ldrb	r1, [r2, #0]
 8007be6:	292b      	cmp	r1, #43	@ 0x2b
 8007be8:	d048      	beq.n	8007c7c <_strtod_l+0xb4>
 8007bea:	d836      	bhi.n	8007c5a <_strtod_l+0x92>
 8007bec:	290d      	cmp	r1, #13
 8007bee:	d830      	bhi.n	8007c52 <_strtod_l+0x8a>
 8007bf0:	2908      	cmp	r1, #8
 8007bf2:	d830      	bhi.n	8007c56 <_strtod_l+0x8e>
 8007bf4:	2900      	cmp	r1, #0
 8007bf6:	d039      	beq.n	8007c6c <_strtod_l+0xa4>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007bfc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007bfe:	782a      	ldrb	r2, [r5, #0]
 8007c00:	2a30      	cmp	r2, #48	@ 0x30
 8007c02:	f040 80b1 	bne.w	8007d68 <_strtod_l+0x1a0>
 8007c06:	786a      	ldrb	r2, [r5, #1]
 8007c08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c0c:	2a58      	cmp	r2, #88	@ 0x58
 8007c0e:	d16c      	bne.n	8007cea <_strtod_l+0x122>
 8007c10:	9302      	str	r3, [sp, #8]
 8007c12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c14:	4a8e      	ldr	r2, [pc, #568]	@ (8007e50 <_strtod_l+0x288>)
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	ab1a      	add	r3, sp, #104	@ 0x68
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	9805      	ldr	r0, [sp, #20]
 8007c1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007c20:	a919      	add	r1, sp, #100	@ 0x64
 8007c22:	f001 fad9 	bl	80091d8 <__gethex>
 8007c26:	f010 060f 	ands.w	r6, r0, #15
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	d005      	beq.n	8007c3a <_strtod_l+0x72>
 8007c2e:	2e06      	cmp	r6, #6
 8007c30:	d126      	bne.n	8007c80 <_strtod_l+0xb8>
 8007c32:	2300      	movs	r3, #0
 8007c34:	3501      	adds	r5, #1
 8007c36:	9519      	str	r5, [sp, #100]	@ 0x64
 8007c38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f040 8584 	bne.w	800874a <_strtod_l+0xb82>
 8007c42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c44:	b1bb      	cbz	r3, 8007c76 <_strtod_l+0xae>
 8007c46:	4650      	mov	r0, sl
 8007c48:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007c4c:	b01f      	add	sp, #124	@ 0x7c
 8007c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c52:	2920      	cmp	r1, #32
 8007c54:	d1d0      	bne.n	8007bf8 <_strtod_l+0x30>
 8007c56:	3201      	adds	r2, #1
 8007c58:	e7c3      	b.n	8007be2 <_strtod_l+0x1a>
 8007c5a:	292d      	cmp	r1, #45	@ 0x2d
 8007c5c:	d1cc      	bne.n	8007bf8 <_strtod_l+0x30>
 8007c5e:	2101      	movs	r1, #1
 8007c60:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c62:	1c51      	adds	r1, r2, #1
 8007c64:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c66:	7852      	ldrb	r2, [r2, #1]
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	d1c7      	bne.n	8007bfc <_strtod_l+0x34>
 8007c6c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c6e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f040 8568 	bne.w	8008746 <_strtod_l+0xb7e>
 8007c76:	4650      	mov	r0, sl
 8007c78:	4659      	mov	r1, fp
 8007c7a:	e7e7      	b.n	8007c4c <_strtod_l+0x84>
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	e7ef      	b.n	8007c60 <_strtod_l+0x98>
 8007c80:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c82:	b13a      	cbz	r2, 8007c94 <_strtod_l+0xcc>
 8007c84:	2135      	movs	r1, #53	@ 0x35
 8007c86:	a81c      	add	r0, sp, #112	@ 0x70
 8007c88:	f7ff ff36 	bl	8007af8 <__copybits>
 8007c8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c8e:	9805      	ldr	r0, [sp, #20]
 8007c90:	f7ff fb10 	bl	80072b4 <_Bfree>
 8007c94:	3e01      	subs	r6, #1
 8007c96:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007c98:	2e04      	cmp	r6, #4
 8007c9a:	d806      	bhi.n	8007caa <_strtod_l+0xe2>
 8007c9c:	e8df f006 	tbb	[pc, r6]
 8007ca0:	201d0314 	.word	0x201d0314
 8007ca4:	14          	.byte	0x14
 8007ca5:	00          	.byte	0x00
 8007ca6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007caa:	05e1      	lsls	r1, r4, #23
 8007cac:	bf48      	it	mi
 8007cae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007cb2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cb6:	0d1b      	lsrs	r3, r3, #20
 8007cb8:	051b      	lsls	r3, r3, #20
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1bd      	bne.n	8007c3a <_strtod_l+0x72>
 8007cbe:	f7fe fb29 	bl	8006314 <__errno>
 8007cc2:	2322      	movs	r3, #34	@ 0x22
 8007cc4:	6003      	str	r3, [r0, #0]
 8007cc6:	e7b8      	b.n	8007c3a <_strtod_l+0x72>
 8007cc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007ccc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007cd0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007cd4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007cd8:	e7e7      	b.n	8007caa <_strtod_l+0xe2>
 8007cda:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007e54 <_strtod_l+0x28c>
 8007cde:	e7e4      	b.n	8007caa <_strtod_l+0xe2>
 8007ce0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007ce4:	f04f 3aff 	mov.w	sl, #4294967295
 8007ce8:	e7df      	b.n	8007caa <_strtod_l+0xe2>
 8007cea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	2b30      	cmp	r3, #48	@ 0x30
 8007cf4:	d0f9      	beq.n	8007cea <_strtod_l+0x122>
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d09f      	beq.n	8007c3a <_strtod_l+0x72>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d00:	220a      	movs	r2, #10
 8007d02:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d04:	2300      	movs	r3, #0
 8007d06:	461f      	mov	r7, r3
 8007d08:	9308      	str	r3, [sp, #32]
 8007d0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d0c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007d0e:	7805      	ldrb	r5, [r0, #0]
 8007d10:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007d14:	b2d9      	uxtb	r1, r3
 8007d16:	2909      	cmp	r1, #9
 8007d18:	d928      	bls.n	8007d6c <_strtod_l+0x1a4>
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	494e      	ldr	r1, [pc, #312]	@ (8007e58 <_strtod_l+0x290>)
 8007d1e:	f001 f968 	bl	8008ff2 <strncmp>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d032      	beq.n	8007d8c <_strtod_l+0x1c4>
 8007d26:	2000      	movs	r0, #0
 8007d28:	462a      	mov	r2, r5
 8007d2a:	4681      	mov	r9, r0
 8007d2c:	463d      	mov	r5, r7
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2a65      	cmp	r2, #101	@ 0x65
 8007d32:	d001      	beq.n	8007d38 <_strtod_l+0x170>
 8007d34:	2a45      	cmp	r2, #69	@ 0x45
 8007d36:	d114      	bne.n	8007d62 <_strtod_l+0x19a>
 8007d38:	b91d      	cbnz	r5, 8007d42 <_strtod_l+0x17a>
 8007d3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d3c:	4302      	orrs	r2, r0
 8007d3e:	d095      	beq.n	8007c6c <_strtod_l+0xa4>
 8007d40:	2500      	movs	r5, #0
 8007d42:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007d44:	1c62      	adds	r2, r4, #1
 8007d46:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d48:	7862      	ldrb	r2, [r4, #1]
 8007d4a:	2a2b      	cmp	r2, #43	@ 0x2b
 8007d4c:	d077      	beq.n	8007e3e <_strtod_l+0x276>
 8007d4e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007d50:	d07b      	beq.n	8007e4a <_strtod_l+0x282>
 8007d52:	f04f 0c00 	mov.w	ip, #0
 8007d56:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007d5a:	2909      	cmp	r1, #9
 8007d5c:	f240 8082 	bls.w	8007e64 <_strtod_l+0x29c>
 8007d60:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d62:	f04f 0800 	mov.w	r8, #0
 8007d66:	e0a2      	b.n	8007eae <_strtod_l+0x2e6>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e7c7      	b.n	8007cfc <_strtod_l+0x134>
 8007d6c:	2f08      	cmp	r7, #8
 8007d6e:	bfd5      	itete	le
 8007d70:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007d72:	9908      	ldrgt	r1, [sp, #32]
 8007d74:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d78:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007d7c:	f100 0001 	add.w	r0, r0, #1
 8007d80:	bfd4      	ite	le
 8007d82:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007d84:	9308      	strgt	r3, [sp, #32]
 8007d86:	3701      	adds	r7, #1
 8007d88:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d8a:	e7bf      	b.n	8007d0c <_strtod_l+0x144>
 8007d8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d92:	785a      	ldrb	r2, [r3, #1]
 8007d94:	b37f      	cbz	r7, 8007df6 <_strtod_l+0x22e>
 8007d96:	4681      	mov	r9, r0
 8007d98:	463d      	mov	r5, r7
 8007d9a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007d9e:	2b09      	cmp	r3, #9
 8007da0:	d912      	bls.n	8007dc8 <_strtod_l+0x200>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e7c4      	b.n	8007d30 <_strtod_l+0x168>
 8007da6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007da8:	3001      	adds	r0, #1
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dae:	785a      	ldrb	r2, [r3, #1]
 8007db0:	2a30      	cmp	r2, #48	@ 0x30
 8007db2:	d0f8      	beq.n	8007da6 <_strtod_l+0x1de>
 8007db4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	f200 84cb 	bhi.w	8008754 <_strtod_l+0xb8c>
 8007dbe:	4681      	mov	r9, r0
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dc6:	930c      	str	r3, [sp, #48]	@ 0x30
 8007dc8:	3a30      	subs	r2, #48	@ 0x30
 8007dca:	f100 0301 	add.w	r3, r0, #1
 8007dce:	d02a      	beq.n	8007e26 <_strtod_l+0x25e>
 8007dd0:	4499      	add	r9, r3
 8007dd2:	210a      	movs	r1, #10
 8007dd4:	462b      	mov	r3, r5
 8007dd6:	eb00 0c05 	add.w	ip, r0, r5
 8007dda:	4563      	cmp	r3, ip
 8007ddc:	d10d      	bne.n	8007dfa <_strtod_l+0x232>
 8007dde:	1c69      	adds	r1, r5, #1
 8007de0:	4401      	add	r1, r0
 8007de2:	4428      	add	r0, r5
 8007de4:	2808      	cmp	r0, #8
 8007de6:	dc16      	bgt.n	8007e16 <_strtod_l+0x24e>
 8007de8:	230a      	movs	r3, #10
 8007dea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007dec:	fb03 2300 	mla	r3, r3, r0, r2
 8007df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007df2:	2300      	movs	r3, #0
 8007df4:	e018      	b.n	8007e28 <_strtod_l+0x260>
 8007df6:	4638      	mov	r0, r7
 8007df8:	e7da      	b.n	8007db0 <_strtod_l+0x1e8>
 8007dfa:	2b08      	cmp	r3, #8
 8007dfc:	f103 0301 	add.w	r3, r3, #1
 8007e00:	dc03      	bgt.n	8007e0a <_strtod_l+0x242>
 8007e02:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007e04:	434e      	muls	r6, r1
 8007e06:	960a      	str	r6, [sp, #40]	@ 0x28
 8007e08:	e7e7      	b.n	8007dda <_strtod_l+0x212>
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	bfde      	ittt	le
 8007e0e:	9e08      	ldrle	r6, [sp, #32]
 8007e10:	434e      	mulle	r6, r1
 8007e12:	9608      	strle	r6, [sp, #32]
 8007e14:	e7e1      	b.n	8007dda <_strtod_l+0x212>
 8007e16:	280f      	cmp	r0, #15
 8007e18:	dceb      	bgt.n	8007df2 <_strtod_l+0x22a>
 8007e1a:	230a      	movs	r3, #10
 8007e1c:	9808      	ldr	r0, [sp, #32]
 8007e1e:	fb03 2300 	mla	r3, r3, r0, r2
 8007e22:	9308      	str	r3, [sp, #32]
 8007e24:	e7e5      	b.n	8007df2 <_strtod_l+0x22a>
 8007e26:	4629      	mov	r1, r5
 8007e28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	1c50      	adds	r0, r2, #1
 8007e2e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e30:	7852      	ldrb	r2, [r2, #1]
 8007e32:	4618      	mov	r0, r3
 8007e34:	e7b1      	b.n	8007d9a <_strtod_l+0x1d2>
 8007e36:	f04f 0900 	mov.w	r9, #0
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e77d      	b.n	8007d3a <_strtod_l+0x172>
 8007e3e:	f04f 0c00 	mov.w	ip, #0
 8007e42:	1ca2      	adds	r2, r4, #2
 8007e44:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e46:	78a2      	ldrb	r2, [r4, #2]
 8007e48:	e785      	b.n	8007d56 <_strtod_l+0x18e>
 8007e4a:	f04f 0c01 	mov.w	ip, #1
 8007e4e:	e7f8      	b.n	8007e42 <_strtod_l+0x27a>
 8007e50:	0800b328 	.word	0x0800b328
 8007e54:	7ff00000 	.word	0x7ff00000
 8007e58:	0800b310 	.word	0x0800b310
 8007e5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e5e:	1c51      	adds	r1, r2, #1
 8007e60:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e62:	7852      	ldrb	r2, [r2, #1]
 8007e64:	2a30      	cmp	r2, #48	@ 0x30
 8007e66:	d0f9      	beq.n	8007e5c <_strtod_l+0x294>
 8007e68:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007e6c:	2908      	cmp	r1, #8
 8007e6e:	f63f af78 	bhi.w	8007d62 <_strtod_l+0x19a>
 8007e72:	f04f 080a 	mov.w	r8, #10
 8007e76:	3a30      	subs	r2, #48	@ 0x30
 8007e78:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e80:	1c56      	adds	r6, r2, #1
 8007e82:	9619      	str	r6, [sp, #100]	@ 0x64
 8007e84:	7852      	ldrb	r2, [r2, #1]
 8007e86:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007e8a:	f1be 0f09 	cmp.w	lr, #9
 8007e8e:	d939      	bls.n	8007f04 <_strtod_l+0x33c>
 8007e90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007e92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007e96:	1a76      	subs	r6, r6, r1
 8007e98:	2e08      	cmp	r6, #8
 8007e9a:	dc03      	bgt.n	8007ea4 <_strtod_l+0x2dc>
 8007e9c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e9e:	4588      	cmp	r8, r1
 8007ea0:	bfa8      	it	ge
 8007ea2:	4688      	movge	r8, r1
 8007ea4:	f1bc 0f00 	cmp.w	ip, #0
 8007ea8:	d001      	beq.n	8007eae <_strtod_l+0x2e6>
 8007eaa:	f1c8 0800 	rsb	r8, r8, #0
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	d14e      	bne.n	8007f50 <_strtod_l+0x388>
 8007eb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007eb4:	4308      	orrs	r0, r1
 8007eb6:	f47f aec0 	bne.w	8007c3a <_strtod_l+0x72>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f47f aed6 	bne.w	8007c6c <_strtod_l+0xa4>
 8007ec0:	2a69      	cmp	r2, #105	@ 0x69
 8007ec2:	d028      	beq.n	8007f16 <_strtod_l+0x34e>
 8007ec4:	dc25      	bgt.n	8007f12 <_strtod_l+0x34a>
 8007ec6:	2a49      	cmp	r2, #73	@ 0x49
 8007ec8:	d025      	beq.n	8007f16 <_strtod_l+0x34e>
 8007eca:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ecc:	f47f aece 	bne.w	8007c6c <_strtod_l+0xa4>
 8007ed0:	499a      	ldr	r1, [pc, #616]	@ (800813c <_strtod_l+0x574>)
 8007ed2:	a819      	add	r0, sp, #100	@ 0x64
 8007ed4:	f001 fba2 	bl	800961c <__match>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	f43f aec7 	beq.w	8007c6c <_strtod_l+0xa4>
 8007ede:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b28      	cmp	r3, #40	@ 0x28
 8007ee4:	d12e      	bne.n	8007f44 <_strtod_l+0x37c>
 8007ee6:	4996      	ldr	r1, [pc, #600]	@ (8008140 <_strtod_l+0x578>)
 8007ee8:	aa1c      	add	r2, sp, #112	@ 0x70
 8007eea:	a819      	add	r0, sp, #100	@ 0x64
 8007eec:	f001 fbaa 	bl	8009644 <__hexnan>
 8007ef0:	2805      	cmp	r0, #5
 8007ef2:	d127      	bne.n	8007f44 <_strtod_l+0x37c>
 8007ef4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ef6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007efa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007efe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007f02:	e69a      	b.n	8007c3a <_strtod_l+0x72>
 8007f04:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007f06:	fb08 2101 	mla	r1, r8, r1, r2
 8007f0a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007f0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f10:	e7b5      	b.n	8007e7e <_strtod_l+0x2b6>
 8007f12:	2a6e      	cmp	r2, #110	@ 0x6e
 8007f14:	e7da      	b.n	8007ecc <_strtod_l+0x304>
 8007f16:	498b      	ldr	r1, [pc, #556]	@ (8008144 <_strtod_l+0x57c>)
 8007f18:	a819      	add	r0, sp, #100	@ 0x64
 8007f1a:	f001 fb7f 	bl	800961c <__match>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f43f aea4 	beq.w	8007c6c <_strtod_l+0xa4>
 8007f24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f26:	4988      	ldr	r1, [pc, #544]	@ (8008148 <_strtod_l+0x580>)
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	a819      	add	r0, sp, #100	@ 0x64
 8007f2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f2e:	f001 fb75 	bl	800961c <__match>
 8007f32:	b910      	cbnz	r0, 8007f3a <_strtod_l+0x372>
 8007f34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f36:	3301      	adds	r3, #1
 8007f38:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f3a:	f04f 0a00 	mov.w	sl, #0
 8007f3e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800814c <_strtod_l+0x584>
 8007f42:	e67a      	b.n	8007c3a <_strtod_l+0x72>
 8007f44:	4882      	ldr	r0, [pc, #520]	@ (8008150 <_strtod_l+0x588>)
 8007f46:	f001 f8a7 	bl	8009098 <nan>
 8007f4a:	4682      	mov	sl, r0
 8007f4c:	468b      	mov	fp, r1
 8007f4e:	e674      	b.n	8007c3a <_strtod_l+0x72>
 8007f50:	eba8 0309 	sub.w	r3, r8, r9
 8007f54:	2f00      	cmp	r7, #0
 8007f56:	bf08      	it	eq
 8007f58:	462f      	moveq	r7, r5
 8007f5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f5c:	2d10      	cmp	r5, #16
 8007f5e:	462c      	mov	r4, r5
 8007f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f62:	bfa8      	it	ge
 8007f64:	2410      	movge	r4, #16
 8007f66:	f7f8 fa3d 	bl	80003e4 <__aeabi_ui2d>
 8007f6a:	2d09      	cmp	r5, #9
 8007f6c:	4682      	mov	sl, r0
 8007f6e:	468b      	mov	fp, r1
 8007f70:	dc11      	bgt.n	8007f96 <_strtod_l+0x3ce>
 8007f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f43f ae60 	beq.w	8007c3a <_strtod_l+0x72>
 8007f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7c:	dd76      	ble.n	800806c <_strtod_l+0x4a4>
 8007f7e:	2b16      	cmp	r3, #22
 8007f80:	dc5d      	bgt.n	800803e <_strtod_l+0x476>
 8007f82:	4974      	ldr	r1, [pc, #464]	@ (8008154 <_strtod_l+0x58c>)
 8007f84:	4652      	mov	r2, sl
 8007f86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f8a:	465b      	mov	r3, fp
 8007f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f90:	f7f8 faa2 	bl	80004d8 <__aeabi_dmul>
 8007f94:	e7d9      	b.n	8007f4a <_strtod_l+0x382>
 8007f96:	4b6f      	ldr	r3, [pc, #444]	@ (8008154 <_strtod_l+0x58c>)
 8007f98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007fa0:	f7f8 fa9a 	bl	80004d8 <__aeabi_dmul>
 8007fa4:	4682      	mov	sl, r0
 8007fa6:	9808      	ldr	r0, [sp, #32]
 8007fa8:	468b      	mov	fp, r1
 8007faa:	f7f8 fa1b 	bl	80003e4 <__aeabi_ui2d>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4650      	mov	r0, sl
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	f7f8 f8d9 	bl	800016c <__adddf3>
 8007fba:	2d0f      	cmp	r5, #15
 8007fbc:	4682      	mov	sl, r0
 8007fbe:	468b      	mov	fp, r1
 8007fc0:	ddd7      	ble.n	8007f72 <_strtod_l+0x3aa>
 8007fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc4:	1b2c      	subs	r4, r5, r4
 8007fc6:	441c      	add	r4, r3
 8007fc8:	2c00      	cmp	r4, #0
 8007fca:	f340 8096 	ble.w	80080fa <_strtod_l+0x532>
 8007fce:	f014 030f 	ands.w	r3, r4, #15
 8007fd2:	d00a      	beq.n	8007fea <_strtod_l+0x422>
 8007fd4:	495f      	ldr	r1, [pc, #380]	@ (8008154 <_strtod_l+0x58c>)
 8007fd6:	4652      	mov	r2, sl
 8007fd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fe0:	465b      	mov	r3, fp
 8007fe2:	f7f8 fa79 	bl	80004d8 <__aeabi_dmul>
 8007fe6:	4682      	mov	sl, r0
 8007fe8:	468b      	mov	fp, r1
 8007fea:	f034 040f 	bics.w	r4, r4, #15
 8007fee:	d073      	beq.n	80080d8 <_strtod_l+0x510>
 8007ff0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007ff4:	dd48      	ble.n	8008088 <_strtod_l+0x4c0>
 8007ff6:	2400      	movs	r4, #0
 8007ff8:	46a0      	mov	r8, r4
 8007ffa:	46a1      	mov	r9, r4
 8007ffc:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ffe:	2322      	movs	r3, #34	@ 0x22
 8008000:	f04f 0a00 	mov.w	sl, #0
 8008004:	9a05      	ldr	r2, [sp, #20]
 8008006:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800814c <_strtod_l+0x584>
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	f43f ae13 	beq.w	8007c3a <_strtod_l+0x72>
 8008014:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008016:	9805      	ldr	r0, [sp, #20]
 8008018:	f7ff f94c 	bl	80072b4 <_Bfree>
 800801c:	4649      	mov	r1, r9
 800801e:	9805      	ldr	r0, [sp, #20]
 8008020:	f7ff f948 	bl	80072b4 <_Bfree>
 8008024:	4641      	mov	r1, r8
 8008026:	9805      	ldr	r0, [sp, #20]
 8008028:	f7ff f944 	bl	80072b4 <_Bfree>
 800802c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800802e:	9805      	ldr	r0, [sp, #20]
 8008030:	f7ff f940 	bl	80072b4 <_Bfree>
 8008034:	4621      	mov	r1, r4
 8008036:	9805      	ldr	r0, [sp, #20]
 8008038:	f7ff f93c 	bl	80072b4 <_Bfree>
 800803c:	e5fd      	b.n	8007c3a <_strtod_l+0x72>
 800803e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008040:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008044:	4293      	cmp	r3, r2
 8008046:	dbbc      	blt.n	8007fc2 <_strtod_l+0x3fa>
 8008048:	4c42      	ldr	r4, [pc, #264]	@ (8008154 <_strtod_l+0x58c>)
 800804a:	f1c5 050f 	rsb	r5, r5, #15
 800804e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008052:	4652      	mov	r2, sl
 8008054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008058:	465b      	mov	r3, fp
 800805a:	f7f8 fa3d 	bl	80004d8 <__aeabi_dmul>
 800805e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008060:	1b5d      	subs	r5, r3, r5
 8008062:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008066:	e9d4 2300 	ldrd	r2, r3, [r4]
 800806a:	e791      	b.n	8007f90 <_strtod_l+0x3c8>
 800806c:	3316      	adds	r3, #22
 800806e:	dba8      	blt.n	8007fc2 <_strtod_l+0x3fa>
 8008070:	4b38      	ldr	r3, [pc, #224]	@ (8008154 <_strtod_l+0x58c>)
 8008072:	eba9 0808 	sub.w	r8, r9, r8
 8008076:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800807a:	4650      	mov	r0, sl
 800807c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008080:	4659      	mov	r1, fp
 8008082:	f7f8 fb53 	bl	800072c <__aeabi_ddiv>
 8008086:	e760      	b.n	8007f4a <_strtod_l+0x382>
 8008088:	4b33      	ldr	r3, [pc, #204]	@ (8008158 <_strtod_l+0x590>)
 800808a:	4650      	mov	r0, sl
 800808c:	9308      	str	r3, [sp, #32]
 800808e:	2300      	movs	r3, #0
 8008090:	4659      	mov	r1, fp
 8008092:	461e      	mov	r6, r3
 8008094:	1124      	asrs	r4, r4, #4
 8008096:	2c01      	cmp	r4, #1
 8008098:	dc21      	bgt.n	80080de <_strtod_l+0x516>
 800809a:	b10b      	cbz	r3, 80080a0 <_strtod_l+0x4d8>
 800809c:	4682      	mov	sl, r0
 800809e:	468b      	mov	fp, r1
 80080a0:	492d      	ldr	r1, [pc, #180]	@ (8008158 <_strtod_l+0x590>)
 80080a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80080a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80080aa:	4652      	mov	r2, sl
 80080ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080b0:	465b      	mov	r3, fp
 80080b2:	f7f8 fa11 	bl	80004d8 <__aeabi_dmul>
 80080b6:	4b25      	ldr	r3, [pc, #148]	@ (800814c <_strtod_l+0x584>)
 80080b8:	460a      	mov	r2, r1
 80080ba:	400b      	ands	r3, r1
 80080bc:	4927      	ldr	r1, [pc, #156]	@ (800815c <_strtod_l+0x594>)
 80080be:	4682      	mov	sl, r0
 80080c0:	428b      	cmp	r3, r1
 80080c2:	d898      	bhi.n	8007ff6 <_strtod_l+0x42e>
 80080c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80080c8:	428b      	cmp	r3, r1
 80080ca:	bf86      	itte	hi
 80080cc:	f04f 3aff 	movhi.w	sl, #4294967295
 80080d0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008160 <_strtod_l+0x598>
 80080d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80080d8:	2300      	movs	r3, #0
 80080da:	9308      	str	r3, [sp, #32]
 80080dc:	e07a      	b.n	80081d4 <_strtod_l+0x60c>
 80080de:	07e2      	lsls	r2, r4, #31
 80080e0:	d505      	bpl.n	80080ee <_strtod_l+0x526>
 80080e2:	9b08      	ldr	r3, [sp, #32]
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f9f6 	bl	80004d8 <__aeabi_dmul>
 80080ec:	2301      	movs	r3, #1
 80080ee:	9a08      	ldr	r2, [sp, #32]
 80080f0:	3601      	adds	r6, #1
 80080f2:	3208      	adds	r2, #8
 80080f4:	1064      	asrs	r4, r4, #1
 80080f6:	9208      	str	r2, [sp, #32]
 80080f8:	e7cd      	b.n	8008096 <_strtod_l+0x4ce>
 80080fa:	d0ed      	beq.n	80080d8 <_strtod_l+0x510>
 80080fc:	4264      	negs	r4, r4
 80080fe:	f014 020f 	ands.w	r2, r4, #15
 8008102:	d00a      	beq.n	800811a <_strtod_l+0x552>
 8008104:	4b13      	ldr	r3, [pc, #76]	@ (8008154 <_strtod_l+0x58c>)
 8008106:	4650      	mov	r0, sl
 8008108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800810c:	4659      	mov	r1, fp
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	f7f8 fb0b 	bl	800072c <__aeabi_ddiv>
 8008116:	4682      	mov	sl, r0
 8008118:	468b      	mov	fp, r1
 800811a:	1124      	asrs	r4, r4, #4
 800811c:	d0dc      	beq.n	80080d8 <_strtod_l+0x510>
 800811e:	2c1f      	cmp	r4, #31
 8008120:	dd20      	ble.n	8008164 <_strtod_l+0x59c>
 8008122:	2400      	movs	r4, #0
 8008124:	46a0      	mov	r8, r4
 8008126:	46a1      	mov	r9, r4
 8008128:	940a      	str	r4, [sp, #40]	@ 0x28
 800812a:	2322      	movs	r3, #34	@ 0x22
 800812c:	9a05      	ldr	r2, [sp, #20]
 800812e:	f04f 0a00 	mov.w	sl, #0
 8008132:	f04f 0b00 	mov.w	fp, #0
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	e768      	b.n	800800c <_strtod_l+0x444>
 800813a:	bf00      	nop
 800813c:	0800b0ff 	.word	0x0800b0ff
 8008140:	0800b314 	.word	0x0800b314
 8008144:	0800b0f7 	.word	0x0800b0f7
 8008148:	0800b12e 	.word	0x0800b12e
 800814c:	7ff00000 	.word	0x7ff00000
 8008150:	0800b4bd 	.word	0x0800b4bd
 8008154:	0800b248 	.word	0x0800b248
 8008158:	0800b220 	.word	0x0800b220
 800815c:	7ca00000 	.word	0x7ca00000
 8008160:	7fefffff 	.word	0x7fefffff
 8008164:	f014 0310 	ands.w	r3, r4, #16
 8008168:	bf18      	it	ne
 800816a:	236a      	movne	r3, #106	@ 0x6a
 800816c:	4650      	mov	r0, sl
 800816e:	9308      	str	r3, [sp, #32]
 8008170:	4659      	mov	r1, fp
 8008172:	2300      	movs	r3, #0
 8008174:	4ea9      	ldr	r6, [pc, #676]	@ (800841c <_strtod_l+0x854>)
 8008176:	07e2      	lsls	r2, r4, #31
 8008178:	d504      	bpl.n	8008184 <_strtod_l+0x5bc>
 800817a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800817e:	f7f8 f9ab 	bl	80004d8 <__aeabi_dmul>
 8008182:	2301      	movs	r3, #1
 8008184:	1064      	asrs	r4, r4, #1
 8008186:	f106 0608 	add.w	r6, r6, #8
 800818a:	d1f4      	bne.n	8008176 <_strtod_l+0x5ae>
 800818c:	b10b      	cbz	r3, 8008192 <_strtod_l+0x5ca>
 800818e:	4682      	mov	sl, r0
 8008190:	468b      	mov	fp, r1
 8008192:	9b08      	ldr	r3, [sp, #32]
 8008194:	b1b3      	cbz	r3, 80081c4 <_strtod_l+0x5fc>
 8008196:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800819a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800819e:	2b00      	cmp	r3, #0
 80081a0:	4659      	mov	r1, fp
 80081a2:	dd0f      	ble.n	80081c4 <_strtod_l+0x5fc>
 80081a4:	2b1f      	cmp	r3, #31
 80081a6:	dd57      	ble.n	8008258 <_strtod_l+0x690>
 80081a8:	2b34      	cmp	r3, #52	@ 0x34
 80081aa:	bfd8      	it	le
 80081ac:	f04f 33ff 	movle.w	r3, #4294967295
 80081b0:	f04f 0a00 	mov.w	sl, #0
 80081b4:	bfcf      	iteee	gt
 80081b6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80081ba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80081be:	4093      	lslle	r3, r2
 80081c0:	ea03 0b01 	andle.w	fp, r3, r1
 80081c4:	2200      	movs	r2, #0
 80081c6:	2300      	movs	r3, #0
 80081c8:	4650      	mov	r0, sl
 80081ca:	4659      	mov	r1, fp
 80081cc:	f7f8 fbec 	bl	80009a8 <__aeabi_dcmpeq>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1a6      	bne.n	8008122 <_strtod_l+0x55a>
 80081d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081d6:	463a      	mov	r2, r7
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80081dc:	462b      	mov	r3, r5
 80081de:	9805      	ldr	r0, [sp, #20]
 80081e0:	f7ff f8d0 	bl	8007384 <__s2b>
 80081e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f43f af05 	beq.w	8007ff6 <_strtod_l+0x42e>
 80081ec:	2400      	movs	r4, #0
 80081ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081f0:	eba9 0308 	sub.w	r3, r9, r8
 80081f4:	2a00      	cmp	r2, #0
 80081f6:	bfa8      	it	ge
 80081f8:	2300      	movge	r3, #0
 80081fa:	46a0      	mov	r8, r4
 80081fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80081fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008202:	9316      	str	r3, [sp, #88]	@ 0x58
 8008204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008206:	9805      	ldr	r0, [sp, #20]
 8008208:	6859      	ldr	r1, [r3, #4]
 800820a:	f7ff f813 	bl	8007234 <_Balloc>
 800820e:	4681      	mov	r9, r0
 8008210:	2800      	cmp	r0, #0
 8008212:	f43f aef4 	beq.w	8007ffe <_strtod_l+0x436>
 8008216:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008218:	300c      	adds	r0, #12
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	f103 010c 	add.w	r1, r3, #12
 8008220:	3202      	adds	r2, #2
 8008222:	0092      	lsls	r2, r2, #2
 8008224:	f000 ff2a 	bl	800907c <memcpy>
 8008228:	ab1c      	add	r3, sp, #112	@ 0x70
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	4652      	mov	r2, sl
 8008232:	465b      	mov	r3, fp
 8008234:	9805      	ldr	r0, [sp, #20]
 8008236:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800823a:	f7ff fbd5 	bl	80079e8 <__d2b>
 800823e:	901a      	str	r0, [sp, #104]	@ 0x68
 8008240:	2800      	cmp	r0, #0
 8008242:	f43f aedc 	beq.w	8007ffe <_strtod_l+0x436>
 8008246:	2101      	movs	r1, #1
 8008248:	9805      	ldr	r0, [sp, #20]
 800824a:	f7ff f931 	bl	80074b0 <__i2b>
 800824e:	4680      	mov	r8, r0
 8008250:	b948      	cbnz	r0, 8008266 <_strtod_l+0x69e>
 8008252:	f04f 0800 	mov.w	r8, #0
 8008256:	e6d2      	b.n	8007ffe <_strtod_l+0x436>
 8008258:	f04f 32ff 	mov.w	r2, #4294967295
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	ea03 0a0a 	and.w	sl, r3, sl
 8008264:	e7ae      	b.n	80081c4 <_strtod_l+0x5fc>
 8008266:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008268:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800826a:	2d00      	cmp	r5, #0
 800826c:	bfab      	itete	ge
 800826e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008270:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008272:	18ef      	addge	r7, r5, r3
 8008274:	1b5e      	sublt	r6, r3, r5
 8008276:	9b08      	ldr	r3, [sp, #32]
 8008278:	bfa8      	it	ge
 800827a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800827c:	eba5 0503 	sub.w	r5, r5, r3
 8008280:	4415      	add	r5, r2
 8008282:	4b67      	ldr	r3, [pc, #412]	@ (8008420 <_strtod_l+0x858>)
 8008284:	f105 35ff 	add.w	r5, r5, #4294967295
 8008288:	bfb8      	it	lt
 800828a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800828c:	429d      	cmp	r5, r3
 800828e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008292:	da50      	bge.n	8008336 <_strtod_l+0x76e>
 8008294:	1b5b      	subs	r3, r3, r5
 8008296:	2b1f      	cmp	r3, #31
 8008298:	f04f 0101 	mov.w	r1, #1
 800829c:	eba2 0203 	sub.w	r2, r2, r3
 80082a0:	dc3d      	bgt.n	800831e <_strtod_l+0x756>
 80082a2:	fa01 f303 	lsl.w	r3, r1, r3
 80082a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082a8:	2300      	movs	r3, #0
 80082aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80082ac:	18bd      	adds	r5, r7, r2
 80082ae:	9b08      	ldr	r3, [sp, #32]
 80082b0:	42af      	cmp	r7, r5
 80082b2:	4416      	add	r6, r2
 80082b4:	441e      	add	r6, r3
 80082b6:	463b      	mov	r3, r7
 80082b8:	bfa8      	it	ge
 80082ba:	462b      	movge	r3, r5
 80082bc:	42b3      	cmp	r3, r6
 80082be:	bfa8      	it	ge
 80082c0:	4633      	movge	r3, r6
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bfc2      	ittt	gt
 80082c6:	1aed      	subgt	r5, r5, r3
 80082c8:	1af6      	subgt	r6, r6, r3
 80082ca:	1aff      	subgt	r7, r7, r3
 80082cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dd16      	ble.n	8008300 <_strtod_l+0x738>
 80082d2:	4641      	mov	r1, r8
 80082d4:	461a      	mov	r2, r3
 80082d6:	9805      	ldr	r0, [sp, #20]
 80082d8:	f7ff f9a8 	bl	800762c <__pow5mult>
 80082dc:	4680      	mov	r8, r0
 80082de:	2800      	cmp	r0, #0
 80082e0:	d0b7      	beq.n	8008252 <_strtod_l+0x68a>
 80082e2:	4601      	mov	r1, r0
 80082e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082e6:	9805      	ldr	r0, [sp, #20]
 80082e8:	f7ff f8f8 	bl	80074dc <__multiply>
 80082ec:	900e      	str	r0, [sp, #56]	@ 0x38
 80082ee:	2800      	cmp	r0, #0
 80082f0:	f43f ae85 	beq.w	8007ffe <_strtod_l+0x436>
 80082f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082f6:	9805      	ldr	r0, [sp, #20]
 80082f8:	f7fe ffdc 	bl	80072b4 <_Bfree>
 80082fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8008300:	2d00      	cmp	r5, #0
 8008302:	dc1d      	bgt.n	8008340 <_strtod_l+0x778>
 8008304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	dd23      	ble.n	8008352 <_strtod_l+0x78a>
 800830a:	4649      	mov	r1, r9
 800830c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800830e:	9805      	ldr	r0, [sp, #20]
 8008310:	f7ff f98c 	bl	800762c <__pow5mult>
 8008314:	4681      	mov	r9, r0
 8008316:	b9e0      	cbnz	r0, 8008352 <_strtod_l+0x78a>
 8008318:	f04f 0900 	mov.w	r9, #0
 800831c:	e66f      	b.n	8007ffe <_strtod_l+0x436>
 800831e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008322:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008326:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800832a:	35e2      	adds	r5, #226	@ 0xe2
 800832c:	fa01 f305 	lsl.w	r3, r1, r5
 8008330:	9310      	str	r3, [sp, #64]	@ 0x40
 8008332:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008334:	e7ba      	b.n	80082ac <_strtod_l+0x6e4>
 8008336:	2300      	movs	r3, #0
 8008338:	9310      	str	r3, [sp, #64]	@ 0x40
 800833a:	2301      	movs	r3, #1
 800833c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800833e:	e7b5      	b.n	80082ac <_strtod_l+0x6e4>
 8008340:	462a      	mov	r2, r5
 8008342:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008344:	9805      	ldr	r0, [sp, #20]
 8008346:	f7ff f9cb 	bl	80076e0 <__lshift>
 800834a:	901a      	str	r0, [sp, #104]	@ 0x68
 800834c:	2800      	cmp	r0, #0
 800834e:	d1d9      	bne.n	8008304 <_strtod_l+0x73c>
 8008350:	e655      	b.n	8007ffe <_strtod_l+0x436>
 8008352:	2e00      	cmp	r6, #0
 8008354:	dd07      	ble.n	8008366 <_strtod_l+0x79e>
 8008356:	4649      	mov	r1, r9
 8008358:	4632      	mov	r2, r6
 800835a:	9805      	ldr	r0, [sp, #20]
 800835c:	f7ff f9c0 	bl	80076e0 <__lshift>
 8008360:	4681      	mov	r9, r0
 8008362:	2800      	cmp	r0, #0
 8008364:	d0d8      	beq.n	8008318 <_strtod_l+0x750>
 8008366:	2f00      	cmp	r7, #0
 8008368:	dd08      	ble.n	800837c <_strtod_l+0x7b4>
 800836a:	4641      	mov	r1, r8
 800836c:	463a      	mov	r2, r7
 800836e:	9805      	ldr	r0, [sp, #20]
 8008370:	f7ff f9b6 	bl	80076e0 <__lshift>
 8008374:	4680      	mov	r8, r0
 8008376:	2800      	cmp	r0, #0
 8008378:	f43f ae41 	beq.w	8007ffe <_strtod_l+0x436>
 800837c:	464a      	mov	r2, r9
 800837e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008380:	9805      	ldr	r0, [sp, #20]
 8008382:	f7ff fa35 	bl	80077f0 <__mdiff>
 8008386:	4604      	mov	r4, r0
 8008388:	2800      	cmp	r0, #0
 800838a:	f43f ae38 	beq.w	8007ffe <_strtod_l+0x436>
 800838e:	68c3      	ldr	r3, [r0, #12]
 8008390:	4641      	mov	r1, r8
 8008392:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008394:	2300      	movs	r3, #0
 8008396:	60c3      	str	r3, [r0, #12]
 8008398:	f7ff fa0e 	bl	80077b8 <__mcmp>
 800839c:	2800      	cmp	r0, #0
 800839e:	da45      	bge.n	800842c <_strtod_l+0x864>
 80083a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083a2:	ea53 030a 	orrs.w	r3, r3, sl
 80083a6:	d16b      	bne.n	8008480 <_strtod_l+0x8b8>
 80083a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d167      	bne.n	8008480 <_strtod_l+0x8b8>
 80083b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083b4:	0d1b      	lsrs	r3, r3, #20
 80083b6:	051b      	lsls	r3, r3, #20
 80083b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083bc:	d960      	bls.n	8008480 <_strtod_l+0x8b8>
 80083be:	6963      	ldr	r3, [r4, #20]
 80083c0:	b913      	cbnz	r3, 80083c8 <_strtod_l+0x800>
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	dd5b      	ble.n	8008480 <_strtod_l+0x8b8>
 80083c8:	4621      	mov	r1, r4
 80083ca:	2201      	movs	r2, #1
 80083cc:	9805      	ldr	r0, [sp, #20]
 80083ce:	f7ff f987 	bl	80076e0 <__lshift>
 80083d2:	4641      	mov	r1, r8
 80083d4:	4604      	mov	r4, r0
 80083d6:	f7ff f9ef 	bl	80077b8 <__mcmp>
 80083da:	2800      	cmp	r0, #0
 80083dc:	dd50      	ble.n	8008480 <_strtod_l+0x8b8>
 80083de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083e2:	9a08      	ldr	r2, [sp, #32]
 80083e4:	0d1b      	lsrs	r3, r3, #20
 80083e6:	051b      	lsls	r3, r3, #20
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	d06a      	beq.n	80084c2 <_strtod_l+0x8fa>
 80083ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083f0:	d867      	bhi.n	80084c2 <_strtod_l+0x8fa>
 80083f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80083f6:	f67f ae98 	bls.w	800812a <_strtod_l+0x562>
 80083fa:	4650      	mov	r0, sl
 80083fc:	4659      	mov	r1, fp
 80083fe:	4b09      	ldr	r3, [pc, #36]	@ (8008424 <_strtod_l+0x85c>)
 8008400:	2200      	movs	r2, #0
 8008402:	f7f8 f869 	bl	80004d8 <__aeabi_dmul>
 8008406:	4b08      	ldr	r3, [pc, #32]	@ (8008428 <_strtod_l+0x860>)
 8008408:	4682      	mov	sl, r0
 800840a:	400b      	ands	r3, r1
 800840c:	468b      	mov	fp, r1
 800840e:	2b00      	cmp	r3, #0
 8008410:	f47f ae00 	bne.w	8008014 <_strtod_l+0x44c>
 8008414:	2322      	movs	r3, #34	@ 0x22
 8008416:	9a05      	ldr	r2, [sp, #20]
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	e5fb      	b.n	8008014 <_strtod_l+0x44c>
 800841c:	0800b340 	.word	0x0800b340
 8008420:	fffffc02 	.word	0xfffffc02
 8008424:	39500000 	.word	0x39500000
 8008428:	7ff00000 	.word	0x7ff00000
 800842c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008430:	d165      	bne.n	80084fe <_strtod_l+0x936>
 8008432:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008434:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008438:	b35a      	cbz	r2, 8008492 <_strtod_l+0x8ca>
 800843a:	4a99      	ldr	r2, [pc, #612]	@ (80086a0 <_strtod_l+0xad8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d12b      	bne.n	8008498 <_strtod_l+0x8d0>
 8008440:	9b08      	ldr	r3, [sp, #32]
 8008442:	4651      	mov	r1, sl
 8008444:	b303      	cbz	r3, 8008488 <_strtod_l+0x8c0>
 8008446:	465a      	mov	r2, fp
 8008448:	4b96      	ldr	r3, [pc, #600]	@ (80086a4 <_strtod_l+0xadc>)
 800844a:	4013      	ands	r3, r2
 800844c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008450:	f04f 32ff 	mov.w	r2, #4294967295
 8008454:	d81b      	bhi.n	800848e <_strtod_l+0x8c6>
 8008456:	0d1b      	lsrs	r3, r3, #20
 8008458:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	4299      	cmp	r1, r3
 8008462:	d119      	bne.n	8008498 <_strtod_l+0x8d0>
 8008464:	4b90      	ldr	r3, [pc, #576]	@ (80086a8 <_strtod_l+0xae0>)
 8008466:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008468:	429a      	cmp	r2, r3
 800846a:	d102      	bne.n	8008472 <_strtod_l+0x8aa>
 800846c:	3101      	adds	r1, #1
 800846e:	f43f adc6 	beq.w	8007ffe <_strtod_l+0x436>
 8008472:	f04f 0a00 	mov.w	sl, #0
 8008476:	4b8b      	ldr	r3, [pc, #556]	@ (80086a4 <_strtod_l+0xadc>)
 8008478:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800847a:	401a      	ands	r2, r3
 800847c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008480:	9b08      	ldr	r3, [sp, #32]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1b9      	bne.n	80083fa <_strtod_l+0x832>
 8008486:	e5c5      	b.n	8008014 <_strtod_l+0x44c>
 8008488:	f04f 33ff 	mov.w	r3, #4294967295
 800848c:	e7e8      	b.n	8008460 <_strtod_l+0x898>
 800848e:	4613      	mov	r3, r2
 8008490:	e7e6      	b.n	8008460 <_strtod_l+0x898>
 8008492:	ea53 030a 	orrs.w	r3, r3, sl
 8008496:	d0a2      	beq.n	80083de <_strtod_l+0x816>
 8008498:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800849a:	b1db      	cbz	r3, 80084d4 <_strtod_l+0x90c>
 800849c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800849e:	4213      	tst	r3, r2
 80084a0:	d0ee      	beq.n	8008480 <_strtod_l+0x8b8>
 80084a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084a4:	4650      	mov	r0, sl
 80084a6:	4659      	mov	r1, fp
 80084a8:	9a08      	ldr	r2, [sp, #32]
 80084aa:	b1bb      	cbz	r3, 80084dc <_strtod_l+0x914>
 80084ac:	f7ff fb68 	bl	8007b80 <sulp>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084b8:	f7f7 fe58 	bl	800016c <__adddf3>
 80084bc:	4682      	mov	sl, r0
 80084be:	468b      	mov	fp, r1
 80084c0:	e7de      	b.n	8008480 <_strtod_l+0x8b8>
 80084c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80084c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084ca:	f04f 3aff 	mov.w	sl, #4294967295
 80084ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084d2:	e7d5      	b.n	8008480 <_strtod_l+0x8b8>
 80084d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084d6:	ea13 0f0a 	tst.w	r3, sl
 80084da:	e7e1      	b.n	80084a0 <_strtod_l+0x8d8>
 80084dc:	f7ff fb50 	bl	8007b80 <sulp>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084e8:	f7f7 fe3e 	bl	8000168 <__aeabi_dsub>
 80084ec:	2200      	movs	r2, #0
 80084ee:	2300      	movs	r3, #0
 80084f0:	4682      	mov	sl, r0
 80084f2:	468b      	mov	fp, r1
 80084f4:	f7f8 fa58 	bl	80009a8 <__aeabi_dcmpeq>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d0c1      	beq.n	8008480 <_strtod_l+0x8b8>
 80084fc:	e615      	b.n	800812a <_strtod_l+0x562>
 80084fe:	4641      	mov	r1, r8
 8008500:	4620      	mov	r0, r4
 8008502:	f7ff fac9 	bl	8007a98 <__ratio>
 8008506:	2200      	movs	r2, #0
 8008508:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800850c:	4606      	mov	r6, r0
 800850e:	460f      	mov	r7, r1
 8008510:	f7f8 fa5e 	bl	80009d0 <__aeabi_dcmple>
 8008514:	2800      	cmp	r0, #0
 8008516:	d06d      	beq.n	80085f4 <_strtod_l+0xa2c>
 8008518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d178      	bne.n	8008610 <_strtod_l+0xa48>
 800851e:	f1ba 0f00 	cmp.w	sl, #0
 8008522:	d156      	bne.n	80085d2 <_strtod_l+0xa0a>
 8008524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800852a:	2b00      	cmp	r3, #0
 800852c:	d158      	bne.n	80085e0 <_strtod_l+0xa18>
 800852e:	2200      	movs	r2, #0
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	4b5d      	ldr	r3, [pc, #372]	@ (80086ac <_strtod_l+0xae4>)
 8008536:	f7f8 fa41 	bl	80009bc <__aeabi_dcmplt>
 800853a:	2800      	cmp	r0, #0
 800853c:	d157      	bne.n	80085ee <_strtod_l+0xa26>
 800853e:	4630      	mov	r0, r6
 8008540:	4639      	mov	r1, r7
 8008542:	2200      	movs	r2, #0
 8008544:	4b5a      	ldr	r3, [pc, #360]	@ (80086b0 <_strtod_l+0xae8>)
 8008546:	f7f7 ffc7 	bl	80004d8 <__aeabi_dmul>
 800854a:	4606      	mov	r6, r0
 800854c:	460f      	mov	r7, r1
 800854e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008552:	9606      	str	r6, [sp, #24]
 8008554:	9307      	str	r3, [sp, #28]
 8008556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800855a:	4d52      	ldr	r5, [pc, #328]	@ (80086a4 <_strtod_l+0xadc>)
 800855c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008562:	401d      	ands	r5, r3
 8008564:	4b53      	ldr	r3, [pc, #332]	@ (80086b4 <_strtod_l+0xaec>)
 8008566:	429d      	cmp	r5, r3
 8008568:	f040 80aa 	bne.w	80086c0 <_strtod_l+0xaf8>
 800856c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800856e:	4650      	mov	r0, sl
 8008570:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008574:	4659      	mov	r1, fp
 8008576:	f7ff f9cf 	bl	8007918 <__ulp>
 800857a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800857e:	f7f7 ffab 	bl	80004d8 <__aeabi_dmul>
 8008582:	4652      	mov	r2, sl
 8008584:	465b      	mov	r3, fp
 8008586:	f7f7 fdf1 	bl	800016c <__adddf3>
 800858a:	460b      	mov	r3, r1
 800858c:	4945      	ldr	r1, [pc, #276]	@ (80086a4 <_strtod_l+0xadc>)
 800858e:	4a4a      	ldr	r2, [pc, #296]	@ (80086b8 <_strtod_l+0xaf0>)
 8008590:	4019      	ands	r1, r3
 8008592:	4291      	cmp	r1, r2
 8008594:	4682      	mov	sl, r0
 8008596:	d942      	bls.n	800861e <_strtod_l+0xa56>
 8008598:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800859a:	4b43      	ldr	r3, [pc, #268]	@ (80086a8 <_strtod_l+0xae0>)
 800859c:	429a      	cmp	r2, r3
 800859e:	d103      	bne.n	80085a8 <_strtod_l+0x9e0>
 80085a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085a2:	3301      	adds	r3, #1
 80085a4:	f43f ad2b 	beq.w	8007ffe <_strtod_l+0x436>
 80085a8:	f04f 3aff 	mov.w	sl, #4294967295
 80085ac:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80086a8 <_strtod_l+0xae0>
 80085b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085b2:	9805      	ldr	r0, [sp, #20]
 80085b4:	f7fe fe7e 	bl	80072b4 <_Bfree>
 80085b8:	4649      	mov	r1, r9
 80085ba:	9805      	ldr	r0, [sp, #20]
 80085bc:	f7fe fe7a 	bl	80072b4 <_Bfree>
 80085c0:	4641      	mov	r1, r8
 80085c2:	9805      	ldr	r0, [sp, #20]
 80085c4:	f7fe fe76 	bl	80072b4 <_Bfree>
 80085c8:	4621      	mov	r1, r4
 80085ca:	9805      	ldr	r0, [sp, #20]
 80085cc:	f7fe fe72 	bl	80072b4 <_Bfree>
 80085d0:	e618      	b.n	8008204 <_strtod_l+0x63c>
 80085d2:	f1ba 0f01 	cmp.w	sl, #1
 80085d6:	d103      	bne.n	80085e0 <_strtod_l+0xa18>
 80085d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f43f ada5 	beq.w	800812a <_strtod_l+0x562>
 80085e0:	2200      	movs	r2, #0
 80085e2:	4b36      	ldr	r3, [pc, #216]	@ (80086bc <_strtod_l+0xaf4>)
 80085e4:	2600      	movs	r6, #0
 80085e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80085ea:	4f30      	ldr	r7, [pc, #192]	@ (80086ac <_strtod_l+0xae4>)
 80085ec:	e7b3      	b.n	8008556 <_strtod_l+0x98e>
 80085ee:	2600      	movs	r6, #0
 80085f0:	4f2f      	ldr	r7, [pc, #188]	@ (80086b0 <_strtod_l+0xae8>)
 80085f2:	e7ac      	b.n	800854e <_strtod_l+0x986>
 80085f4:	4630      	mov	r0, r6
 80085f6:	4639      	mov	r1, r7
 80085f8:	4b2d      	ldr	r3, [pc, #180]	@ (80086b0 <_strtod_l+0xae8>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	f7f7 ff6c 	bl	80004d8 <__aeabi_dmul>
 8008600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008602:	4606      	mov	r6, r0
 8008604:	460f      	mov	r7, r1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0a1      	beq.n	800854e <_strtod_l+0x986>
 800860a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800860e:	e7a2      	b.n	8008556 <_strtod_l+0x98e>
 8008610:	2200      	movs	r2, #0
 8008612:	4b26      	ldr	r3, [pc, #152]	@ (80086ac <_strtod_l+0xae4>)
 8008614:	4616      	mov	r6, r2
 8008616:	461f      	mov	r7, r3
 8008618:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800861c:	e79b      	b.n	8008556 <_strtod_l+0x98e>
 800861e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008622:	9b08      	ldr	r3, [sp, #32]
 8008624:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1c1      	bne.n	80085b0 <_strtod_l+0x9e8>
 800862c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008630:	0d1b      	lsrs	r3, r3, #20
 8008632:	051b      	lsls	r3, r3, #20
 8008634:	429d      	cmp	r5, r3
 8008636:	d1bb      	bne.n	80085b0 <_strtod_l+0x9e8>
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	f7f8 fd68 	bl	8001110 <__aeabi_d2lz>
 8008640:	f7f7 ff1c 	bl	800047c <__aeabi_l2d>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	4630      	mov	r0, r6
 800864a:	4639      	mov	r1, r7
 800864c:	f7f7 fd8c 	bl	8000168 <__aeabi_dsub>
 8008650:	460b      	mov	r3, r1
 8008652:	4602      	mov	r2, r0
 8008654:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008658:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800865c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800865e:	ea46 060a 	orr.w	r6, r6, sl
 8008662:	431e      	orrs	r6, r3
 8008664:	d069      	beq.n	800873a <_strtod_l+0xb72>
 8008666:	a30a      	add	r3, pc, #40	@ (adr r3, 8008690 <_strtod_l+0xac8>)
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f7f8 f9a6 	bl	80009bc <__aeabi_dcmplt>
 8008670:	2800      	cmp	r0, #0
 8008672:	f47f accf 	bne.w	8008014 <_strtod_l+0x44c>
 8008676:	a308      	add	r3, pc, #32	@ (adr r3, 8008698 <_strtod_l+0xad0>)
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008680:	f7f8 f9ba 	bl	80009f8 <__aeabi_dcmpgt>
 8008684:	2800      	cmp	r0, #0
 8008686:	d093      	beq.n	80085b0 <_strtod_l+0x9e8>
 8008688:	e4c4      	b.n	8008014 <_strtod_l+0x44c>
 800868a:	bf00      	nop
 800868c:	f3af 8000 	nop.w
 8008690:	94a03595 	.word	0x94a03595
 8008694:	3fdfffff 	.word	0x3fdfffff
 8008698:	35afe535 	.word	0x35afe535
 800869c:	3fe00000 	.word	0x3fe00000
 80086a0:	000fffff 	.word	0x000fffff
 80086a4:	7ff00000 	.word	0x7ff00000
 80086a8:	7fefffff 	.word	0x7fefffff
 80086ac:	3ff00000 	.word	0x3ff00000
 80086b0:	3fe00000 	.word	0x3fe00000
 80086b4:	7fe00000 	.word	0x7fe00000
 80086b8:	7c9fffff 	.word	0x7c9fffff
 80086bc:	bff00000 	.word	0xbff00000
 80086c0:	9b08      	ldr	r3, [sp, #32]
 80086c2:	b323      	cbz	r3, 800870e <_strtod_l+0xb46>
 80086c4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80086c8:	d821      	bhi.n	800870e <_strtod_l+0xb46>
 80086ca:	a327      	add	r3, pc, #156	@ (adr r3, 8008768 <_strtod_l+0xba0>)
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	4630      	mov	r0, r6
 80086d2:	4639      	mov	r1, r7
 80086d4:	f7f8 f97c 	bl	80009d0 <__aeabi_dcmple>
 80086d8:	b1a0      	cbz	r0, 8008704 <_strtod_l+0xb3c>
 80086da:	4639      	mov	r1, r7
 80086dc:	4630      	mov	r0, r6
 80086de:	f7f8 f9d3 	bl	8000a88 <__aeabi_d2uiz>
 80086e2:	2801      	cmp	r0, #1
 80086e4:	bf38      	it	cc
 80086e6:	2001      	movcc	r0, #1
 80086e8:	f7f7 fe7c 	bl	80003e4 <__aeabi_ui2d>
 80086ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ee:	4606      	mov	r6, r0
 80086f0:	460f      	mov	r7, r1
 80086f2:	b9fb      	cbnz	r3, 8008734 <_strtod_l+0xb6c>
 80086f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80086f8:	9014      	str	r0, [sp, #80]	@ 0x50
 80086fa:	9315      	str	r3, [sp, #84]	@ 0x54
 80086fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008700:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008704:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008706:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800870a:	1b5b      	subs	r3, r3, r5
 800870c:	9311      	str	r3, [sp, #68]	@ 0x44
 800870e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008712:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008716:	f7ff f8ff 	bl	8007918 <__ulp>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4650      	mov	r0, sl
 8008720:	4659      	mov	r1, fp
 8008722:	f7f7 fed9 	bl	80004d8 <__aeabi_dmul>
 8008726:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800872a:	f7f7 fd1f 	bl	800016c <__adddf3>
 800872e:	4682      	mov	sl, r0
 8008730:	468b      	mov	fp, r1
 8008732:	e776      	b.n	8008622 <_strtod_l+0xa5a>
 8008734:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008738:	e7e0      	b.n	80086fc <_strtod_l+0xb34>
 800873a:	a30d      	add	r3, pc, #52	@ (adr r3, 8008770 <_strtod_l+0xba8>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f8 f93c 	bl	80009bc <__aeabi_dcmplt>
 8008744:	e79e      	b.n	8008684 <_strtod_l+0xabc>
 8008746:	2300      	movs	r3, #0
 8008748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800874a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800874c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	f7ff ba77 	b.w	8007c42 <_strtod_l+0x7a>
 8008754:	2a65      	cmp	r2, #101	@ 0x65
 8008756:	f43f ab6e 	beq.w	8007e36 <_strtod_l+0x26e>
 800875a:	2a45      	cmp	r2, #69	@ 0x45
 800875c:	f43f ab6b 	beq.w	8007e36 <_strtod_l+0x26e>
 8008760:	2301      	movs	r3, #1
 8008762:	f7ff bba6 	b.w	8007eb2 <_strtod_l+0x2ea>
 8008766:	bf00      	nop
 8008768:	ffc00000 	.word	0xffc00000
 800876c:	41dfffff 	.word	0x41dfffff
 8008770:	94a03595 	.word	0x94a03595
 8008774:	3fcfffff 	.word	0x3fcfffff

08008778 <_strtod_r>:
 8008778:	4b01      	ldr	r3, [pc, #4]	@ (8008780 <_strtod_r+0x8>)
 800877a:	f7ff ba25 	b.w	8007bc8 <_strtod_l>
 800877e:	bf00      	nop
 8008780:	20000070 	.word	0x20000070

08008784 <_strtol_l.constprop.0>:
 8008784:	2b24      	cmp	r3, #36	@ 0x24
 8008786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800878a:	4686      	mov	lr, r0
 800878c:	4690      	mov	r8, r2
 800878e:	d801      	bhi.n	8008794 <_strtol_l.constprop.0+0x10>
 8008790:	2b01      	cmp	r3, #1
 8008792:	d106      	bne.n	80087a2 <_strtol_l.constprop.0+0x1e>
 8008794:	f7fd fdbe 	bl	8006314 <__errno>
 8008798:	2316      	movs	r3, #22
 800879a:	6003      	str	r3, [r0, #0]
 800879c:	2000      	movs	r0, #0
 800879e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a2:	460d      	mov	r5, r1
 80087a4:	4833      	ldr	r0, [pc, #204]	@ (8008874 <_strtol_l.constprop.0+0xf0>)
 80087a6:	462a      	mov	r2, r5
 80087a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087ac:	5d06      	ldrb	r6, [r0, r4]
 80087ae:	f016 0608 	ands.w	r6, r6, #8
 80087b2:	d1f8      	bne.n	80087a6 <_strtol_l.constprop.0+0x22>
 80087b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80087b6:	d12d      	bne.n	8008814 <_strtol_l.constprop.0+0x90>
 80087b8:	2601      	movs	r6, #1
 80087ba:	782c      	ldrb	r4, [r5, #0]
 80087bc:	1c95      	adds	r5, r2, #2
 80087be:	f033 0210 	bics.w	r2, r3, #16
 80087c2:	d109      	bne.n	80087d8 <_strtol_l.constprop.0+0x54>
 80087c4:	2c30      	cmp	r4, #48	@ 0x30
 80087c6:	d12a      	bne.n	800881e <_strtol_l.constprop.0+0x9a>
 80087c8:	782a      	ldrb	r2, [r5, #0]
 80087ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80087ce:	2a58      	cmp	r2, #88	@ 0x58
 80087d0:	d125      	bne.n	800881e <_strtol_l.constprop.0+0x9a>
 80087d2:	2310      	movs	r3, #16
 80087d4:	786c      	ldrb	r4, [r5, #1]
 80087d6:	3502      	adds	r5, #2
 80087d8:	2200      	movs	r2, #0
 80087da:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80087de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087e2:	fbbc f9f3 	udiv	r9, ip, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80087ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80087f0:	2f09      	cmp	r7, #9
 80087f2:	d81b      	bhi.n	800882c <_strtol_l.constprop.0+0xa8>
 80087f4:	463c      	mov	r4, r7
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	dd27      	ble.n	800884a <_strtol_l.constprop.0+0xc6>
 80087fa:	1c57      	adds	r7, r2, #1
 80087fc:	d007      	beq.n	800880e <_strtol_l.constprop.0+0x8a>
 80087fe:	4581      	cmp	r9, r0
 8008800:	d320      	bcc.n	8008844 <_strtol_l.constprop.0+0xc0>
 8008802:	d101      	bne.n	8008808 <_strtol_l.constprop.0+0x84>
 8008804:	45a2      	cmp	sl, r4
 8008806:	db1d      	blt.n	8008844 <_strtol_l.constprop.0+0xc0>
 8008808:	2201      	movs	r2, #1
 800880a:	fb00 4003 	mla	r0, r0, r3, r4
 800880e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008812:	e7eb      	b.n	80087ec <_strtol_l.constprop.0+0x68>
 8008814:	2c2b      	cmp	r4, #43	@ 0x2b
 8008816:	bf04      	itt	eq
 8008818:	782c      	ldrbeq	r4, [r5, #0]
 800881a:	1c95      	addeq	r5, r2, #2
 800881c:	e7cf      	b.n	80087be <_strtol_l.constprop.0+0x3a>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1da      	bne.n	80087d8 <_strtol_l.constprop.0+0x54>
 8008822:	2c30      	cmp	r4, #48	@ 0x30
 8008824:	bf0c      	ite	eq
 8008826:	2308      	moveq	r3, #8
 8008828:	230a      	movne	r3, #10
 800882a:	e7d5      	b.n	80087d8 <_strtol_l.constprop.0+0x54>
 800882c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008830:	2f19      	cmp	r7, #25
 8008832:	d801      	bhi.n	8008838 <_strtol_l.constprop.0+0xb4>
 8008834:	3c37      	subs	r4, #55	@ 0x37
 8008836:	e7de      	b.n	80087f6 <_strtol_l.constprop.0+0x72>
 8008838:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800883c:	2f19      	cmp	r7, #25
 800883e:	d804      	bhi.n	800884a <_strtol_l.constprop.0+0xc6>
 8008840:	3c57      	subs	r4, #87	@ 0x57
 8008842:	e7d8      	b.n	80087f6 <_strtol_l.constprop.0+0x72>
 8008844:	f04f 32ff 	mov.w	r2, #4294967295
 8008848:	e7e1      	b.n	800880e <_strtol_l.constprop.0+0x8a>
 800884a:	1c53      	adds	r3, r2, #1
 800884c:	d108      	bne.n	8008860 <_strtol_l.constprop.0+0xdc>
 800884e:	2322      	movs	r3, #34	@ 0x22
 8008850:	4660      	mov	r0, ip
 8008852:	f8ce 3000 	str.w	r3, [lr]
 8008856:	f1b8 0f00 	cmp.w	r8, #0
 800885a:	d0a0      	beq.n	800879e <_strtol_l.constprop.0+0x1a>
 800885c:	1e69      	subs	r1, r5, #1
 800885e:	e006      	b.n	800886e <_strtol_l.constprop.0+0xea>
 8008860:	b106      	cbz	r6, 8008864 <_strtol_l.constprop.0+0xe0>
 8008862:	4240      	negs	r0, r0
 8008864:	f1b8 0f00 	cmp.w	r8, #0
 8008868:	d099      	beq.n	800879e <_strtol_l.constprop.0+0x1a>
 800886a:	2a00      	cmp	r2, #0
 800886c:	d1f6      	bne.n	800885c <_strtol_l.constprop.0+0xd8>
 800886e:	f8c8 1000 	str.w	r1, [r8]
 8008872:	e794      	b.n	800879e <_strtol_l.constprop.0+0x1a>
 8008874:	0800b369 	.word	0x0800b369

08008878 <_strtol_r>:
 8008878:	f7ff bf84 	b.w	8008784 <_strtol_l.constprop.0>

0800887c <__ssputs_r>:
 800887c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	461f      	mov	r7, r3
 8008882:	688e      	ldr	r6, [r1, #8]
 8008884:	4682      	mov	sl, r0
 8008886:	42be      	cmp	r6, r7
 8008888:	460c      	mov	r4, r1
 800888a:	4690      	mov	r8, r2
 800888c:	680b      	ldr	r3, [r1, #0]
 800888e:	d82d      	bhi.n	80088ec <__ssputs_r+0x70>
 8008890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008894:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008898:	d026      	beq.n	80088e8 <__ssputs_r+0x6c>
 800889a:	6965      	ldr	r5, [r4, #20]
 800889c:	6909      	ldr	r1, [r1, #16]
 800889e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088a2:	eba3 0901 	sub.w	r9, r3, r1
 80088a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088aa:	1c7b      	adds	r3, r7, #1
 80088ac:	444b      	add	r3, r9
 80088ae:	106d      	asrs	r5, r5, #1
 80088b0:	429d      	cmp	r5, r3
 80088b2:	bf38      	it	cc
 80088b4:	461d      	movcc	r5, r3
 80088b6:	0553      	lsls	r3, r2, #21
 80088b8:	d527      	bpl.n	800890a <__ssputs_r+0x8e>
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7fe fc2e 	bl	800711c <_malloc_r>
 80088c0:	4606      	mov	r6, r0
 80088c2:	b360      	cbz	r0, 800891e <__ssputs_r+0xa2>
 80088c4:	464a      	mov	r2, r9
 80088c6:	6921      	ldr	r1, [r4, #16]
 80088c8:	f000 fbd8 	bl	800907c <memcpy>
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088d6:	81a3      	strh	r3, [r4, #12]
 80088d8:	6126      	str	r6, [r4, #16]
 80088da:	444e      	add	r6, r9
 80088dc:	6026      	str	r6, [r4, #0]
 80088de:	463e      	mov	r6, r7
 80088e0:	6165      	str	r5, [r4, #20]
 80088e2:	eba5 0509 	sub.w	r5, r5, r9
 80088e6:	60a5      	str	r5, [r4, #8]
 80088e8:	42be      	cmp	r6, r7
 80088ea:	d900      	bls.n	80088ee <__ssputs_r+0x72>
 80088ec:	463e      	mov	r6, r7
 80088ee:	4632      	mov	r2, r6
 80088f0:	4641      	mov	r1, r8
 80088f2:	6820      	ldr	r0, [r4, #0]
 80088f4:	f000 fb63 	bl	8008fbe <memmove>
 80088f8:	2000      	movs	r0, #0
 80088fa:	68a3      	ldr	r3, [r4, #8]
 80088fc:	1b9b      	subs	r3, r3, r6
 80088fe:	60a3      	str	r3, [r4, #8]
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	4433      	add	r3, r6
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800890a:	462a      	mov	r2, r5
 800890c:	f000 ff47 	bl	800979e <_realloc_r>
 8008910:	4606      	mov	r6, r0
 8008912:	2800      	cmp	r0, #0
 8008914:	d1e0      	bne.n	80088d8 <__ssputs_r+0x5c>
 8008916:	4650      	mov	r0, sl
 8008918:	6921      	ldr	r1, [r4, #16]
 800891a:	f7fe fb8d 	bl	8007038 <_free_r>
 800891e:	230c      	movs	r3, #12
 8008920:	f8ca 3000 	str.w	r3, [sl]
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f04f 30ff 	mov.w	r0, #4294967295
 800892a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	e7e9      	b.n	8008906 <__ssputs_r+0x8a>
	...

08008934 <_svfiprintf_r>:
 8008934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	4698      	mov	r8, r3
 800893a:	898b      	ldrh	r3, [r1, #12]
 800893c:	4607      	mov	r7, r0
 800893e:	061b      	lsls	r3, r3, #24
 8008940:	460d      	mov	r5, r1
 8008942:	4614      	mov	r4, r2
 8008944:	b09d      	sub	sp, #116	@ 0x74
 8008946:	d510      	bpl.n	800896a <_svfiprintf_r+0x36>
 8008948:	690b      	ldr	r3, [r1, #16]
 800894a:	b973      	cbnz	r3, 800896a <_svfiprintf_r+0x36>
 800894c:	2140      	movs	r1, #64	@ 0x40
 800894e:	f7fe fbe5 	bl	800711c <_malloc_r>
 8008952:	6028      	str	r0, [r5, #0]
 8008954:	6128      	str	r0, [r5, #16]
 8008956:	b930      	cbnz	r0, 8008966 <_svfiprintf_r+0x32>
 8008958:	230c      	movs	r3, #12
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	b01d      	add	sp, #116	@ 0x74
 8008962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008966:	2340      	movs	r3, #64	@ 0x40
 8008968:	616b      	str	r3, [r5, #20]
 800896a:	2300      	movs	r3, #0
 800896c:	9309      	str	r3, [sp, #36]	@ 0x24
 800896e:	2320      	movs	r3, #32
 8008970:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008974:	2330      	movs	r3, #48	@ 0x30
 8008976:	f04f 0901 	mov.w	r9, #1
 800897a:	f8cd 800c 	str.w	r8, [sp, #12]
 800897e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008b18 <_svfiprintf_r+0x1e4>
 8008982:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008986:	4623      	mov	r3, r4
 8008988:	469a      	mov	sl, r3
 800898a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800898e:	b10a      	cbz	r2, 8008994 <_svfiprintf_r+0x60>
 8008990:	2a25      	cmp	r2, #37	@ 0x25
 8008992:	d1f9      	bne.n	8008988 <_svfiprintf_r+0x54>
 8008994:	ebba 0b04 	subs.w	fp, sl, r4
 8008998:	d00b      	beq.n	80089b2 <_svfiprintf_r+0x7e>
 800899a:	465b      	mov	r3, fp
 800899c:	4622      	mov	r2, r4
 800899e:	4629      	mov	r1, r5
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7ff ff6b 	bl	800887c <__ssputs_r>
 80089a6:	3001      	adds	r0, #1
 80089a8:	f000 80a7 	beq.w	8008afa <_svfiprintf_r+0x1c6>
 80089ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089ae:	445a      	add	r2, fp
 80089b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80089b2:	f89a 3000 	ldrb.w	r3, [sl]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 809f 	beq.w	8008afa <_svfiprintf_r+0x1c6>
 80089bc:	2300      	movs	r3, #0
 80089be:	f04f 32ff 	mov.w	r2, #4294967295
 80089c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089c6:	f10a 0a01 	add.w	sl, sl, #1
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	9307      	str	r3, [sp, #28]
 80089ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80089d4:	4654      	mov	r4, sl
 80089d6:	2205      	movs	r2, #5
 80089d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089dc:	484e      	ldr	r0, [pc, #312]	@ (8008b18 <_svfiprintf_r+0x1e4>)
 80089de:	f7fd fcc6 	bl	800636e <memchr>
 80089e2:	9a04      	ldr	r2, [sp, #16]
 80089e4:	b9d8      	cbnz	r0, 8008a1e <_svfiprintf_r+0xea>
 80089e6:	06d0      	lsls	r0, r2, #27
 80089e8:	bf44      	itt	mi
 80089ea:	2320      	movmi	r3, #32
 80089ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089f0:	0711      	lsls	r1, r2, #28
 80089f2:	bf44      	itt	mi
 80089f4:	232b      	movmi	r3, #43	@ 0x2b
 80089f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089fa:	f89a 3000 	ldrb.w	r3, [sl]
 80089fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a00:	d015      	beq.n	8008a2e <_svfiprintf_r+0xfa>
 8008a02:	4654      	mov	r4, sl
 8008a04:	2000      	movs	r0, #0
 8008a06:	f04f 0c0a 	mov.w	ip, #10
 8008a0a:	9a07      	ldr	r2, [sp, #28]
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a12:	3b30      	subs	r3, #48	@ 0x30
 8008a14:	2b09      	cmp	r3, #9
 8008a16:	d94b      	bls.n	8008ab0 <_svfiprintf_r+0x17c>
 8008a18:	b1b0      	cbz	r0, 8008a48 <_svfiprintf_r+0x114>
 8008a1a:	9207      	str	r2, [sp, #28]
 8008a1c:	e014      	b.n	8008a48 <_svfiprintf_r+0x114>
 8008a1e:	eba0 0308 	sub.w	r3, r0, r8
 8008a22:	fa09 f303 	lsl.w	r3, r9, r3
 8008a26:	4313      	orrs	r3, r2
 8008a28:	46a2      	mov	sl, r4
 8008a2a:	9304      	str	r3, [sp, #16]
 8008a2c:	e7d2      	b.n	80089d4 <_svfiprintf_r+0xa0>
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	1d19      	adds	r1, r3, #4
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	9103      	str	r1, [sp, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	bfbb      	ittet	lt
 8008a3a:	425b      	neglt	r3, r3
 8008a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a40:	9307      	strge	r3, [sp, #28]
 8008a42:	9307      	strlt	r3, [sp, #28]
 8008a44:	bfb8      	it	lt
 8008a46:	9204      	strlt	r2, [sp, #16]
 8008a48:	7823      	ldrb	r3, [r4, #0]
 8008a4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a4c:	d10a      	bne.n	8008a64 <_svfiprintf_r+0x130>
 8008a4e:	7863      	ldrb	r3, [r4, #1]
 8008a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a52:	d132      	bne.n	8008aba <_svfiprintf_r+0x186>
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	3402      	adds	r4, #2
 8008a58:	1d1a      	adds	r2, r3, #4
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	9203      	str	r2, [sp, #12]
 8008a5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a62:	9305      	str	r3, [sp, #20]
 8008a64:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008b1c <_svfiprintf_r+0x1e8>
 8008a68:	2203      	movs	r2, #3
 8008a6a:	4650      	mov	r0, sl
 8008a6c:	7821      	ldrb	r1, [r4, #0]
 8008a6e:	f7fd fc7e 	bl	800636e <memchr>
 8008a72:	b138      	cbz	r0, 8008a84 <_svfiprintf_r+0x150>
 8008a74:	2240      	movs	r2, #64	@ 0x40
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	eba0 000a 	sub.w	r0, r0, sl
 8008a7c:	4082      	lsls	r2, r0
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	3401      	adds	r4, #1
 8008a82:	9304      	str	r3, [sp, #16]
 8008a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a88:	2206      	movs	r2, #6
 8008a8a:	4825      	ldr	r0, [pc, #148]	@ (8008b20 <_svfiprintf_r+0x1ec>)
 8008a8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a90:	f7fd fc6d 	bl	800636e <memchr>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d036      	beq.n	8008b06 <_svfiprintf_r+0x1d2>
 8008a98:	4b22      	ldr	r3, [pc, #136]	@ (8008b24 <_svfiprintf_r+0x1f0>)
 8008a9a:	bb1b      	cbnz	r3, 8008ae4 <_svfiprintf_r+0x1b0>
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	3307      	adds	r3, #7
 8008aa0:	f023 0307 	bic.w	r3, r3, #7
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	9303      	str	r3, [sp, #12]
 8008aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aaa:	4433      	add	r3, r6
 8008aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aae:	e76a      	b.n	8008986 <_svfiprintf_r+0x52>
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ab8:	e7a8      	b.n	8008a0c <_svfiprintf_r+0xd8>
 8008aba:	2300      	movs	r3, #0
 8008abc:	f04f 0c0a 	mov.w	ip, #10
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	3401      	adds	r4, #1
 8008ac4:	9305      	str	r3, [sp, #20]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008acc:	3a30      	subs	r2, #48	@ 0x30
 8008ace:	2a09      	cmp	r2, #9
 8008ad0:	d903      	bls.n	8008ada <_svfiprintf_r+0x1a6>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0c6      	beq.n	8008a64 <_svfiprintf_r+0x130>
 8008ad6:	9105      	str	r1, [sp, #20]
 8008ad8:	e7c4      	b.n	8008a64 <_svfiprintf_r+0x130>
 8008ada:	4604      	mov	r4, r0
 8008adc:	2301      	movs	r3, #1
 8008ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ae2:	e7f0      	b.n	8008ac6 <_svfiprintf_r+0x192>
 8008ae4:	ab03      	add	r3, sp, #12
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	462a      	mov	r2, r5
 8008aea:	4638      	mov	r0, r7
 8008aec:	4b0e      	ldr	r3, [pc, #56]	@ (8008b28 <_svfiprintf_r+0x1f4>)
 8008aee:	a904      	add	r1, sp, #16
 8008af0:	f7fc fbc6 	bl	8005280 <_printf_float>
 8008af4:	1c42      	adds	r2, r0, #1
 8008af6:	4606      	mov	r6, r0
 8008af8:	d1d6      	bne.n	8008aa8 <_svfiprintf_r+0x174>
 8008afa:	89ab      	ldrh	r3, [r5, #12]
 8008afc:	065b      	lsls	r3, r3, #25
 8008afe:	f53f af2d 	bmi.w	800895c <_svfiprintf_r+0x28>
 8008b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b04:	e72c      	b.n	8008960 <_svfiprintf_r+0x2c>
 8008b06:	ab03      	add	r3, sp, #12
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	462a      	mov	r2, r5
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	4b06      	ldr	r3, [pc, #24]	@ (8008b28 <_svfiprintf_r+0x1f4>)
 8008b10:	a904      	add	r1, sp, #16
 8008b12:	f7fc fe53 	bl	80057bc <_printf_i>
 8008b16:	e7ed      	b.n	8008af4 <_svfiprintf_r+0x1c0>
 8008b18:	0800b469 	.word	0x0800b469
 8008b1c:	0800b46f 	.word	0x0800b46f
 8008b20:	0800b473 	.word	0x0800b473
 8008b24:	08005281 	.word	0x08005281
 8008b28:	0800887d 	.word	0x0800887d

08008b2c <__sfputc_r>:
 8008b2c:	6893      	ldr	r3, [r2, #8]
 8008b2e:	b410      	push	{r4}
 8008b30:	3b01      	subs	r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	6093      	str	r3, [r2, #8]
 8008b36:	da07      	bge.n	8008b48 <__sfputc_r+0x1c>
 8008b38:	6994      	ldr	r4, [r2, #24]
 8008b3a:	42a3      	cmp	r3, r4
 8008b3c:	db01      	blt.n	8008b42 <__sfputc_r+0x16>
 8008b3e:	290a      	cmp	r1, #10
 8008b40:	d102      	bne.n	8008b48 <__sfputc_r+0x1c>
 8008b42:	bc10      	pop	{r4}
 8008b44:	f7fd baff 	b.w	8006146 <__swbuf_r>
 8008b48:	6813      	ldr	r3, [r2, #0]
 8008b4a:	1c58      	adds	r0, r3, #1
 8008b4c:	6010      	str	r0, [r2, #0]
 8008b4e:	7019      	strb	r1, [r3, #0]
 8008b50:	4608      	mov	r0, r1
 8008b52:	bc10      	pop	{r4}
 8008b54:	4770      	bx	lr

08008b56 <__sfputs_r>:
 8008b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b58:	4606      	mov	r6, r0
 8008b5a:	460f      	mov	r7, r1
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	18d5      	adds	r5, r2, r3
 8008b60:	42ac      	cmp	r4, r5
 8008b62:	d101      	bne.n	8008b68 <__sfputs_r+0x12>
 8008b64:	2000      	movs	r0, #0
 8008b66:	e007      	b.n	8008b78 <__sfputs_r+0x22>
 8008b68:	463a      	mov	r2, r7
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b70:	f7ff ffdc 	bl	8008b2c <__sfputc_r>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d1f3      	bne.n	8008b60 <__sfputs_r+0xa>
 8008b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b7c <_vfiprintf_r>:
 8008b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	460d      	mov	r5, r1
 8008b82:	4614      	mov	r4, r2
 8008b84:	4698      	mov	r8, r3
 8008b86:	4606      	mov	r6, r0
 8008b88:	b09d      	sub	sp, #116	@ 0x74
 8008b8a:	b118      	cbz	r0, 8008b94 <_vfiprintf_r+0x18>
 8008b8c:	6a03      	ldr	r3, [r0, #32]
 8008b8e:	b90b      	cbnz	r3, 8008b94 <_vfiprintf_r+0x18>
 8008b90:	f7fd f9d0 	bl	8005f34 <__sinit>
 8008b94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b96:	07d9      	lsls	r1, r3, #31
 8008b98:	d405      	bmi.n	8008ba6 <_vfiprintf_r+0x2a>
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	059a      	lsls	r2, r3, #22
 8008b9e:	d402      	bmi.n	8008ba6 <_vfiprintf_r+0x2a>
 8008ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ba2:	f7fd fbe2 	bl	800636a <__retarget_lock_acquire_recursive>
 8008ba6:	89ab      	ldrh	r3, [r5, #12]
 8008ba8:	071b      	lsls	r3, r3, #28
 8008baa:	d501      	bpl.n	8008bb0 <_vfiprintf_r+0x34>
 8008bac:	692b      	ldr	r3, [r5, #16]
 8008bae:	b99b      	cbnz	r3, 8008bd8 <_vfiprintf_r+0x5c>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f7fd fb06 	bl	80061c4 <__swsetup_r>
 8008bb8:	b170      	cbz	r0, 8008bd8 <_vfiprintf_r+0x5c>
 8008bba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bbc:	07dc      	lsls	r4, r3, #31
 8008bbe:	d504      	bpl.n	8008bca <_vfiprintf_r+0x4e>
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	b01d      	add	sp, #116	@ 0x74
 8008bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bca:	89ab      	ldrh	r3, [r5, #12]
 8008bcc:	0598      	lsls	r0, r3, #22
 8008bce:	d4f7      	bmi.n	8008bc0 <_vfiprintf_r+0x44>
 8008bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bd2:	f7fd fbcb 	bl	800636c <__retarget_lock_release_recursive>
 8008bd6:	e7f3      	b.n	8008bc0 <_vfiprintf_r+0x44>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bdc:	2320      	movs	r3, #32
 8008bde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008be2:	2330      	movs	r3, #48	@ 0x30
 8008be4:	f04f 0901 	mov.w	r9, #1
 8008be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008d98 <_vfiprintf_r+0x21c>
 8008bf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	469a      	mov	sl, r3
 8008bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bfc:	b10a      	cbz	r2, 8008c02 <_vfiprintf_r+0x86>
 8008bfe:	2a25      	cmp	r2, #37	@ 0x25
 8008c00:	d1f9      	bne.n	8008bf6 <_vfiprintf_r+0x7a>
 8008c02:	ebba 0b04 	subs.w	fp, sl, r4
 8008c06:	d00b      	beq.n	8008c20 <_vfiprintf_r+0xa4>
 8008c08:	465b      	mov	r3, fp
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f7ff ffa1 	bl	8008b56 <__sfputs_r>
 8008c14:	3001      	adds	r0, #1
 8008c16:	f000 80a7 	beq.w	8008d68 <_vfiprintf_r+0x1ec>
 8008c1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c1c:	445a      	add	r2, fp
 8008c1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c20:	f89a 3000 	ldrb.w	r3, [sl]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 809f 	beq.w	8008d68 <_vfiprintf_r+0x1ec>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c34:	f10a 0a01 	add.w	sl, sl, #1
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	9307      	str	r3, [sp, #28]
 8008c3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c40:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c42:	4654      	mov	r4, sl
 8008c44:	2205      	movs	r2, #5
 8008c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4a:	4853      	ldr	r0, [pc, #332]	@ (8008d98 <_vfiprintf_r+0x21c>)
 8008c4c:	f7fd fb8f 	bl	800636e <memchr>
 8008c50:	9a04      	ldr	r2, [sp, #16]
 8008c52:	b9d8      	cbnz	r0, 8008c8c <_vfiprintf_r+0x110>
 8008c54:	06d1      	lsls	r1, r2, #27
 8008c56:	bf44      	itt	mi
 8008c58:	2320      	movmi	r3, #32
 8008c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c5e:	0713      	lsls	r3, r2, #28
 8008c60:	bf44      	itt	mi
 8008c62:	232b      	movmi	r3, #43	@ 0x2b
 8008c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c68:	f89a 3000 	ldrb.w	r3, [sl]
 8008c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c6e:	d015      	beq.n	8008c9c <_vfiprintf_r+0x120>
 8008c70:	4654      	mov	r4, sl
 8008c72:	2000      	movs	r0, #0
 8008c74:	f04f 0c0a 	mov.w	ip, #10
 8008c78:	9a07      	ldr	r2, [sp, #28]
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c80:	3b30      	subs	r3, #48	@ 0x30
 8008c82:	2b09      	cmp	r3, #9
 8008c84:	d94b      	bls.n	8008d1e <_vfiprintf_r+0x1a2>
 8008c86:	b1b0      	cbz	r0, 8008cb6 <_vfiprintf_r+0x13a>
 8008c88:	9207      	str	r2, [sp, #28]
 8008c8a:	e014      	b.n	8008cb6 <_vfiprintf_r+0x13a>
 8008c8c:	eba0 0308 	sub.w	r3, r0, r8
 8008c90:	fa09 f303 	lsl.w	r3, r9, r3
 8008c94:	4313      	orrs	r3, r2
 8008c96:	46a2      	mov	sl, r4
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	e7d2      	b.n	8008c42 <_vfiprintf_r+0xc6>
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	1d19      	adds	r1, r3, #4
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	9103      	str	r1, [sp, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfbb      	ittet	lt
 8008ca8:	425b      	neglt	r3, r3
 8008caa:	f042 0202 	orrlt.w	r2, r2, #2
 8008cae:	9307      	strge	r3, [sp, #28]
 8008cb0:	9307      	strlt	r3, [sp, #28]
 8008cb2:	bfb8      	it	lt
 8008cb4:	9204      	strlt	r2, [sp, #16]
 8008cb6:	7823      	ldrb	r3, [r4, #0]
 8008cb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cba:	d10a      	bne.n	8008cd2 <_vfiprintf_r+0x156>
 8008cbc:	7863      	ldrb	r3, [r4, #1]
 8008cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cc0:	d132      	bne.n	8008d28 <_vfiprintf_r+0x1ac>
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	3402      	adds	r4, #2
 8008cc6:	1d1a      	adds	r2, r3, #4
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	9203      	str	r2, [sp, #12]
 8008ccc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cd0:	9305      	str	r3, [sp, #20]
 8008cd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008d9c <_vfiprintf_r+0x220>
 8008cd6:	2203      	movs	r2, #3
 8008cd8:	4650      	mov	r0, sl
 8008cda:	7821      	ldrb	r1, [r4, #0]
 8008cdc:	f7fd fb47 	bl	800636e <memchr>
 8008ce0:	b138      	cbz	r0, 8008cf2 <_vfiprintf_r+0x176>
 8008ce2:	2240      	movs	r2, #64	@ 0x40
 8008ce4:	9b04      	ldr	r3, [sp, #16]
 8008ce6:	eba0 000a 	sub.w	r0, r0, sl
 8008cea:	4082      	lsls	r2, r0
 8008cec:	4313      	orrs	r3, r2
 8008cee:	3401      	adds	r4, #1
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf6:	2206      	movs	r2, #6
 8008cf8:	4829      	ldr	r0, [pc, #164]	@ (8008da0 <_vfiprintf_r+0x224>)
 8008cfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cfe:	f7fd fb36 	bl	800636e <memchr>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d03f      	beq.n	8008d86 <_vfiprintf_r+0x20a>
 8008d06:	4b27      	ldr	r3, [pc, #156]	@ (8008da4 <_vfiprintf_r+0x228>)
 8008d08:	bb1b      	cbnz	r3, 8008d52 <_vfiprintf_r+0x1d6>
 8008d0a:	9b03      	ldr	r3, [sp, #12]
 8008d0c:	3307      	adds	r3, #7
 8008d0e:	f023 0307 	bic.w	r3, r3, #7
 8008d12:	3308      	adds	r3, #8
 8008d14:	9303      	str	r3, [sp, #12]
 8008d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d18:	443b      	add	r3, r7
 8008d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1c:	e76a      	b.n	8008bf4 <_vfiprintf_r+0x78>
 8008d1e:	460c      	mov	r4, r1
 8008d20:	2001      	movs	r0, #1
 8008d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d26:	e7a8      	b.n	8008c7a <_vfiprintf_r+0xfe>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f04f 0c0a 	mov.w	ip, #10
 8008d2e:	4619      	mov	r1, r3
 8008d30:	3401      	adds	r4, #1
 8008d32:	9305      	str	r3, [sp, #20]
 8008d34:	4620      	mov	r0, r4
 8008d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d3a:	3a30      	subs	r2, #48	@ 0x30
 8008d3c:	2a09      	cmp	r2, #9
 8008d3e:	d903      	bls.n	8008d48 <_vfiprintf_r+0x1cc>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0c6      	beq.n	8008cd2 <_vfiprintf_r+0x156>
 8008d44:	9105      	str	r1, [sp, #20]
 8008d46:	e7c4      	b.n	8008cd2 <_vfiprintf_r+0x156>
 8008d48:	4604      	mov	r4, r0
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d50:	e7f0      	b.n	8008d34 <_vfiprintf_r+0x1b8>
 8008d52:	ab03      	add	r3, sp, #12
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	462a      	mov	r2, r5
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4b13      	ldr	r3, [pc, #76]	@ (8008da8 <_vfiprintf_r+0x22c>)
 8008d5c:	a904      	add	r1, sp, #16
 8008d5e:	f7fc fa8f 	bl	8005280 <_printf_float>
 8008d62:	4607      	mov	r7, r0
 8008d64:	1c78      	adds	r0, r7, #1
 8008d66:	d1d6      	bne.n	8008d16 <_vfiprintf_r+0x19a>
 8008d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d6a:	07d9      	lsls	r1, r3, #31
 8008d6c:	d405      	bmi.n	8008d7a <_vfiprintf_r+0x1fe>
 8008d6e:	89ab      	ldrh	r3, [r5, #12]
 8008d70:	059a      	lsls	r2, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_vfiprintf_r+0x1fe>
 8008d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d76:	f7fd faf9 	bl	800636c <__retarget_lock_release_recursive>
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	065b      	lsls	r3, r3, #25
 8008d7e:	f53f af1f 	bmi.w	8008bc0 <_vfiprintf_r+0x44>
 8008d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d84:	e71e      	b.n	8008bc4 <_vfiprintf_r+0x48>
 8008d86:	ab03      	add	r3, sp, #12
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	4b06      	ldr	r3, [pc, #24]	@ (8008da8 <_vfiprintf_r+0x22c>)
 8008d90:	a904      	add	r1, sp, #16
 8008d92:	f7fc fd13 	bl	80057bc <_printf_i>
 8008d96:	e7e4      	b.n	8008d62 <_vfiprintf_r+0x1e6>
 8008d98:	0800b469 	.word	0x0800b469
 8008d9c:	0800b46f 	.word	0x0800b46f
 8008da0:	0800b473 	.word	0x0800b473
 8008da4:	08005281 	.word	0x08005281
 8008da8:	08008b57 	.word	0x08008b57

08008dac <__sflush_r>:
 8008dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	0716      	lsls	r6, r2, #28
 8008db4:	4605      	mov	r5, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	d454      	bmi.n	8008e64 <__sflush_r+0xb8>
 8008dba:	684b      	ldr	r3, [r1, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dc02      	bgt.n	8008dc6 <__sflush_r+0x1a>
 8008dc0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	dd48      	ble.n	8008e58 <__sflush_r+0xac>
 8008dc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dc8:	2e00      	cmp	r6, #0
 8008dca:	d045      	beq.n	8008e58 <__sflush_r+0xac>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008dd2:	682f      	ldr	r7, [r5, #0]
 8008dd4:	6a21      	ldr	r1, [r4, #32]
 8008dd6:	602b      	str	r3, [r5, #0]
 8008dd8:	d030      	beq.n	8008e3c <__sflush_r+0x90>
 8008dda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	0759      	lsls	r1, r3, #29
 8008de0:	d505      	bpl.n	8008dee <__sflush_r+0x42>
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	1ad2      	subs	r2, r2, r3
 8008de6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008de8:	b10b      	cbz	r3, 8008dee <__sflush_r+0x42>
 8008dea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008dec:	1ad2      	subs	r2, r2, r3
 8008dee:	2300      	movs	r3, #0
 8008df0:	4628      	mov	r0, r5
 8008df2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008df4:	6a21      	ldr	r1, [r4, #32]
 8008df6:	47b0      	blx	r6
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	d106      	bne.n	8008e0c <__sflush_r+0x60>
 8008dfe:	6829      	ldr	r1, [r5, #0]
 8008e00:	291d      	cmp	r1, #29
 8008e02:	d82b      	bhi.n	8008e5c <__sflush_r+0xb0>
 8008e04:	4a28      	ldr	r2, [pc, #160]	@ (8008ea8 <__sflush_r+0xfc>)
 8008e06:	410a      	asrs	r2, r1
 8008e08:	07d6      	lsls	r6, r2, #31
 8008e0a:	d427      	bmi.n	8008e5c <__sflush_r+0xb0>
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	6062      	str	r2, [r4, #4]
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	04d9      	lsls	r1, r3, #19
 8008e14:	6022      	str	r2, [r4, #0]
 8008e16:	d504      	bpl.n	8008e22 <__sflush_r+0x76>
 8008e18:	1c42      	adds	r2, r0, #1
 8008e1a:	d101      	bne.n	8008e20 <__sflush_r+0x74>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b903      	cbnz	r3, 8008e22 <__sflush_r+0x76>
 8008e20:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e24:	602f      	str	r7, [r5, #0]
 8008e26:	b1b9      	cbz	r1, 8008e58 <__sflush_r+0xac>
 8008e28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e2c:	4299      	cmp	r1, r3
 8008e2e:	d002      	beq.n	8008e36 <__sflush_r+0x8a>
 8008e30:	4628      	mov	r0, r5
 8008e32:	f7fe f901 	bl	8007038 <_free_r>
 8008e36:	2300      	movs	r3, #0
 8008e38:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e3a:	e00d      	b.n	8008e58 <__sflush_r+0xac>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	4628      	mov	r0, r5
 8008e40:	47b0      	blx	r6
 8008e42:	4602      	mov	r2, r0
 8008e44:	1c50      	adds	r0, r2, #1
 8008e46:	d1c9      	bne.n	8008ddc <__sflush_r+0x30>
 8008e48:	682b      	ldr	r3, [r5, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0c6      	beq.n	8008ddc <__sflush_r+0x30>
 8008e4e:	2b1d      	cmp	r3, #29
 8008e50:	d001      	beq.n	8008e56 <__sflush_r+0xaa>
 8008e52:	2b16      	cmp	r3, #22
 8008e54:	d11d      	bne.n	8008e92 <__sflush_r+0xe6>
 8008e56:	602f      	str	r7, [r5, #0]
 8008e58:	2000      	movs	r0, #0
 8008e5a:	e021      	b.n	8008ea0 <__sflush_r+0xf4>
 8008e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e60:	b21b      	sxth	r3, r3
 8008e62:	e01a      	b.n	8008e9a <__sflush_r+0xee>
 8008e64:	690f      	ldr	r7, [r1, #16]
 8008e66:	2f00      	cmp	r7, #0
 8008e68:	d0f6      	beq.n	8008e58 <__sflush_r+0xac>
 8008e6a:	0793      	lsls	r3, r2, #30
 8008e6c:	bf18      	it	ne
 8008e6e:	2300      	movne	r3, #0
 8008e70:	680e      	ldr	r6, [r1, #0]
 8008e72:	bf08      	it	eq
 8008e74:	694b      	ldreq	r3, [r1, #20]
 8008e76:	1bf6      	subs	r6, r6, r7
 8008e78:	600f      	str	r7, [r1, #0]
 8008e7a:	608b      	str	r3, [r1, #8]
 8008e7c:	2e00      	cmp	r6, #0
 8008e7e:	ddeb      	ble.n	8008e58 <__sflush_r+0xac>
 8008e80:	4633      	mov	r3, r6
 8008e82:	463a      	mov	r2, r7
 8008e84:	4628      	mov	r0, r5
 8008e86:	6a21      	ldr	r1, [r4, #32]
 8008e88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008e8c:	47e0      	blx	ip
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	dc07      	bgt.n	8008ea2 <__sflush_r+0xf6>
 8008e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea2:	4407      	add	r7, r0
 8008ea4:	1a36      	subs	r6, r6, r0
 8008ea6:	e7e9      	b.n	8008e7c <__sflush_r+0xd0>
 8008ea8:	dfbffffe 	.word	0xdfbffffe

08008eac <_fflush_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	690b      	ldr	r3, [r1, #16]
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	b913      	cbnz	r3, 8008ebc <_fflush_r+0x10>
 8008eb6:	2500      	movs	r5, #0
 8008eb8:	4628      	mov	r0, r5
 8008eba:	bd38      	pop	{r3, r4, r5, pc}
 8008ebc:	b118      	cbz	r0, 8008ec6 <_fflush_r+0x1a>
 8008ebe:	6a03      	ldr	r3, [r0, #32]
 8008ec0:	b90b      	cbnz	r3, 8008ec6 <_fflush_r+0x1a>
 8008ec2:	f7fd f837 	bl	8005f34 <__sinit>
 8008ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0f3      	beq.n	8008eb6 <_fflush_r+0xa>
 8008ece:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ed0:	07d0      	lsls	r0, r2, #31
 8008ed2:	d404      	bmi.n	8008ede <_fflush_r+0x32>
 8008ed4:	0599      	lsls	r1, r3, #22
 8008ed6:	d402      	bmi.n	8008ede <_fflush_r+0x32>
 8008ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eda:	f7fd fa46 	bl	800636a <__retarget_lock_acquire_recursive>
 8008ede:	4628      	mov	r0, r5
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	f7ff ff63 	bl	8008dac <__sflush_r>
 8008ee6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ee8:	4605      	mov	r5, r0
 8008eea:	07da      	lsls	r2, r3, #31
 8008eec:	d4e4      	bmi.n	8008eb8 <_fflush_r+0xc>
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	059b      	lsls	r3, r3, #22
 8008ef2:	d4e1      	bmi.n	8008eb8 <_fflush_r+0xc>
 8008ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ef6:	f7fd fa39 	bl	800636c <__retarget_lock_release_recursive>
 8008efa:	e7dd      	b.n	8008eb8 <_fflush_r+0xc>

08008efc <__swhatbuf_r>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	460c      	mov	r4, r1
 8008f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f04:	4615      	mov	r5, r2
 8008f06:	2900      	cmp	r1, #0
 8008f08:	461e      	mov	r6, r3
 8008f0a:	b096      	sub	sp, #88	@ 0x58
 8008f0c:	da0c      	bge.n	8008f28 <__swhatbuf_r+0x2c>
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	2100      	movs	r1, #0
 8008f12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f16:	bf14      	ite	ne
 8008f18:	2340      	movne	r3, #64	@ 0x40
 8008f1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f1e:	2000      	movs	r0, #0
 8008f20:	6031      	str	r1, [r6, #0]
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	b016      	add	sp, #88	@ 0x58
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	466a      	mov	r2, sp
 8008f2a:	f000 f875 	bl	8009018 <_fstat_r>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	dbed      	blt.n	8008f0e <__swhatbuf_r+0x12>
 8008f32:	9901      	ldr	r1, [sp, #4]
 8008f34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f3c:	4259      	negs	r1, r3
 8008f3e:	4159      	adcs	r1, r3
 8008f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f44:	e7eb      	b.n	8008f1e <__swhatbuf_r+0x22>

08008f46 <__smakebuf_r>:
 8008f46:	898b      	ldrh	r3, [r1, #12]
 8008f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f4a:	079d      	lsls	r5, r3, #30
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	d507      	bpl.n	8008f62 <__smakebuf_r+0x1c>
 8008f52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f56:	6023      	str	r3, [r4, #0]
 8008f58:	6123      	str	r3, [r4, #16]
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	6163      	str	r3, [r4, #20]
 8008f5e:	b003      	add	sp, #12
 8008f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f62:	466a      	mov	r2, sp
 8008f64:	ab01      	add	r3, sp, #4
 8008f66:	f7ff ffc9 	bl	8008efc <__swhatbuf_r>
 8008f6a:	9f00      	ldr	r7, [sp, #0]
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	4639      	mov	r1, r7
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7fe f8d3 	bl	800711c <_malloc_r>
 8008f76:	b948      	cbnz	r0, 8008f8c <__smakebuf_r+0x46>
 8008f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7c:	059a      	lsls	r2, r3, #22
 8008f7e:	d4ee      	bmi.n	8008f5e <__smakebuf_r+0x18>
 8008f80:	f023 0303 	bic.w	r3, r3, #3
 8008f84:	f043 0302 	orr.w	r3, r3, #2
 8008f88:	81a3      	strh	r3, [r4, #12]
 8008f8a:	e7e2      	b.n	8008f52 <__smakebuf_r+0xc>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	9b01      	ldr	r3, [sp, #4]
 8008f9a:	6020      	str	r0, [r4, #0]
 8008f9c:	b15b      	cbz	r3, 8008fb6 <__smakebuf_r+0x70>
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fa4:	f000 f84a 	bl	800903c <_isatty_r>
 8008fa8:	b128      	cbz	r0, 8008fb6 <__smakebuf_r+0x70>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	f023 0303 	bic.w	r3, r3, #3
 8008fb0:	f043 0301 	orr.w	r3, r3, #1
 8008fb4:	81a3      	strh	r3, [r4, #12]
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	431d      	orrs	r5, r3
 8008fba:	81a5      	strh	r5, [r4, #12]
 8008fbc:	e7cf      	b.n	8008f5e <__smakebuf_r+0x18>

08008fbe <memmove>:
 8008fbe:	4288      	cmp	r0, r1
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	eb01 0402 	add.w	r4, r1, r2
 8008fc6:	d902      	bls.n	8008fce <memmove+0x10>
 8008fc8:	4284      	cmp	r4, r0
 8008fca:	4623      	mov	r3, r4
 8008fcc:	d807      	bhi.n	8008fde <memmove+0x20>
 8008fce:	1e43      	subs	r3, r0, #1
 8008fd0:	42a1      	cmp	r1, r4
 8008fd2:	d008      	beq.n	8008fe6 <memmove+0x28>
 8008fd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fd8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fdc:	e7f8      	b.n	8008fd0 <memmove+0x12>
 8008fde:	4601      	mov	r1, r0
 8008fe0:	4402      	add	r2, r0
 8008fe2:	428a      	cmp	r2, r1
 8008fe4:	d100      	bne.n	8008fe8 <memmove+0x2a>
 8008fe6:	bd10      	pop	{r4, pc}
 8008fe8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ff0:	e7f7      	b.n	8008fe2 <memmove+0x24>

08008ff2 <strncmp>:
 8008ff2:	b510      	push	{r4, lr}
 8008ff4:	b16a      	cbz	r2, 8009012 <strncmp+0x20>
 8008ff6:	3901      	subs	r1, #1
 8008ff8:	1884      	adds	r4, r0, r2
 8008ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ffe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009002:	429a      	cmp	r2, r3
 8009004:	d103      	bne.n	800900e <strncmp+0x1c>
 8009006:	42a0      	cmp	r0, r4
 8009008:	d001      	beq.n	800900e <strncmp+0x1c>
 800900a:	2a00      	cmp	r2, #0
 800900c:	d1f5      	bne.n	8008ffa <strncmp+0x8>
 800900e:	1ad0      	subs	r0, r2, r3
 8009010:	bd10      	pop	{r4, pc}
 8009012:	4610      	mov	r0, r2
 8009014:	e7fc      	b.n	8009010 <strncmp+0x1e>
	...

08009018 <_fstat_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	2300      	movs	r3, #0
 800901c:	4d06      	ldr	r5, [pc, #24]	@ (8009038 <_fstat_r+0x20>)
 800901e:	4604      	mov	r4, r0
 8009020:	4608      	mov	r0, r1
 8009022:	4611      	mov	r1, r2
 8009024:	602b      	str	r3, [r5, #0]
 8009026:	f7f9 fb67 	bl	80026f8 <_fstat>
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	d102      	bne.n	8009034 <_fstat_r+0x1c>
 800902e:	682b      	ldr	r3, [r5, #0]
 8009030:	b103      	cbz	r3, 8009034 <_fstat_r+0x1c>
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	bd38      	pop	{r3, r4, r5, pc}
 8009036:	bf00      	nop
 8009038:	2000044c 	.word	0x2000044c

0800903c <_isatty_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	2300      	movs	r3, #0
 8009040:	4d05      	ldr	r5, [pc, #20]	@ (8009058 <_isatty_r+0x1c>)
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	f7f9 fb65 	bl	8002716 <_isatty>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_isatty_r+0x1a>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	b103      	cbz	r3, 8009056 <_isatty_r+0x1a>
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	2000044c 	.word	0x2000044c

0800905c <_sbrk_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	2300      	movs	r3, #0
 8009060:	4d05      	ldr	r5, [pc, #20]	@ (8009078 <_sbrk_r+0x1c>)
 8009062:	4604      	mov	r4, r0
 8009064:	4608      	mov	r0, r1
 8009066:	602b      	str	r3, [r5, #0]
 8009068:	f7f9 fb6c 	bl	8002744 <_sbrk>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_sbrk_r+0x1a>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	b103      	cbz	r3, 8009076 <_sbrk_r+0x1a>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	2000044c 	.word	0x2000044c

0800907c <memcpy>:
 800907c:	440a      	add	r2, r1
 800907e:	4291      	cmp	r1, r2
 8009080:	f100 33ff 	add.w	r3, r0, #4294967295
 8009084:	d100      	bne.n	8009088 <memcpy+0xc>
 8009086:	4770      	bx	lr
 8009088:	b510      	push	{r4, lr}
 800908a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800908e:	4291      	cmp	r1, r2
 8009090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009094:	d1f9      	bne.n	800908a <memcpy+0xe>
 8009096:	bd10      	pop	{r4, pc}

08009098 <nan>:
 8009098:	2000      	movs	r0, #0
 800909a:	4901      	ldr	r1, [pc, #4]	@ (80090a0 <nan+0x8>)
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	7ff80000 	.word	0x7ff80000

080090a4 <__assert_func>:
 80090a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090a6:	4614      	mov	r4, r2
 80090a8:	461a      	mov	r2, r3
 80090aa:	4b09      	ldr	r3, [pc, #36]	@ (80090d0 <__assert_func+0x2c>)
 80090ac:	4605      	mov	r5, r0
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68d8      	ldr	r0, [r3, #12]
 80090b2:	b954      	cbnz	r4, 80090ca <__assert_func+0x26>
 80090b4:	4b07      	ldr	r3, [pc, #28]	@ (80090d4 <__assert_func+0x30>)
 80090b6:	461c      	mov	r4, r3
 80090b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090bc:	9100      	str	r1, [sp, #0]
 80090be:	462b      	mov	r3, r5
 80090c0:	4905      	ldr	r1, [pc, #20]	@ (80090d8 <__assert_func+0x34>)
 80090c2:	f000 fba7 	bl	8009814 <fiprintf>
 80090c6:	f000 fbb7 	bl	8009838 <abort>
 80090ca:	4b04      	ldr	r3, [pc, #16]	@ (80090dc <__assert_func+0x38>)
 80090cc:	e7f4      	b.n	80090b8 <__assert_func+0x14>
 80090ce:	bf00      	nop
 80090d0:	20000020 	.word	0x20000020
 80090d4:	0800b4bd 	.word	0x0800b4bd
 80090d8:	0800b48f 	.word	0x0800b48f
 80090dc:	0800b482 	.word	0x0800b482

080090e0 <_calloc_r>:
 80090e0:	b570      	push	{r4, r5, r6, lr}
 80090e2:	fba1 5402 	umull	r5, r4, r1, r2
 80090e6:	b93c      	cbnz	r4, 80090f8 <_calloc_r+0x18>
 80090e8:	4629      	mov	r1, r5
 80090ea:	f7fe f817 	bl	800711c <_malloc_r>
 80090ee:	4606      	mov	r6, r0
 80090f0:	b928      	cbnz	r0, 80090fe <_calloc_r+0x1e>
 80090f2:	2600      	movs	r6, #0
 80090f4:	4630      	mov	r0, r6
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
 80090f8:	220c      	movs	r2, #12
 80090fa:	6002      	str	r2, [r0, #0]
 80090fc:	e7f9      	b.n	80090f2 <_calloc_r+0x12>
 80090fe:	462a      	mov	r2, r5
 8009100:	4621      	mov	r1, r4
 8009102:	f7fd f8b5 	bl	8006270 <memset>
 8009106:	e7f5      	b.n	80090f4 <_calloc_r+0x14>

08009108 <rshift>:
 8009108:	6903      	ldr	r3, [r0, #16]
 800910a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800910e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009112:	f100 0414 	add.w	r4, r0, #20
 8009116:	ea4f 1261 	mov.w	r2, r1, asr #5
 800911a:	dd46      	ble.n	80091aa <rshift+0xa2>
 800911c:	f011 011f 	ands.w	r1, r1, #31
 8009120:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009124:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009128:	d10c      	bne.n	8009144 <rshift+0x3c>
 800912a:	4629      	mov	r1, r5
 800912c:	f100 0710 	add.w	r7, r0, #16
 8009130:	42b1      	cmp	r1, r6
 8009132:	d335      	bcc.n	80091a0 <rshift+0x98>
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	1eea      	subs	r2, r5, #3
 800913a:	4296      	cmp	r6, r2
 800913c:	bf38      	it	cc
 800913e:	2300      	movcc	r3, #0
 8009140:	4423      	add	r3, r4
 8009142:	e015      	b.n	8009170 <rshift+0x68>
 8009144:	46a1      	mov	r9, r4
 8009146:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800914a:	f1c1 0820 	rsb	r8, r1, #32
 800914e:	40cf      	lsrs	r7, r1
 8009150:	f105 0e04 	add.w	lr, r5, #4
 8009154:	4576      	cmp	r6, lr
 8009156:	46f4      	mov	ip, lr
 8009158:	d816      	bhi.n	8009188 <rshift+0x80>
 800915a:	1a9a      	subs	r2, r3, r2
 800915c:	0092      	lsls	r2, r2, #2
 800915e:	3a04      	subs	r2, #4
 8009160:	3501      	adds	r5, #1
 8009162:	42ae      	cmp	r6, r5
 8009164:	bf38      	it	cc
 8009166:	2200      	movcc	r2, #0
 8009168:	18a3      	adds	r3, r4, r2
 800916a:	50a7      	str	r7, [r4, r2]
 800916c:	b107      	cbz	r7, 8009170 <rshift+0x68>
 800916e:	3304      	adds	r3, #4
 8009170:	42a3      	cmp	r3, r4
 8009172:	eba3 0204 	sub.w	r2, r3, r4
 8009176:	bf08      	it	eq
 8009178:	2300      	moveq	r3, #0
 800917a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800917e:	6102      	str	r2, [r0, #16]
 8009180:	bf08      	it	eq
 8009182:	6143      	streq	r3, [r0, #20]
 8009184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009188:	f8dc c000 	ldr.w	ip, [ip]
 800918c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009190:	ea4c 0707 	orr.w	r7, ip, r7
 8009194:	f849 7b04 	str.w	r7, [r9], #4
 8009198:	f85e 7b04 	ldr.w	r7, [lr], #4
 800919c:	40cf      	lsrs	r7, r1
 800919e:	e7d9      	b.n	8009154 <rshift+0x4c>
 80091a0:	f851 cb04 	ldr.w	ip, [r1], #4
 80091a4:	f847 cf04 	str.w	ip, [r7, #4]!
 80091a8:	e7c2      	b.n	8009130 <rshift+0x28>
 80091aa:	4623      	mov	r3, r4
 80091ac:	e7e0      	b.n	8009170 <rshift+0x68>

080091ae <__hexdig_fun>:
 80091ae:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80091b2:	2b09      	cmp	r3, #9
 80091b4:	d802      	bhi.n	80091bc <__hexdig_fun+0xe>
 80091b6:	3820      	subs	r0, #32
 80091b8:	b2c0      	uxtb	r0, r0
 80091ba:	4770      	bx	lr
 80091bc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80091c0:	2b05      	cmp	r3, #5
 80091c2:	d801      	bhi.n	80091c8 <__hexdig_fun+0x1a>
 80091c4:	3847      	subs	r0, #71	@ 0x47
 80091c6:	e7f7      	b.n	80091b8 <__hexdig_fun+0xa>
 80091c8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80091cc:	2b05      	cmp	r3, #5
 80091ce:	d801      	bhi.n	80091d4 <__hexdig_fun+0x26>
 80091d0:	3827      	subs	r0, #39	@ 0x27
 80091d2:	e7f1      	b.n	80091b8 <__hexdig_fun+0xa>
 80091d4:	2000      	movs	r0, #0
 80091d6:	4770      	bx	lr

080091d8 <__gethex>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	468a      	mov	sl, r1
 80091de:	4690      	mov	r8, r2
 80091e0:	b085      	sub	sp, #20
 80091e2:	9302      	str	r3, [sp, #8]
 80091e4:	680b      	ldr	r3, [r1, #0]
 80091e6:	9001      	str	r0, [sp, #4]
 80091e8:	1c9c      	adds	r4, r3, #2
 80091ea:	46a1      	mov	r9, r4
 80091ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80091f0:	2830      	cmp	r0, #48	@ 0x30
 80091f2:	d0fa      	beq.n	80091ea <__gethex+0x12>
 80091f4:	eba9 0303 	sub.w	r3, r9, r3
 80091f8:	f1a3 0b02 	sub.w	fp, r3, #2
 80091fc:	f7ff ffd7 	bl	80091ae <__hexdig_fun>
 8009200:	4605      	mov	r5, r0
 8009202:	2800      	cmp	r0, #0
 8009204:	d168      	bne.n	80092d8 <__gethex+0x100>
 8009206:	2201      	movs	r2, #1
 8009208:	4648      	mov	r0, r9
 800920a:	499f      	ldr	r1, [pc, #636]	@ (8009488 <__gethex+0x2b0>)
 800920c:	f7ff fef1 	bl	8008ff2 <strncmp>
 8009210:	4607      	mov	r7, r0
 8009212:	2800      	cmp	r0, #0
 8009214:	d167      	bne.n	80092e6 <__gethex+0x10e>
 8009216:	f899 0001 	ldrb.w	r0, [r9, #1]
 800921a:	4626      	mov	r6, r4
 800921c:	f7ff ffc7 	bl	80091ae <__hexdig_fun>
 8009220:	2800      	cmp	r0, #0
 8009222:	d062      	beq.n	80092ea <__gethex+0x112>
 8009224:	4623      	mov	r3, r4
 8009226:	7818      	ldrb	r0, [r3, #0]
 8009228:	4699      	mov	r9, r3
 800922a:	2830      	cmp	r0, #48	@ 0x30
 800922c:	f103 0301 	add.w	r3, r3, #1
 8009230:	d0f9      	beq.n	8009226 <__gethex+0x4e>
 8009232:	f7ff ffbc 	bl	80091ae <__hexdig_fun>
 8009236:	fab0 f580 	clz	r5, r0
 800923a:	f04f 0b01 	mov.w	fp, #1
 800923e:	096d      	lsrs	r5, r5, #5
 8009240:	464a      	mov	r2, r9
 8009242:	4616      	mov	r6, r2
 8009244:	7830      	ldrb	r0, [r6, #0]
 8009246:	3201      	adds	r2, #1
 8009248:	f7ff ffb1 	bl	80091ae <__hexdig_fun>
 800924c:	2800      	cmp	r0, #0
 800924e:	d1f8      	bne.n	8009242 <__gethex+0x6a>
 8009250:	2201      	movs	r2, #1
 8009252:	4630      	mov	r0, r6
 8009254:	498c      	ldr	r1, [pc, #560]	@ (8009488 <__gethex+0x2b0>)
 8009256:	f7ff fecc 	bl	8008ff2 <strncmp>
 800925a:	2800      	cmp	r0, #0
 800925c:	d13f      	bne.n	80092de <__gethex+0x106>
 800925e:	b944      	cbnz	r4, 8009272 <__gethex+0x9a>
 8009260:	1c74      	adds	r4, r6, #1
 8009262:	4622      	mov	r2, r4
 8009264:	4616      	mov	r6, r2
 8009266:	7830      	ldrb	r0, [r6, #0]
 8009268:	3201      	adds	r2, #1
 800926a:	f7ff ffa0 	bl	80091ae <__hexdig_fun>
 800926e:	2800      	cmp	r0, #0
 8009270:	d1f8      	bne.n	8009264 <__gethex+0x8c>
 8009272:	1ba4      	subs	r4, r4, r6
 8009274:	00a7      	lsls	r7, r4, #2
 8009276:	7833      	ldrb	r3, [r6, #0]
 8009278:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800927c:	2b50      	cmp	r3, #80	@ 0x50
 800927e:	d13e      	bne.n	80092fe <__gethex+0x126>
 8009280:	7873      	ldrb	r3, [r6, #1]
 8009282:	2b2b      	cmp	r3, #43	@ 0x2b
 8009284:	d033      	beq.n	80092ee <__gethex+0x116>
 8009286:	2b2d      	cmp	r3, #45	@ 0x2d
 8009288:	d034      	beq.n	80092f4 <__gethex+0x11c>
 800928a:	2400      	movs	r4, #0
 800928c:	1c71      	adds	r1, r6, #1
 800928e:	7808      	ldrb	r0, [r1, #0]
 8009290:	f7ff ff8d 	bl	80091ae <__hexdig_fun>
 8009294:	1e43      	subs	r3, r0, #1
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b18      	cmp	r3, #24
 800929a:	d830      	bhi.n	80092fe <__gethex+0x126>
 800929c:	f1a0 0210 	sub.w	r2, r0, #16
 80092a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092a4:	f7ff ff83 	bl	80091ae <__hexdig_fun>
 80092a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80092ac:	fa5f fc8c 	uxtb.w	ip, ip
 80092b0:	f1bc 0f18 	cmp.w	ip, #24
 80092b4:	f04f 030a 	mov.w	r3, #10
 80092b8:	d91e      	bls.n	80092f8 <__gethex+0x120>
 80092ba:	b104      	cbz	r4, 80092be <__gethex+0xe6>
 80092bc:	4252      	negs	r2, r2
 80092be:	4417      	add	r7, r2
 80092c0:	f8ca 1000 	str.w	r1, [sl]
 80092c4:	b1ed      	cbz	r5, 8009302 <__gethex+0x12a>
 80092c6:	f1bb 0f00 	cmp.w	fp, #0
 80092ca:	bf0c      	ite	eq
 80092cc:	2506      	moveq	r5, #6
 80092ce:	2500      	movne	r5, #0
 80092d0:	4628      	mov	r0, r5
 80092d2:	b005      	add	sp, #20
 80092d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d8:	2500      	movs	r5, #0
 80092da:	462c      	mov	r4, r5
 80092dc:	e7b0      	b.n	8009240 <__gethex+0x68>
 80092de:	2c00      	cmp	r4, #0
 80092e0:	d1c7      	bne.n	8009272 <__gethex+0x9a>
 80092e2:	4627      	mov	r7, r4
 80092e4:	e7c7      	b.n	8009276 <__gethex+0x9e>
 80092e6:	464e      	mov	r6, r9
 80092e8:	462f      	mov	r7, r5
 80092ea:	2501      	movs	r5, #1
 80092ec:	e7c3      	b.n	8009276 <__gethex+0x9e>
 80092ee:	2400      	movs	r4, #0
 80092f0:	1cb1      	adds	r1, r6, #2
 80092f2:	e7cc      	b.n	800928e <__gethex+0xb6>
 80092f4:	2401      	movs	r4, #1
 80092f6:	e7fb      	b.n	80092f0 <__gethex+0x118>
 80092f8:	fb03 0002 	mla	r0, r3, r2, r0
 80092fc:	e7ce      	b.n	800929c <__gethex+0xc4>
 80092fe:	4631      	mov	r1, r6
 8009300:	e7de      	b.n	80092c0 <__gethex+0xe8>
 8009302:	4629      	mov	r1, r5
 8009304:	eba6 0309 	sub.w	r3, r6, r9
 8009308:	3b01      	subs	r3, #1
 800930a:	2b07      	cmp	r3, #7
 800930c:	dc0a      	bgt.n	8009324 <__gethex+0x14c>
 800930e:	9801      	ldr	r0, [sp, #4]
 8009310:	f7fd ff90 	bl	8007234 <_Balloc>
 8009314:	4604      	mov	r4, r0
 8009316:	b940      	cbnz	r0, 800932a <__gethex+0x152>
 8009318:	4602      	mov	r2, r0
 800931a:	21e4      	movs	r1, #228	@ 0xe4
 800931c:	4b5b      	ldr	r3, [pc, #364]	@ (800948c <__gethex+0x2b4>)
 800931e:	485c      	ldr	r0, [pc, #368]	@ (8009490 <__gethex+0x2b8>)
 8009320:	f7ff fec0 	bl	80090a4 <__assert_func>
 8009324:	3101      	adds	r1, #1
 8009326:	105b      	asrs	r3, r3, #1
 8009328:	e7ef      	b.n	800930a <__gethex+0x132>
 800932a:	2300      	movs	r3, #0
 800932c:	f100 0a14 	add.w	sl, r0, #20
 8009330:	4655      	mov	r5, sl
 8009332:	469b      	mov	fp, r3
 8009334:	45b1      	cmp	r9, r6
 8009336:	d337      	bcc.n	80093a8 <__gethex+0x1d0>
 8009338:	f845 bb04 	str.w	fp, [r5], #4
 800933c:	eba5 050a 	sub.w	r5, r5, sl
 8009340:	10ad      	asrs	r5, r5, #2
 8009342:	6125      	str	r5, [r4, #16]
 8009344:	4658      	mov	r0, fp
 8009346:	f7fe f867 	bl	8007418 <__hi0bits>
 800934a:	016d      	lsls	r5, r5, #5
 800934c:	f8d8 6000 	ldr.w	r6, [r8]
 8009350:	1a2d      	subs	r5, r5, r0
 8009352:	42b5      	cmp	r5, r6
 8009354:	dd54      	ble.n	8009400 <__gethex+0x228>
 8009356:	1bad      	subs	r5, r5, r6
 8009358:	4629      	mov	r1, r5
 800935a:	4620      	mov	r0, r4
 800935c:	f7fe fbef 	bl	8007b3e <__any_on>
 8009360:	4681      	mov	r9, r0
 8009362:	b178      	cbz	r0, 8009384 <__gethex+0x1ac>
 8009364:	f04f 0901 	mov.w	r9, #1
 8009368:	1e6b      	subs	r3, r5, #1
 800936a:	1159      	asrs	r1, r3, #5
 800936c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009370:	f003 021f 	and.w	r2, r3, #31
 8009374:	fa09 f202 	lsl.w	r2, r9, r2
 8009378:	420a      	tst	r2, r1
 800937a:	d003      	beq.n	8009384 <__gethex+0x1ac>
 800937c:	454b      	cmp	r3, r9
 800937e:	dc36      	bgt.n	80093ee <__gethex+0x216>
 8009380:	f04f 0902 	mov.w	r9, #2
 8009384:	4629      	mov	r1, r5
 8009386:	4620      	mov	r0, r4
 8009388:	f7ff febe 	bl	8009108 <rshift>
 800938c:	442f      	add	r7, r5
 800938e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009392:	42bb      	cmp	r3, r7
 8009394:	da42      	bge.n	800941c <__gethex+0x244>
 8009396:	4621      	mov	r1, r4
 8009398:	9801      	ldr	r0, [sp, #4]
 800939a:	f7fd ff8b 	bl	80072b4 <_Bfree>
 800939e:	2300      	movs	r3, #0
 80093a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093a2:	25a3      	movs	r5, #163	@ 0xa3
 80093a4:	6013      	str	r3, [r2, #0]
 80093a6:	e793      	b.n	80092d0 <__gethex+0xf8>
 80093a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80093ac:	2a2e      	cmp	r2, #46	@ 0x2e
 80093ae:	d012      	beq.n	80093d6 <__gethex+0x1fe>
 80093b0:	2b20      	cmp	r3, #32
 80093b2:	d104      	bne.n	80093be <__gethex+0x1e6>
 80093b4:	f845 bb04 	str.w	fp, [r5], #4
 80093b8:	f04f 0b00 	mov.w	fp, #0
 80093bc:	465b      	mov	r3, fp
 80093be:	7830      	ldrb	r0, [r6, #0]
 80093c0:	9303      	str	r3, [sp, #12]
 80093c2:	f7ff fef4 	bl	80091ae <__hexdig_fun>
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	f000 000f 	and.w	r0, r0, #15
 80093cc:	4098      	lsls	r0, r3
 80093ce:	ea4b 0b00 	orr.w	fp, fp, r0
 80093d2:	3304      	adds	r3, #4
 80093d4:	e7ae      	b.n	8009334 <__gethex+0x15c>
 80093d6:	45b1      	cmp	r9, r6
 80093d8:	d8ea      	bhi.n	80093b0 <__gethex+0x1d8>
 80093da:	2201      	movs	r2, #1
 80093dc:	4630      	mov	r0, r6
 80093de:	492a      	ldr	r1, [pc, #168]	@ (8009488 <__gethex+0x2b0>)
 80093e0:	9303      	str	r3, [sp, #12]
 80093e2:	f7ff fe06 	bl	8008ff2 <strncmp>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d1e1      	bne.n	80093b0 <__gethex+0x1d8>
 80093ec:	e7a2      	b.n	8009334 <__gethex+0x15c>
 80093ee:	4620      	mov	r0, r4
 80093f0:	1ea9      	subs	r1, r5, #2
 80093f2:	f7fe fba4 	bl	8007b3e <__any_on>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0c2      	beq.n	8009380 <__gethex+0x1a8>
 80093fa:	f04f 0903 	mov.w	r9, #3
 80093fe:	e7c1      	b.n	8009384 <__gethex+0x1ac>
 8009400:	da09      	bge.n	8009416 <__gethex+0x23e>
 8009402:	1b75      	subs	r5, r6, r5
 8009404:	4621      	mov	r1, r4
 8009406:	462a      	mov	r2, r5
 8009408:	9801      	ldr	r0, [sp, #4]
 800940a:	f7fe f969 	bl	80076e0 <__lshift>
 800940e:	4604      	mov	r4, r0
 8009410:	1b7f      	subs	r7, r7, r5
 8009412:	f100 0a14 	add.w	sl, r0, #20
 8009416:	f04f 0900 	mov.w	r9, #0
 800941a:	e7b8      	b.n	800938e <__gethex+0x1b6>
 800941c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009420:	42bd      	cmp	r5, r7
 8009422:	dd6f      	ble.n	8009504 <__gethex+0x32c>
 8009424:	1bed      	subs	r5, r5, r7
 8009426:	42ae      	cmp	r6, r5
 8009428:	dc34      	bgt.n	8009494 <__gethex+0x2bc>
 800942a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800942e:	2b02      	cmp	r3, #2
 8009430:	d022      	beq.n	8009478 <__gethex+0x2a0>
 8009432:	2b03      	cmp	r3, #3
 8009434:	d024      	beq.n	8009480 <__gethex+0x2a8>
 8009436:	2b01      	cmp	r3, #1
 8009438:	d115      	bne.n	8009466 <__gethex+0x28e>
 800943a:	42ae      	cmp	r6, r5
 800943c:	d113      	bne.n	8009466 <__gethex+0x28e>
 800943e:	2e01      	cmp	r6, #1
 8009440:	d10b      	bne.n	800945a <__gethex+0x282>
 8009442:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009446:	9a02      	ldr	r2, [sp, #8]
 8009448:	2562      	movs	r5, #98	@ 0x62
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	2301      	movs	r3, #1
 800944e:	6123      	str	r3, [r4, #16]
 8009450:	f8ca 3000 	str.w	r3, [sl]
 8009454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009456:	601c      	str	r4, [r3, #0]
 8009458:	e73a      	b.n	80092d0 <__gethex+0xf8>
 800945a:	4620      	mov	r0, r4
 800945c:	1e71      	subs	r1, r6, #1
 800945e:	f7fe fb6e 	bl	8007b3e <__any_on>
 8009462:	2800      	cmp	r0, #0
 8009464:	d1ed      	bne.n	8009442 <__gethex+0x26a>
 8009466:	4621      	mov	r1, r4
 8009468:	9801      	ldr	r0, [sp, #4]
 800946a:	f7fd ff23 	bl	80072b4 <_Bfree>
 800946e:	2300      	movs	r3, #0
 8009470:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009472:	2550      	movs	r5, #80	@ 0x50
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	e72b      	b.n	80092d0 <__gethex+0xf8>
 8009478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1f3      	bne.n	8009466 <__gethex+0x28e>
 800947e:	e7e0      	b.n	8009442 <__gethex+0x26a>
 8009480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1dd      	bne.n	8009442 <__gethex+0x26a>
 8009486:	e7ee      	b.n	8009466 <__gethex+0x28e>
 8009488:	0800b310 	.word	0x0800b310
 800948c:	0800b1a7 	.word	0x0800b1a7
 8009490:	0800b4be 	.word	0x0800b4be
 8009494:	1e6f      	subs	r7, r5, #1
 8009496:	f1b9 0f00 	cmp.w	r9, #0
 800949a:	d130      	bne.n	80094fe <__gethex+0x326>
 800949c:	b127      	cbz	r7, 80094a8 <__gethex+0x2d0>
 800949e:	4639      	mov	r1, r7
 80094a0:	4620      	mov	r0, r4
 80094a2:	f7fe fb4c 	bl	8007b3e <__any_on>
 80094a6:	4681      	mov	r9, r0
 80094a8:	2301      	movs	r3, #1
 80094aa:	4629      	mov	r1, r5
 80094ac:	1b76      	subs	r6, r6, r5
 80094ae:	2502      	movs	r5, #2
 80094b0:	117a      	asrs	r2, r7, #5
 80094b2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80094b6:	f007 071f 	and.w	r7, r7, #31
 80094ba:	40bb      	lsls	r3, r7
 80094bc:	4213      	tst	r3, r2
 80094be:	4620      	mov	r0, r4
 80094c0:	bf18      	it	ne
 80094c2:	f049 0902 	orrne.w	r9, r9, #2
 80094c6:	f7ff fe1f 	bl	8009108 <rshift>
 80094ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80094ce:	f1b9 0f00 	cmp.w	r9, #0
 80094d2:	d047      	beq.n	8009564 <__gethex+0x38c>
 80094d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d015      	beq.n	8009508 <__gethex+0x330>
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d017      	beq.n	8009510 <__gethex+0x338>
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d109      	bne.n	80094f8 <__gethex+0x320>
 80094e4:	f019 0f02 	tst.w	r9, #2
 80094e8:	d006      	beq.n	80094f8 <__gethex+0x320>
 80094ea:	f8da 3000 	ldr.w	r3, [sl]
 80094ee:	ea49 0903 	orr.w	r9, r9, r3
 80094f2:	f019 0f01 	tst.w	r9, #1
 80094f6:	d10e      	bne.n	8009516 <__gethex+0x33e>
 80094f8:	f045 0510 	orr.w	r5, r5, #16
 80094fc:	e032      	b.n	8009564 <__gethex+0x38c>
 80094fe:	f04f 0901 	mov.w	r9, #1
 8009502:	e7d1      	b.n	80094a8 <__gethex+0x2d0>
 8009504:	2501      	movs	r5, #1
 8009506:	e7e2      	b.n	80094ce <__gethex+0x2f6>
 8009508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800950a:	f1c3 0301 	rsb	r3, r3, #1
 800950e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d0f0      	beq.n	80094f8 <__gethex+0x320>
 8009516:	f04f 0c00 	mov.w	ip, #0
 800951a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800951e:	f104 0314 	add.w	r3, r4, #20
 8009522:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009526:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800952a:	4618      	mov	r0, r3
 800952c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009530:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009534:	d01b      	beq.n	800956e <__gethex+0x396>
 8009536:	3201      	adds	r2, #1
 8009538:	6002      	str	r2, [r0, #0]
 800953a:	2d02      	cmp	r5, #2
 800953c:	f104 0314 	add.w	r3, r4, #20
 8009540:	d13c      	bne.n	80095bc <__gethex+0x3e4>
 8009542:	f8d8 2000 	ldr.w	r2, [r8]
 8009546:	3a01      	subs	r2, #1
 8009548:	42b2      	cmp	r2, r6
 800954a:	d109      	bne.n	8009560 <__gethex+0x388>
 800954c:	2201      	movs	r2, #1
 800954e:	1171      	asrs	r1, r6, #5
 8009550:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009554:	f006 061f 	and.w	r6, r6, #31
 8009558:	fa02 f606 	lsl.w	r6, r2, r6
 800955c:	421e      	tst	r6, r3
 800955e:	d13a      	bne.n	80095d6 <__gethex+0x3fe>
 8009560:	f045 0520 	orr.w	r5, r5, #32
 8009564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009566:	601c      	str	r4, [r3, #0]
 8009568:	9b02      	ldr	r3, [sp, #8]
 800956a:	601f      	str	r7, [r3, #0]
 800956c:	e6b0      	b.n	80092d0 <__gethex+0xf8>
 800956e:	4299      	cmp	r1, r3
 8009570:	f843 cc04 	str.w	ip, [r3, #-4]
 8009574:	d8d9      	bhi.n	800952a <__gethex+0x352>
 8009576:	68a3      	ldr	r3, [r4, #8]
 8009578:	459b      	cmp	fp, r3
 800957a:	db17      	blt.n	80095ac <__gethex+0x3d4>
 800957c:	6861      	ldr	r1, [r4, #4]
 800957e:	9801      	ldr	r0, [sp, #4]
 8009580:	3101      	adds	r1, #1
 8009582:	f7fd fe57 	bl	8007234 <_Balloc>
 8009586:	4681      	mov	r9, r0
 8009588:	b918      	cbnz	r0, 8009592 <__gethex+0x3ba>
 800958a:	4602      	mov	r2, r0
 800958c:	2184      	movs	r1, #132	@ 0x84
 800958e:	4b19      	ldr	r3, [pc, #100]	@ (80095f4 <__gethex+0x41c>)
 8009590:	e6c5      	b.n	800931e <__gethex+0x146>
 8009592:	6922      	ldr	r2, [r4, #16]
 8009594:	f104 010c 	add.w	r1, r4, #12
 8009598:	3202      	adds	r2, #2
 800959a:	0092      	lsls	r2, r2, #2
 800959c:	300c      	adds	r0, #12
 800959e:	f7ff fd6d 	bl	800907c <memcpy>
 80095a2:	4621      	mov	r1, r4
 80095a4:	9801      	ldr	r0, [sp, #4]
 80095a6:	f7fd fe85 	bl	80072b4 <_Bfree>
 80095aa:	464c      	mov	r4, r9
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	6122      	str	r2, [r4, #16]
 80095b2:	2201      	movs	r2, #1
 80095b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095b8:	615a      	str	r2, [r3, #20]
 80095ba:	e7be      	b.n	800953a <__gethex+0x362>
 80095bc:	6922      	ldr	r2, [r4, #16]
 80095be:	455a      	cmp	r2, fp
 80095c0:	dd0b      	ble.n	80095da <__gethex+0x402>
 80095c2:	2101      	movs	r1, #1
 80095c4:	4620      	mov	r0, r4
 80095c6:	f7ff fd9f 	bl	8009108 <rshift>
 80095ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095ce:	3701      	adds	r7, #1
 80095d0:	42bb      	cmp	r3, r7
 80095d2:	f6ff aee0 	blt.w	8009396 <__gethex+0x1be>
 80095d6:	2501      	movs	r5, #1
 80095d8:	e7c2      	b.n	8009560 <__gethex+0x388>
 80095da:	f016 061f 	ands.w	r6, r6, #31
 80095de:	d0fa      	beq.n	80095d6 <__gethex+0x3fe>
 80095e0:	4453      	add	r3, sl
 80095e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80095e6:	f7fd ff17 	bl	8007418 <__hi0bits>
 80095ea:	f1c6 0620 	rsb	r6, r6, #32
 80095ee:	42b0      	cmp	r0, r6
 80095f0:	dbe7      	blt.n	80095c2 <__gethex+0x3ea>
 80095f2:	e7f0      	b.n	80095d6 <__gethex+0x3fe>
 80095f4:	0800b1a7 	.word	0x0800b1a7

080095f8 <L_shift>:
 80095f8:	f1c2 0208 	rsb	r2, r2, #8
 80095fc:	0092      	lsls	r2, r2, #2
 80095fe:	b570      	push	{r4, r5, r6, lr}
 8009600:	f1c2 0620 	rsb	r6, r2, #32
 8009604:	6843      	ldr	r3, [r0, #4]
 8009606:	6804      	ldr	r4, [r0, #0]
 8009608:	fa03 f506 	lsl.w	r5, r3, r6
 800960c:	432c      	orrs	r4, r5
 800960e:	40d3      	lsrs	r3, r2
 8009610:	6004      	str	r4, [r0, #0]
 8009612:	f840 3f04 	str.w	r3, [r0, #4]!
 8009616:	4288      	cmp	r0, r1
 8009618:	d3f4      	bcc.n	8009604 <L_shift+0xc>
 800961a:	bd70      	pop	{r4, r5, r6, pc}

0800961c <__match>:
 800961c:	b530      	push	{r4, r5, lr}
 800961e:	6803      	ldr	r3, [r0, #0]
 8009620:	3301      	adds	r3, #1
 8009622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009626:	b914      	cbnz	r4, 800962e <__match+0x12>
 8009628:	6003      	str	r3, [r0, #0]
 800962a:	2001      	movs	r0, #1
 800962c:	bd30      	pop	{r4, r5, pc}
 800962e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009632:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009636:	2d19      	cmp	r5, #25
 8009638:	bf98      	it	ls
 800963a:	3220      	addls	r2, #32
 800963c:	42a2      	cmp	r2, r4
 800963e:	d0f0      	beq.n	8009622 <__match+0x6>
 8009640:	2000      	movs	r0, #0
 8009642:	e7f3      	b.n	800962c <__match+0x10>

08009644 <__hexnan>:
 8009644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009648:	2500      	movs	r5, #0
 800964a:	680b      	ldr	r3, [r1, #0]
 800964c:	4682      	mov	sl, r0
 800964e:	115e      	asrs	r6, r3, #5
 8009650:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009654:	f013 031f 	ands.w	r3, r3, #31
 8009658:	bf18      	it	ne
 800965a:	3604      	addne	r6, #4
 800965c:	1f37      	subs	r7, r6, #4
 800965e:	4690      	mov	r8, r2
 8009660:	46b9      	mov	r9, r7
 8009662:	463c      	mov	r4, r7
 8009664:	46ab      	mov	fp, r5
 8009666:	b087      	sub	sp, #28
 8009668:	6801      	ldr	r1, [r0, #0]
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009670:	9502      	str	r5, [sp, #8]
 8009672:	784a      	ldrb	r2, [r1, #1]
 8009674:	1c4b      	adds	r3, r1, #1
 8009676:	9303      	str	r3, [sp, #12]
 8009678:	b342      	cbz	r2, 80096cc <__hexnan+0x88>
 800967a:	4610      	mov	r0, r2
 800967c:	9105      	str	r1, [sp, #20]
 800967e:	9204      	str	r2, [sp, #16]
 8009680:	f7ff fd95 	bl	80091ae <__hexdig_fun>
 8009684:	2800      	cmp	r0, #0
 8009686:	d151      	bne.n	800972c <__hexnan+0xe8>
 8009688:	9a04      	ldr	r2, [sp, #16]
 800968a:	9905      	ldr	r1, [sp, #20]
 800968c:	2a20      	cmp	r2, #32
 800968e:	d818      	bhi.n	80096c2 <__hexnan+0x7e>
 8009690:	9b02      	ldr	r3, [sp, #8]
 8009692:	459b      	cmp	fp, r3
 8009694:	dd13      	ble.n	80096be <__hexnan+0x7a>
 8009696:	454c      	cmp	r4, r9
 8009698:	d206      	bcs.n	80096a8 <__hexnan+0x64>
 800969a:	2d07      	cmp	r5, #7
 800969c:	dc04      	bgt.n	80096a8 <__hexnan+0x64>
 800969e:	462a      	mov	r2, r5
 80096a0:	4649      	mov	r1, r9
 80096a2:	4620      	mov	r0, r4
 80096a4:	f7ff ffa8 	bl	80095f8 <L_shift>
 80096a8:	4544      	cmp	r4, r8
 80096aa:	d952      	bls.n	8009752 <__hexnan+0x10e>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f1a4 0904 	sub.w	r9, r4, #4
 80096b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80096b6:	461d      	mov	r5, r3
 80096b8:	464c      	mov	r4, r9
 80096ba:	f8cd b008 	str.w	fp, [sp, #8]
 80096be:	9903      	ldr	r1, [sp, #12]
 80096c0:	e7d7      	b.n	8009672 <__hexnan+0x2e>
 80096c2:	2a29      	cmp	r2, #41	@ 0x29
 80096c4:	d157      	bne.n	8009776 <__hexnan+0x132>
 80096c6:	3102      	adds	r1, #2
 80096c8:	f8ca 1000 	str.w	r1, [sl]
 80096cc:	f1bb 0f00 	cmp.w	fp, #0
 80096d0:	d051      	beq.n	8009776 <__hexnan+0x132>
 80096d2:	454c      	cmp	r4, r9
 80096d4:	d206      	bcs.n	80096e4 <__hexnan+0xa0>
 80096d6:	2d07      	cmp	r5, #7
 80096d8:	dc04      	bgt.n	80096e4 <__hexnan+0xa0>
 80096da:	462a      	mov	r2, r5
 80096dc:	4649      	mov	r1, r9
 80096de:	4620      	mov	r0, r4
 80096e0:	f7ff ff8a 	bl	80095f8 <L_shift>
 80096e4:	4544      	cmp	r4, r8
 80096e6:	d936      	bls.n	8009756 <__hexnan+0x112>
 80096e8:	4623      	mov	r3, r4
 80096ea:	f1a8 0204 	sub.w	r2, r8, #4
 80096ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80096f2:	429f      	cmp	r7, r3
 80096f4:	f842 1f04 	str.w	r1, [r2, #4]!
 80096f8:	d2f9      	bcs.n	80096ee <__hexnan+0xaa>
 80096fa:	1b3b      	subs	r3, r7, r4
 80096fc:	f023 0303 	bic.w	r3, r3, #3
 8009700:	3304      	adds	r3, #4
 8009702:	3401      	adds	r4, #1
 8009704:	3e03      	subs	r6, #3
 8009706:	42b4      	cmp	r4, r6
 8009708:	bf88      	it	hi
 800970a:	2304      	movhi	r3, #4
 800970c:	2200      	movs	r2, #0
 800970e:	4443      	add	r3, r8
 8009710:	f843 2b04 	str.w	r2, [r3], #4
 8009714:	429f      	cmp	r7, r3
 8009716:	d2fb      	bcs.n	8009710 <__hexnan+0xcc>
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	b91b      	cbnz	r3, 8009724 <__hexnan+0xe0>
 800971c:	4547      	cmp	r7, r8
 800971e:	d128      	bne.n	8009772 <__hexnan+0x12e>
 8009720:	2301      	movs	r3, #1
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	2005      	movs	r0, #5
 8009726:	b007      	add	sp, #28
 8009728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972c:	3501      	adds	r5, #1
 800972e:	2d08      	cmp	r5, #8
 8009730:	f10b 0b01 	add.w	fp, fp, #1
 8009734:	dd06      	ble.n	8009744 <__hexnan+0x100>
 8009736:	4544      	cmp	r4, r8
 8009738:	d9c1      	bls.n	80096be <__hexnan+0x7a>
 800973a:	2300      	movs	r3, #0
 800973c:	2501      	movs	r5, #1
 800973e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009742:	3c04      	subs	r4, #4
 8009744:	6822      	ldr	r2, [r4, #0]
 8009746:	f000 000f 	and.w	r0, r0, #15
 800974a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800974e:	6020      	str	r0, [r4, #0]
 8009750:	e7b5      	b.n	80096be <__hexnan+0x7a>
 8009752:	2508      	movs	r5, #8
 8009754:	e7b3      	b.n	80096be <__hexnan+0x7a>
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d0dd      	beq.n	8009718 <__hexnan+0xd4>
 800975c:	f04f 32ff 	mov.w	r2, #4294967295
 8009760:	f1c3 0320 	rsb	r3, r3, #32
 8009764:	40da      	lsrs	r2, r3
 8009766:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800976a:	4013      	ands	r3, r2
 800976c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009770:	e7d2      	b.n	8009718 <__hexnan+0xd4>
 8009772:	3f04      	subs	r7, #4
 8009774:	e7d0      	b.n	8009718 <__hexnan+0xd4>
 8009776:	2004      	movs	r0, #4
 8009778:	e7d5      	b.n	8009726 <__hexnan+0xe2>

0800977a <__ascii_mbtowc>:
 800977a:	b082      	sub	sp, #8
 800977c:	b901      	cbnz	r1, 8009780 <__ascii_mbtowc+0x6>
 800977e:	a901      	add	r1, sp, #4
 8009780:	b142      	cbz	r2, 8009794 <__ascii_mbtowc+0x1a>
 8009782:	b14b      	cbz	r3, 8009798 <__ascii_mbtowc+0x1e>
 8009784:	7813      	ldrb	r3, [r2, #0]
 8009786:	600b      	str	r3, [r1, #0]
 8009788:	7812      	ldrb	r2, [r2, #0]
 800978a:	1e10      	subs	r0, r2, #0
 800978c:	bf18      	it	ne
 800978e:	2001      	movne	r0, #1
 8009790:	b002      	add	sp, #8
 8009792:	4770      	bx	lr
 8009794:	4610      	mov	r0, r2
 8009796:	e7fb      	b.n	8009790 <__ascii_mbtowc+0x16>
 8009798:	f06f 0001 	mvn.w	r0, #1
 800979c:	e7f8      	b.n	8009790 <__ascii_mbtowc+0x16>

0800979e <_realloc_r>:
 800979e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a2:	4680      	mov	r8, r0
 80097a4:	4615      	mov	r5, r2
 80097a6:	460c      	mov	r4, r1
 80097a8:	b921      	cbnz	r1, 80097b4 <_realloc_r+0x16>
 80097aa:	4611      	mov	r1, r2
 80097ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097b0:	f7fd bcb4 	b.w	800711c <_malloc_r>
 80097b4:	b92a      	cbnz	r2, 80097c2 <_realloc_r+0x24>
 80097b6:	f7fd fc3f 	bl	8007038 <_free_r>
 80097ba:	2400      	movs	r4, #0
 80097bc:	4620      	mov	r0, r4
 80097be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c2:	f000 f840 	bl	8009846 <_malloc_usable_size_r>
 80097c6:	4285      	cmp	r5, r0
 80097c8:	4606      	mov	r6, r0
 80097ca:	d802      	bhi.n	80097d2 <_realloc_r+0x34>
 80097cc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80097d0:	d8f4      	bhi.n	80097bc <_realloc_r+0x1e>
 80097d2:	4629      	mov	r1, r5
 80097d4:	4640      	mov	r0, r8
 80097d6:	f7fd fca1 	bl	800711c <_malloc_r>
 80097da:	4607      	mov	r7, r0
 80097dc:	2800      	cmp	r0, #0
 80097de:	d0ec      	beq.n	80097ba <_realloc_r+0x1c>
 80097e0:	42b5      	cmp	r5, r6
 80097e2:	462a      	mov	r2, r5
 80097e4:	4621      	mov	r1, r4
 80097e6:	bf28      	it	cs
 80097e8:	4632      	movcs	r2, r6
 80097ea:	f7ff fc47 	bl	800907c <memcpy>
 80097ee:	4621      	mov	r1, r4
 80097f0:	4640      	mov	r0, r8
 80097f2:	f7fd fc21 	bl	8007038 <_free_r>
 80097f6:	463c      	mov	r4, r7
 80097f8:	e7e0      	b.n	80097bc <_realloc_r+0x1e>

080097fa <__ascii_wctomb>:
 80097fa:	4603      	mov	r3, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	b141      	cbz	r1, 8009812 <__ascii_wctomb+0x18>
 8009800:	2aff      	cmp	r2, #255	@ 0xff
 8009802:	d904      	bls.n	800980e <__ascii_wctomb+0x14>
 8009804:	228a      	movs	r2, #138	@ 0x8a
 8009806:	f04f 30ff 	mov.w	r0, #4294967295
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	4770      	bx	lr
 800980e:	2001      	movs	r0, #1
 8009810:	700a      	strb	r2, [r1, #0]
 8009812:	4770      	bx	lr

08009814 <fiprintf>:
 8009814:	b40e      	push	{r1, r2, r3}
 8009816:	b503      	push	{r0, r1, lr}
 8009818:	4601      	mov	r1, r0
 800981a:	ab03      	add	r3, sp, #12
 800981c:	4805      	ldr	r0, [pc, #20]	@ (8009834 <fiprintf+0x20>)
 800981e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009822:	6800      	ldr	r0, [r0, #0]
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	f7ff f9a9 	bl	8008b7c <_vfiprintf_r>
 800982a:	b002      	add	sp, #8
 800982c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009830:	b003      	add	sp, #12
 8009832:	4770      	bx	lr
 8009834:	20000020 	.word	0x20000020

08009838 <abort>:
 8009838:	2006      	movs	r0, #6
 800983a:	b508      	push	{r3, lr}
 800983c:	f000 f834 	bl	80098a8 <raise>
 8009840:	2001      	movs	r0, #1
 8009842:	f7f8 ff26 	bl	8002692 <_exit>

08009846 <_malloc_usable_size_r>:
 8009846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800984a:	1f18      	subs	r0, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	bfbc      	itt	lt
 8009850:	580b      	ldrlt	r3, [r1, r0]
 8009852:	18c0      	addlt	r0, r0, r3
 8009854:	4770      	bx	lr

08009856 <_raise_r>:
 8009856:	291f      	cmp	r1, #31
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4605      	mov	r5, r0
 800985c:	460c      	mov	r4, r1
 800985e:	d904      	bls.n	800986a <_raise_r+0x14>
 8009860:	2316      	movs	r3, #22
 8009862:	6003      	str	r3, [r0, #0]
 8009864:	f04f 30ff 	mov.w	r0, #4294967295
 8009868:	bd38      	pop	{r3, r4, r5, pc}
 800986a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800986c:	b112      	cbz	r2, 8009874 <_raise_r+0x1e>
 800986e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009872:	b94b      	cbnz	r3, 8009888 <_raise_r+0x32>
 8009874:	4628      	mov	r0, r5
 8009876:	f000 f831 	bl	80098dc <_getpid_r>
 800987a:	4622      	mov	r2, r4
 800987c:	4601      	mov	r1, r0
 800987e:	4628      	mov	r0, r5
 8009880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009884:	f000 b818 	b.w	80098b8 <_kill_r>
 8009888:	2b01      	cmp	r3, #1
 800988a:	d00a      	beq.n	80098a2 <_raise_r+0x4c>
 800988c:	1c59      	adds	r1, r3, #1
 800988e:	d103      	bne.n	8009898 <_raise_r+0x42>
 8009890:	2316      	movs	r3, #22
 8009892:	6003      	str	r3, [r0, #0]
 8009894:	2001      	movs	r0, #1
 8009896:	e7e7      	b.n	8009868 <_raise_r+0x12>
 8009898:	2100      	movs	r1, #0
 800989a:	4620      	mov	r0, r4
 800989c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098a0:	4798      	blx	r3
 80098a2:	2000      	movs	r0, #0
 80098a4:	e7e0      	b.n	8009868 <_raise_r+0x12>
	...

080098a8 <raise>:
 80098a8:	4b02      	ldr	r3, [pc, #8]	@ (80098b4 <raise+0xc>)
 80098aa:	4601      	mov	r1, r0
 80098ac:	6818      	ldr	r0, [r3, #0]
 80098ae:	f7ff bfd2 	b.w	8009856 <_raise_r>
 80098b2:	bf00      	nop
 80098b4:	20000020 	.word	0x20000020

080098b8 <_kill_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	2300      	movs	r3, #0
 80098bc:	4d06      	ldr	r5, [pc, #24]	@ (80098d8 <_kill_r+0x20>)
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	4611      	mov	r1, r2
 80098c4:	602b      	str	r3, [r5, #0]
 80098c6:	f7f8 fed4 	bl	8002672 <_kill>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	d102      	bne.n	80098d4 <_kill_r+0x1c>
 80098ce:	682b      	ldr	r3, [r5, #0]
 80098d0:	b103      	cbz	r3, 80098d4 <_kill_r+0x1c>
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	bd38      	pop	{r3, r4, r5, pc}
 80098d6:	bf00      	nop
 80098d8:	2000044c 	.word	0x2000044c

080098dc <_getpid_r>:
 80098dc:	f7f8 bec2 	b.w	8002664 <_getpid>

080098e0 <asin>:
 80098e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e2:	4604      	mov	r4, r0
 80098e4:	460d      	mov	r5, r1
 80098e6:	f000 f96f 	bl	8009bc8 <__ieee754_asin>
 80098ea:	4622      	mov	r2, r4
 80098ec:	4606      	mov	r6, r0
 80098ee:	460f      	mov	r7, r1
 80098f0:	462b      	mov	r3, r5
 80098f2:	4620      	mov	r0, r4
 80098f4:	4629      	mov	r1, r5
 80098f6:	f7f7 f889 	bl	8000a0c <__aeabi_dcmpun>
 80098fa:	b988      	cbnz	r0, 8009920 <asin+0x40>
 80098fc:	4620      	mov	r0, r4
 80098fe:	4629      	mov	r1, r5
 8009900:	f000 f880 	bl	8009a04 <fabs>
 8009904:	2200      	movs	r2, #0
 8009906:	4b08      	ldr	r3, [pc, #32]	@ (8009928 <asin+0x48>)
 8009908:	f7f7 f876 	bl	80009f8 <__aeabi_dcmpgt>
 800990c:	b140      	cbz	r0, 8009920 <asin+0x40>
 800990e:	f7fc fd01 	bl	8006314 <__errno>
 8009912:	2321      	movs	r3, #33	@ 0x21
 8009914:	6003      	str	r3, [r0, #0]
 8009916:	4805      	ldr	r0, [pc, #20]	@ (800992c <asin+0x4c>)
 8009918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800991c:	f7ff bbbc 	b.w	8009098 <nan>
 8009920:	4630      	mov	r0, r6
 8009922:	4639      	mov	r1, r7
 8009924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009926:	bf00      	nop
 8009928:	3ff00000 	.word	0x3ff00000
 800992c:	0800b4bd 	.word	0x0800b4bd

08009930 <atan2>:
 8009930:	f000 bb46 	b.w	8009fc0 <__ieee754_atan2>

08009934 <pow>:
 8009934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009938:	4614      	mov	r4, r2
 800993a:	461d      	mov	r5, r3
 800993c:	4680      	mov	r8, r0
 800993e:	4689      	mov	r9, r1
 8009940:	f000 fc12 	bl	800a168 <__ieee754_pow>
 8009944:	4622      	mov	r2, r4
 8009946:	4606      	mov	r6, r0
 8009948:	460f      	mov	r7, r1
 800994a:	462b      	mov	r3, r5
 800994c:	4620      	mov	r0, r4
 800994e:	4629      	mov	r1, r5
 8009950:	f7f7 f85c 	bl	8000a0c <__aeabi_dcmpun>
 8009954:	bbc8      	cbnz	r0, 80099ca <pow+0x96>
 8009956:	2200      	movs	r2, #0
 8009958:	2300      	movs	r3, #0
 800995a:	4640      	mov	r0, r8
 800995c:	4649      	mov	r1, r9
 800995e:	f7f7 f823 	bl	80009a8 <__aeabi_dcmpeq>
 8009962:	b1b8      	cbz	r0, 8009994 <pow+0x60>
 8009964:	2200      	movs	r2, #0
 8009966:	2300      	movs	r3, #0
 8009968:	4620      	mov	r0, r4
 800996a:	4629      	mov	r1, r5
 800996c:	f7f7 f81c 	bl	80009a8 <__aeabi_dcmpeq>
 8009970:	2800      	cmp	r0, #0
 8009972:	d141      	bne.n	80099f8 <pow+0xc4>
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f000 f848 	bl	8009a0c <finite>
 800997c:	b328      	cbz	r0, 80099ca <pow+0x96>
 800997e:	2200      	movs	r2, #0
 8009980:	2300      	movs	r3, #0
 8009982:	4620      	mov	r0, r4
 8009984:	4629      	mov	r1, r5
 8009986:	f7f7 f819 	bl	80009bc <__aeabi_dcmplt>
 800998a:	b1f0      	cbz	r0, 80099ca <pow+0x96>
 800998c:	f7fc fcc2 	bl	8006314 <__errno>
 8009990:	2322      	movs	r3, #34	@ 0x22
 8009992:	e019      	b.n	80099c8 <pow+0x94>
 8009994:	4630      	mov	r0, r6
 8009996:	4639      	mov	r1, r7
 8009998:	f000 f838 	bl	8009a0c <finite>
 800999c:	b9c8      	cbnz	r0, 80099d2 <pow+0x9e>
 800999e:	4640      	mov	r0, r8
 80099a0:	4649      	mov	r1, r9
 80099a2:	f000 f833 	bl	8009a0c <finite>
 80099a6:	b1a0      	cbz	r0, 80099d2 <pow+0x9e>
 80099a8:	4620      	mov	r0, r4
 80099aa:	4629      	mov	r1, r5
 80099ac:	f000 f82e 	bl	8009a0c <finite>
 80099b0:	b178      	cbz	r0, 80099d2 <pow+0x9e>
 80099b2:	4632      	mov	r2, r6
 80099b4:	463b      	mov	r3, r7
 80099b6:	4630      	mov	r0, r6
 80099b8:	4639      	mov	r1, r7
 80099ba:	f7f7 f827 	bl	8000a0c <__aeabi_dcmpun>
 80099be:	2800      	cmp	r0, #0
 80099c0:	d0e4      	beq.n	800998c <pow+0x58>
 80099c2:	f7fc fca7 	bl	8006314 <__errno>
 80099c6:	2321      	movs	r3, #33	@ 0x21
 80099c8:	6003      	str	r3, [r0, #0]
 80099ca:	4630      	mov	r0, r6
 80099cc:	4639      	mov	r1, r7
 80099ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d2:	2200      	movs	r2, #0
 80099d4:	2300      	movs	r3, #0
 80099d6:	4630      	mov	r0, r6
 80099d8:	4639      	mov	r1, r7
 80099da:	f7f6 ffe5 	bl	80009a8 <__aeabi_dcmpeq>
 80099de:	2800      	cmp	r0, #0
 80099e0:	d0f3      	beq.n	80099ca <pow+0x96>
 80099e2:	4640      	mov	r0, r8
 80099e4:	4649      	mov	r1, r9
 80099e6:	f000 f811 	bl	8009a0c <finite>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d0ed      	beq.n	80099ca <pow+0x96>
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f000 f80b 	bl	8009a0c <finite>
 80099f6:	e7c8      	b.n	800998a <pow+0x56>
 80099f8:	2600      	movs	r6, #0
 80099fa:	4f01      	ldr	r7, [pc, #4]	@ (8009a00 <pow+0xcc>)
 80099fc:	e7e5      	b.n	80099ca <pow+0x96>
 80099fe:	bf00      	nop
 8009a00:	3ff00000 	.word	0x3ff00000

08009a04 <fabs>:
 8009a04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4770      	bx	lr

08009a0c <finite>:
 8009a0c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009a10:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009a14:	0fc0      	lsrs	r0, r0, #31
 8009a16:	4770      	bx	lr

08009a18 <__ieee754_sqrt>:
 8009a18:	4a67      	ldr	r2, [pc, #412]	@ (8009bb8 <__ieee754_sqrt+0x1a0>)
 8009a1a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1e:	438a      	bics	r2, r1
 8009a20:	4606      	mov	r6, r0
 8009a22:	460f      	mov	r7, r1
 8009a24:	460b      	mov	r3, r1
 8009a26:	4604      	mov	r4, r0
 8009a28:	d10e      	bne.n	8009a48 <__ieee754_sqrt+0x30>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	f7f6 fd54 	bl	80004d8 <__aeabi_dmul>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4630      	mov	r0, r6
 8009a36:	4639      	mov	r1, r7
 8009a38:	f7f6 fb98 	bl	800016c <__adddf3>
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	4630      	mov	r0, r6
 8009a42:	4639      	mov	r1, r7
 8009a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a48:	2900      	cmp	r1, #0
 8009a4a:	dc0c      	bgt.n	8009a66 <__ieee754_sqrt+0x4e>
 8009a4c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009a50:	4302      	orrs	r2, r0
 8009a52:	d0f5      	beq.n	8009a40 <__ieee754_sqrt+0x28>
 8009a54:	b189      	cbz	r1, 8009a7a <__ieee754_sqrt+0x62>
 8009a56:	4602      	mov	r2, r0
 8009a58:	f7f6 fb86 	bl	8000168 <__aeabi_dsub>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	f7f6 fe64 	bl	800072c <__aeabi_ddiv>
 8009a64:	e7ea      	b.n	8009a3c <__ieee754_sqrt+0x24>
 8009a66:	150a      	asrs	r2, r1, #20
 8009a68:	d115      	bne.n	8009a96 <__ieee754_sqrt+0x7e>
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	e009      	b.n	8009a82 <__ieee754_sqrt+0x6a>
 8009a6e:	0ae3      	lsrs	r3, r4, #11
 8009a70:	3a15      	subs	r2, #21
 8009a72:	0564      	lsls	r4, r4, #21
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d0fa      	beq.n	8009a6e <__ieee754_sqrt+0x56>
 8009a78:	e7f7      	b.n	8009a6a <__ieee754_sqrt+0x52>
 8009a7a:	460a      	mov	r2, r1
 8009a7c:	e7fa      	b.n	8009a74 <__ieee754_sqrt+0x5c>
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	3101      	adds	r1, #1
 8009a82:	02d8      	lsls	r0, r3, #11
 8009a84:	d5fb      	bpl.n	8009a7e <__ieee754_sqrt+0x66>
 8009a86:	1e48      	subs	r0, r1, #1
 8009a88:	1a12      	subs	r2, r2, r0
 8009a8a:	f1c1 0020 	rsb	r0, r1, #32
 8009a8e:	fa24 f000 	lsr.w	r0, r4, r0
 8009a92:	4303      	orrs	r3, r0
 8009a94:	408c      	lsls	r4, r1
 8009a96:	2600      	movs	r6, #0
 8009a98:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009a9c:	2116      	movs	r1, #22
 8009a9e:	07d2      	lsls	r2, r2, #31
 8009aa0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009aae:	bf5c      	itt	pl
 8009ab0:	005b      	lslpl	r3, r3, #1
 8009ab2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009ab6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009aba:	bf58      	it	pl
 8009abc:	0064      	lslpl	r4, r4, #1
 8009abe:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009ac2:	107f      	asrs	r7, r7, #1
 8009ac4:	0064      	lsls	r4, r4, #1
 8009ac6:	1815      	adds	r5, r2, r0
 8009ac8:	429d      	cmp	r5, r3
 8009aca:	bfde      	ittt	le
 8009acc:	182a      	addle	r2, r5, r0
 8009ace:	1b5b      	suble	r3, r3, r5
 8009ad0:	1836      	addle	r6, r6, r0
 8009ad2:	0fe5      	lsrs	r5, r4, #31
 8009ad4:	3901      	subs	r1, #1
 8009ad6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009ada:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009ade:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009ae2:	d1f0      	bne.n	8009ac6 <__ieee754_sqrt+0xae>
 8009ae4:	460d      	mov	r5, r1
 8009ae6:	f04f 0a20 	mov.w	sl, #32
 8009aea:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009aee:	429a      	cmp	r2, r3
 8009af0:	eb01 0c00 	add.w	ip, r1, r0
 8009af4:	db02      	blt.n	8009afc <__ieee754_sqrt+0xe4>
 8009af6:	d113      	bne.n	8009b20 <__ieee754_sqrt+0x108>
 8009af8:	45a4      	cmp	ip, r4
 8009afa:	d811      	bhi.n	8009b20 <__ieee754_sqrt+0x108>
 8009afc:	f1bc 0f00 	cmp.w	ip, #0
 8009b00:	eb0c 0100 	add.w	r1, ip, r0
 8009b04:	da42      	bge.n	8009b8c <__ieee754_sqrt+0x174>
 8009b06:	2900      	cmp	r1, #0
 8009b08:	db40      	blt.n	8009b8c <__ieee754_sqrt+0x174>
 8009b0a:	f102 0e01 	add.w	lr, r2, #1
 8009b0e:	1a9b      	subs	r3, r3, r2
 8009b10:	4672      	mov	r2, lr
 8009b12:	45a4      	cmp	ip, r4
 8009b14:	bf88      	it	hi
 8009b16:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009b1a:	eba4 040c 	sub.w	r4, r4, ip
 8009b1e:	4405      	add	r5, r0
 8009b20:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009b24:	f1ba 0a01 	subs.w	sl, sl, #1
 8009b28:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009b2c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009b30:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009b34:	d1db      	bne.n	8009aee <__ieee754_sqrt+0xd6>
 8009b36:	431c      	orrs	r4, r3
 8009b38:	d01a      	beq.n	8009b70 <__ieee754_sqrt+0x158>
 8009b3a:	4c20      	ldr	r4, [pc, #128]	@ (8009bbc <__ieee754_sqrt+0x1a4>)
 8009b3c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009bc0 <__ieee754_sqrt+0x1a8>
 8009b40:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009b44:	e9db 2300 	ldrd	r2, r3, [fp]
 8009b48:	f7f6 fb0e 	bl	8000168 <__aeabi_dsub>
 8009b4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4640      	mov	r0, r8
 8009b56:	4649      	mov	r1, r9
 8009b58:	f7f6 ff3a 	bl	80009d0 <__aeabi_dcmple>
 8009b5c:	b140      	cbz	r0, 8009b70 <__ieee754_sqrt+0x158>
 8009b5e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009b62:	e9db 2300 	ldrd	r2, r3, [fp]
 8009b66:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009b6a:	d111      	bne.n	8009b90 <__ieee754_sqrt+0x178>
 8009b6c:	4655      	mov	r5, sl
 8009b6e:	3601      	adds	r6, #1
 8009b70:	1072      	asrs	r2, r6, #1
 8009b72:	086b      	lsrs	r3, r5, #1
 8009b74:	07f1      	lsls	r1, r6, #31
 8009b76:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009b7a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009b7e:	bf48      	it	mi
 8009b80:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009b84:	4618      	mov	r0, r3
 8009b86:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009b8a:	e757      	b.n	8009a3c <__ieee754_sqrt+0x24>
 8009b8c:	4696      	mov	lr, r2
 8009b8e:	e7be      	b.n	8009b0e <__ieee754_sqrt+0xf6>
 8009b90:	f7f6 faec 	bl	800016c <__adddf3>
 8009b94:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	f7f6 ff0c 	bl	80009bc <__aeabi_dcmplt>
 8009ba4:	b120      	cbz	r0, 8009bb0 <__ieee754_sqrt+0x198>
 8009ba6:	1ca8      	adds	r0, r5, #2
 8009ba8:	bf08      	it	eq
 8009baa:	3601      	addeq	r6, #1
 8009bac:	3502      	adds	r5, #2
 8009bae:	e7df      	b.n	8009b70 <__ieee754_sqrt+0x158>
 8009bb0:	1c6b      	adds	r3, r5, #1
 8009bb2:	f023 0501 	bic.w	r5, r3, #1
 8009bb6:	e7db      	b.n	8009b70 <__ieee754_sqrt+0x158>
 8009bb8:	7ff00000 	.word	0x7ff00000
 8009bbc:	200001e8 	.word	0x200001e8
 8009bc0:	200001e0 	.word	0x200001e0
 8009bc4:	00000000 	.word	0x00000000

08009bc8 <__ieee754_asin>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	4bc4      	ldr	r3, [pc, #784]	@ (8009ee0 <__ieee754_asin+0x318>)
 8009bce:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	429e      	cmp	r6, r3
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	460d      	mov	r5, r1
 8009bda:	9101      	str	r1, [sp, #4]
 8009bdc:	d929      	bls.n	8009c32 <__ieee754_asin+0x6a>
 8009bde:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009be2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009be6:	4306      	orrs	r6, r0
 8009be8:	d114      	bne.n	8009c14 <__ieee754_asin+0x4c>
 8009bea:	a3a3      	add	r3, pc, #652	@ (adr r3, 8009e78 <__ieee754_asin+0x2b0>)
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	f7f6 fc72 	bl	80004d8 <__aeabi_dmul>
 8009bf4:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009e80 <__ieee754_asin+0x2b8>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7f6 fc69 	bl	80004d8 <__aeabi_dmul>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	4639      	mov	r1, r7
 8009c0e:	f7f6 faad 	bl	800016c <__adddf3>
 8009c12:	e007      	b.n	8009c24 <__ieee754_asin+0x5c>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	f7f6 faa6 	bl	8000168 <__aeabi_dsub>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	f7f6 fd84 	bl	800072c <__aeabi_ddiv>
 8009c24:	4604      	mov	r4, r0
 8009c26:	460d      	mov	r5, r1
 8009c28:	4620      	mov	r0, r4
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	b007      	add	sp, #28
 8009c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c32:	4bac      	ldr	r3, [pc, #688]	@ (8009ee4 <__ieee754_asin+0x31c>)
 8009c34:	429e      	cmp	r6, r3
 8009c36:	d80e      	bhi.n	8009c56 <__ieee754_asin+0x8e>
 8009c38:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8009c3c:	f080 80ab 	bcs.w	8009d96 <__ieee754_asin+0x1ce>
 8009c40:	a391      	add	r3, pc, #580	@ (adr r3, 8009e88 <__ieee754_asin+0x2c0>)
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	f7f6 fa91 	bl	800016c <__adddf3>
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	4ba6      	ldr	r3, [pc, #664]	@ (8009ee8 <__ieee754_asin+0x320>)
 8009c4e:	f7f6 fed3 	bl	80009f8 <__aeabi_dcmpgt>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d1e8      	bne.n	8009c28 <__ieee754_asin+0x60>
 8009c56:	4620      	mov	r0, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	f7ff fed3 	bl	8009a04 <fabs>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	2000      	movs	r0, #0
 8009c64:	49a0      	ldr	r1, [pc, #640]	@ (8009ee8 <__ieee754_asin+0x320>)
 8009c66:	f7f6 fa7f 	bl	8000168 <__aeabi_dsub>
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4b9f      	ldr	r3, [pc, #636]	@ (8009eec <__ieee754_asin+0x324>)
 8009c6e:	f7f6 fc33 	bl	80004d8 <__aeabi_dmul>
 8009c72:	a387      	add	r3, pc, #540	@ (adr r3, 8009e90 <__ieee754_asin+0x2c8>)
 8009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c78:	4604      	mov	r4, r0
 8009c7a:	460d      	mov	r5, r1
 8009c7c:	f7f6 fc2c 	bl	80004d8 <__aeabi_dmul>
 8009c80:	a385      	add	r3, pc, #532	@ (adr r3, 8009e98 <__ieee754_asin+0x2d0>)
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	f7f6 fa71 	bl	800016c <__adddf3>
 8009c8a:	4622      	mov	r2, r4
 8009c8c:	462b      	mov	r3, r5
 8009c8e:	f7f6 fc23 	bl	80004d8 <__aeabi_dmul>
 8009c92:	a383      	add	r3, pc, #524	@ (adr r3, 8009ea0 <__ieee754_asin+0x2d8>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f7f6 fa66 	bl	8000168 <__aeabi_dsub>
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	462b      	mov	r3, r5
 8009ca0:	f7f6 fc1a 	bl	80004d8 <__aeabi_dmul>
 8009ca4:	a380      	add	r3, pc, #512	@ (adr r3, 8009ea8 <__ieee754_asin+0x2e0>)
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f7f6 fa5f 	bl	800016c <__adddf3>
 8009cae:	4622      	mov	r2, r4
 8009cb0:	462b      	mov	r3, r5
 8009cb2:	f7f6 fc11 	bl	80004d8 <__aeabi_dmul>
 8009cb6:	a37e      	add	r3, pc, #504	@ (adr r3, 8009eb0 <__ieee754_asin+0x2e8>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f7f6 fa54 	bl	8000168 <__aeabi_dsub>
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	462b      	mov	r3, r5
 8009cc4:	f7f6 fc08 	bl	80004d8 <__aeabi_dmul>
 8009cc8:	a37b      	add	r3, pc, #492	@ (adr r3, 8009eb8 <__ieee754_asin+0x2f0>)
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f7f6 fa4d 	bl	800016c <__adddf3>
 8009cd2:	4622      	mov	r2, r4
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	f7f6 fbff 	bl	80004d8 <__aeabi_dmul>
 8009cda:	a379      	add	r3, pc, #484	@ (adr r3, 8009ec0 <__ieee754_asin+0x2f8>)
 8009cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	f7f6 fbf6 	bl	80004d8 <__aeabi_dmul>
 8009cec:	a376      	add	r3, pc, #472	@ (adr r3, 8009ec8 <__ieee754_asin+0x300>)
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f7f6 fa39 	bl	8000168 <__aeabi_dsub>
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	f7f6 fbed 	bl	80004d8 <__aeabi_dmul>
 8009cfe:	a374      	add	r3, pc, #464	@ (adr r3, 8009ed0 <__ieee754_asin+0x308>)
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	f7f6 fa32 	bl	800016c <__adddf3>
 8009d08:	4622      	mov	r2, r4
 8009d0a:	462b      	mov	r3, r5
 8009d0c:	f7f6 fbe4 	bl	80004d8 <__aeabi_dmul>
 8009d10:	a371      	add	r3, pc, #452	@ (adr r3, 8009ed8 <__ieee754_asin+0x310>)
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f7f6 fa27 	bl	8000168 <__aeabi_dsub>
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	462b      	mov	r3, r5
 8009d1e:	f7f6 fbdb 	bl	80004d8 <__aeabi_dmul>
 8009d22:	4b71      	ldr	r3, [pc, #452]	@ (8009ee8 <__ieee754_asin+0x320>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	f7f6 fa21 	bl	800016c <__adddf3>
 8009d2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7ff fe71 	bl	8009a18 <__ieee754_sqrt>
 8009d36:	4b6e      	ldr	r3, [pc, #440]	@ (8009ef0 <__ieee754_asin+0x328>)
 8009d38:	4682      	mov	sl, r0
 8009d3a:	429e      	cmp	r6, r3
 8009d3c:	468b      	mov	fp, r1
 8009d3e:	f240 80d9 	bls.w	8009ef4 <__ieee754_asin+0x32c>
 8009d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d4a:	f7f6 fcef 	bl	800072c <__aeabi_ddiv>
 8009d4e:	4652      	mov	r2, sl
 8009d50:	465b      	mov	r3, fp
 8009d52:	f7f6 fbc1 	bl	80004d8 <__aeabi_dmul>
 8009d56:	4652      	mov	r2, sl
 8009d58:	465b      	mov	r3, fp
 8009d5a:	f7f6 fa07 	bl	800016c <__adddf3>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	f7f6 fa03 	bl	800016c <__adddf3>
 8009d66:	a346      	add	r3, pc, #280	@ (adr r3, 8009e80 <__ieee754_asin+0x2b8>)
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	f7f6 f9fc 	bl	8000168 <__aeabi_dsub>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	a140      	add	r1, pc, #256	@ (adr r1, 8009e78 <__ieee754_asin+0x2b0>)
 8009d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d7a:	f7f6 f9f5 	bl	8000168 <__aeabi_dsub>
 8009d7e:	9b01      	ldr	r3, [sp, #4]
 8009d80:	4604      	mov	r4, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bfdc      	itt	le
 8009d86:	4602      	movle	r2, r0
 8009d88:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8009d8c:	460d      	mov	r5, r1
 8009d8e:	bfdc      	itt	le
 8009d90:	4614      	movle	r4, r2
 8009d92:	461d      	movle	r5, r3
 8009d94:	e748      	b.n	8009c28 <__ieee754_asin+0x60>
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	f7f6 fb9d 	bl	80004d8 <__aeabi_dmul>
 8009d9e:	a33c      	add	r3, pc, #240	@ (adr r3, 8009e90 <__ieee754_asin+0x2c8>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	4606      	mov	r6, r0
 8009da6:	460f      	mov	r7, r1
 8009da8:	f7f6 fb96 	bl	80004d8 <__aeabi_dmul>
 8009dac:	a33a      	add	r3, pc, #232	@ (adr r3, 8009e98 <__ieee754_asin+0x2d0>)
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	f7f6 f9db 	bl	800016c <__adddf3>
 8009db6:	4632      	mov	r2, r6
 8009db8:	463b      	mov	r3, r7
 8009dba:	f7f6 fb8d 	bl	80004d8 <__aeabi_dmul>
 8009dbe:	a338      	add	r3, pc, #224	@ (adr r3, 8009ea0 <__ieee754_asin+0x2d8>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	f7f6 f9d0 	bl	8000168 <__aeabi_dsub>
 8009dc8:	4632      	mov	r2, r6
 8009dca:	463b      	mov	r3, r7
 8009dcc:	f7f6 fb84 	bl	80004d8 <__aeabi_dmul>
 8009dd0:	a335      	add	r3, pc, #212	@ (adr r3, 8009ea8 <__ieee754_asin+0x2e0>)
 8009dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd6:	f7f6 f9c9 	bl	800016c <__adddf3>
 8009dda:	4632      	mov	r2, r6
 8009ddc:	463b      	mov	r3, r7
 8009dde:	f7f6 fb7b 	bl	80004d8 <__aeabi_dmul>
 8009de2:	a333      	add	r3, pc, #204	@ (adr r3, 8009eb0 <__ieee754_asin+0x2e8>)
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f7f6 f9be 	bl	8000168 <__aeabi_dsub>
 8009dec:	4632      	mov	r2, r6
 8009dee:	463b      	mov	r3, r7
 8009df0:	f7f6 fb72 	bl	80004d8 <__aeabi_dmul>
 8009df4:	a330      	add	r3, pc, #192	@ (adr r3, 8009eb8 <__ieee754_asin+0x2f0>)
 8009df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfa:	f7f6 f9b7 	bl	800016c <__adddf3>
 8009dfe:	4632      	mov	r2, r6
 8009e00:	463b      	mov	r3, r7
 8009e02:	f7f6 fb69 	bl	80004d8 <__aeabi_dmul>
 8009e06:	a32e      	add	r3, pc, #184	@ (adr r3, 8009ec0 <__ieee754_asin+0x2f8>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	4689      	mov	r9, r1
 8009e10:	4630      	mov	r0, r6
 8009e12:	4639      	mov	r1, r7
 8009e14:	f7f6 fb60 	bl	80004d8 <__aeabi_dmul>
 8009e18:	a32b      	add	r3, pc, #172	@ (adr r3, 8009ec8 <__ieee754_asin+0x300>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 f9a3 	bl	8000168 <__aeabi_dsub>
 8009e22:	4632      	mov	r2, r6
 8009e24:	463b      	mov	r3, r7
 8009e26:	f7f6 fb57 	bl	80004d8 <__aeabi_dmul>
 8009e2a:	a329      	add	r3, pc, #164	@ (adr r3, 8009ed0 <__ieee754_asin+0x308>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 f99c 	bl	800016c <__adddf3>
 8009e34:	4632      	mov	r2, r6
 8009e36:	463b      	mov	r3, r7
 8009e38:	f7f6 fb4e 	bl	80004d8 <__aeabi_dmul>
 8009e3c:	a326      	add	r3, pc, #152	@ (adr r3, 8009ed8 <__ieee754_asin+0x310>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 f991 	bl	8000168 <__aeabi_dsub>
 8009e46:	4632      	mov	r2, r6
 8009e48:	463b      	mov	r3, r7
 8009e4a:	f7f6 fb45 	bl	80004d8 <__aeabi_dmul>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	4b25      	ldr	r3, [pc, #148]	@ (8009ee8 <__ieee754_asin+0x320>)
 8009e52:	f7f6 f98b 	bl	800016c <__adddf3>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	f7f6 fc65 	bl	800072c <__aeabi_ddiv>
 8009e62:	4622      	mov	r2, r4
 8009e64:	462b      	mov	r3, r5
 8009e66:	f7f6 fb37 	bl	80004d8 <__aeabi_dmul>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	4620      	mov	r0, r4
 8009e70:	4629      	mov	r1, r5
 8009e72:	e6cc      	b.n	8009c0e <__ieee754_asin+0x46>
 8009e74:	f3af 8000 	nop.w
 8009e78:	54442d18 	.word	0x54442d18
 8009e7c:	3ff921fb 	.word	0x3ff921fb
 8009e80:	33145c07 	.word	0x33145c07
 8009e84:	3c91a626 	.word	0x3c91a626
 8009e88:	8800759c 	.word	0x8800759c
 8009e8c:	7e37e43c 	.word	0x7e37e43c
 8009e90:	0dfdf709 	.word	0x0dfdf709
 8009e94:	3f023de1 	.word	0x3f023de1
 8009e98:	7501b288 	.word	0x7501b288
 8009e9c:	3f49efe0 	.word	0x3f49efe0
 8009ea0:	b5688f3b 	.word	0xb5688f3b
 8009ea4:	3fa48228 	.word	0x3fa48228
 8009ea8:	0e884455 	.word	0x0e884455
 8009eac:	3fc9c155 	.word	0x3fc9c155
 8009eb0:	03eb6f7d 	.word	0x03eb6f7d
 8009eb4:	3fd4d612 	.word	0x3fd4d612
 8009eb8:	55555555 	.word	0x55555555
 8009ebc:	3fc55555 	.word	0x3fc55555
 8009ec0:	b12e9282 	.word	0xb12e9282
 8009ec4:	3fb3b8c5 	.word	0x3fb3b8c5
 8009ec8:	1b8d0159 	.word	0x1b8d0159
 8009ecc:	3fe6066c 	.word	0x3fe6066c
 8009ed0:	9c598ac8 	.word	0x9c598ac8
 8009ed4:	40002ae5 	.word	0x40002ae5
 8009ed8:	1c8a2d4b 	.word	0x1c8a2d4b
 8009edc:	40033a27 	.word	0x40033a27
 8009ee0:	3fefffff 	.word	0x3fefffff
 8009ee4:	3fdfffff 	.word	0x3fdfffff
 8009ee8:	3ff00000 	.word	0x3ff00000
 8009eec:	3fe00000 	.word	0x3fe00000
 8009ef0:	3fef3332 	.word	0x3fef3332
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	f7f6 f938 	bl	800016c <__adddf3>
 8009efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f00:	4606      	mov	r6, r0
 8009f02:	460f      	mov	r7, r1
 8009f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f08:	f7f6 fc10 	bl	800072c <__aeabi_ddiv>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4630      	mov	r0, r6
 8009f12:	4639      	mov	r1, r7
 8009f14:	f7f6 fae0 	bl	80004d8 <__aeabi_dmul>
 8009f18:	f04f 0800 	mov.w	r8, #0
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	460f      	mov	r7, r1
 8009f20:	4642      	mov	r2, r8
 8009f22:	465b      	mov	r3, fp
 8009f24:	4640      	mov	r0, r8
 8009f26:	4659      	mov	r1, fp
 8009f28:	f7f6 fad6 	bl	80004d8 <__aeabi_dmul>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4620      	mov	r0, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7f6 f918 	bl	8000168 <__aeabi_dsub>
 8009f38:	4642      	mov	r2, r8
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	460d      	mov	r5, r1
 8009f3e:	465b      	mov	r3, fp
 8009f40:	4650      	mov	r0, sl
 8009f42:	4659      	mov	r1, fp
 8009f44:	f7f6 f912 	bl	800016c <__adddf3>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	4629      	mov	r1, r5
 8009f50:	f7f6 fbec 	bl	800072c <__aeabi_ddiv>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	f7f6 f908 	bl	800016c <__adddf3>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	a113      	add	r1, pc, #76	@ (adr r1, 8009fb0 <__ieee754_asin+0x3e8>)
 8009f62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f66:	f7f6 f8ff 	bl	8000168 <__aeabi_dsub>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4630      	mov	r0, r6
 8009f70:	4639      	mov	r1, r7
 8009f72:	f7f6 f8f9 	bl	8000168 <__aeabi_dsub>
 8009f76:	4642      	mov	r2, r8
 8009f78:	4604      	mov	r4, r0
 8009f7a:	460d      	mov	r5, r1
 8009f7c:	465b      	mov	r3, fp
 8009f7e:	4640      	mov	r0, r8
 8009f80:	4659      	mov	r1, fp
 8009f82:	f7f6 f8f3 	bl	800016c <__adddf3>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	a10b      	add	r1, pc, #44	@ (adr r1, 8009fb8 <__ieee754_asin+0x3f0>)
 8009f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f90:	f7f6 f8ea 	bl	8000168 <__aeabi_dsub>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4620      	mov	r0, r4
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	f7f6 f8e4 	bl	8000168 <__aeabi_dsub>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	a104      	add	r1, pc, #16	@ (adr r1, 8009fb8 <__ieee754_asin+0x3f0>)
 8009fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009faa:	e6e6      	b.n	8009d7a <__ieee754_asin+0x1b2>
 8009fac:	f3af 8000 	nop.w
 8009fb0:	33145c07 	.word	0x33145c07
 8009fb4:	3c91a626 	.word	0x3c91a626
 8009fb8:	54442d18 	.word	0x54442d18
 8009fbc:	3fe921fb 	.word	0x3fe921fb

08009fc0 <__ieee754_atan2>:
 8009fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	4617      	mov	r7, r2
 8009fc6:	4690      	mov	r8, r2
 8009fc8:	4699      	mov	r9, r3
 8009fca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009fce:	427b      	negs	r3, r7
 8009fd0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800a158 <__ieee754_atan2+0x198>
 8009fd4:	433b      	orrs	r3, r7
 8009fd6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009fda:	4553      	cmp	r3, sl
 8009fdc:	4604      	mov	r4, r0
 8009fde:	460d      	mov	r5, r1
 8009fe0:	d809      	bhi.n	8009ff6 <__ieee754_atan2+0x36>
 8009fe2:	4246      	negs	r6, r0
 8009fe4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009fe8:	4306      	orrs	r6, r0
 8009fea:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009fee:	4556      	cmp	r6, sl
 8009ff0:	468e      	mov	lr, r1
 8009ff2:	4683      	mov	fp, r0
 8009ff4:	d908      	bls.n	800a008 <__ieee754_atan2+0x48>
 8009ff6:	4642      	mov	r2, r8
 8009ff8:	464b      	mov	r3, r9
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	f7f6 f8b5 	bl	800016c <__adddf3>
 800a002:	4604      	mov	r4, r0
 800a004:	460d      	mov	r5, r1
 800a006:	e016      	b.n	800a036 <__ieee754_atan2+0x76>
 800a008:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800a00c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a010:	433e      	orrs	r6, r7
 800a012:	d103      	bne.n	800a01c <__ieee754_atan2+0x5c>
 800a014:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	f000 bdce 	b.w	800abb8 <atan>
 800a01c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800a020:	f006 0602 	and.w	r6, r6, #2
 800a024:	ea53 0b0b 	orrs.w	fp, r3, fp
 800a028:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800a02c:	d107      	bne.n	800a03e <__ieee754_atan2+0x7e>
 800a02e:	2e02      	cmp	r6, #2
 800a030:	d064      	beq.n	800a0fc <__ieee754_atan2+0x13c>
 800a032:	2e03      	cmp	r6, #3
 800a034:	d066      	beq.n	800a104 <__ieee754_atan2+0x144>
 800a036:	4620      	mov	r0, r4
 800a038:	4629      	mov	r1, r5
 800a03a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03e:	4317      	orrs	r7, r2
 800a040:	d106      	bne.n	800a050 <__ieee754_atan2+0x90>
 800a042:	f1be 0f00 	cmp.w	lr, #0
 800a046:	da68      	bge.n	800a11a <__ieee754_atan2+0x15a>
 800a048:	a537      	add	r5, pc, #220	@ (adr r5, 800a128 <__ieee754_atan2+0x168>)
 800a04a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a04e:	e7f2      	b.n	800a036 <__ieee754_atan2+0x76>
 800a050:	4552      	cmp	r2, sl
 800a052:	d10f      	bne.n	800a074 <__ieee754_atan2+0xb4>
 800a054:	4293      	cmp	r3, r2
 800a056:	f106 36ff 	add.w	r6, r6, #4294967295
 800a05a:	d107      	bne.n	800a06c <__ieee754_atan2+0xac>
 800a05c:	2e02      	cmp	r6, #2
 800a05e:	d855      	bhi.n	800a10c <__ieee754_atan2+0x14c>
 800a060:	4b3e      	ldr	r3, [pc, #248]	@ (800a15c <__ieee754_atan2+0x19c>)
 800a062:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a066:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a06a:	e7e4      	b.n	800a036 <__ieee754_atan2+0x76>
 800a06c:	2e02      	cmp	r6, #2
 800a06e:	d851      	bhi.n	800a114 <__ieee754_atan2+0x154>
 800a070:	4b3b      	ldr	r3, [pc, #236]	@ (800a160 <__ieee754_atan2+0x1a0>)
 800a072:	e7f6      	b.n	800a062 <__ieee754_atan2+0xa2>
 800a074:	4553      	cmp	r3, sl
 800a076:	d0e4      	beq.n	800a042 <__ieee754_atan2+0x82>
 800a078:	1a9b      	subs	r3, r3, r2
 800a07a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a07e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a082:	da21      	bge.n	800a0c8 <__ieee754_atan2+0x108>
 800a084:	f1b9 0f00 	cmp.w	r9, #0
 800a088:	da01      	bge.n	800a08e <__ieee754_atan2+0xce>
 800a08a:	323c      	adds	r2, #60	@ 0x3c
 800a08c:	db20      	blt.n	800a0d0 <__ieee754_atan2+0x110>
 800a08e:	4642      	mov	r2, r8
 800a090:	464b      	mov	r3, r9
 800a092:	4620      	mov	r0, r4
 800a094:	4629      	mov	r1, r5
 800a096:	f7f6 fb49 	bl	800072c <__aeabi_ddiv>
 800a09a:	f7ff fcb3 	bl	8009a04 <fabs>
 800a09e:	f000 fd8b 	bl	800abb8 <atan>
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	460d      	mov	r5, r1
 800a0a6:	2e01      	cmp	r6, #1
 800a0a8:	d015      	beq.n	800a0d6 <__ieee754_atan2+0x116>
 800a0aa:	2e02      	cmp	r6, #2
 800a0ac:	d017      	beq.n	800a0de <__ieee754_atan2+0x11e>
 800a0ae:	2e00      	cmp	r6, #0
 800a0b0:	d0c1      	beq.n	800a036 <__ieee754_atan2+0x76>
 800a0b2:	a31f      	add	r3, pc, #124	@ (adr r3, 800a130 <__ieee754_atan2+0x170>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f7f6 f854 	bl	8000168 <__aeabi_dsub>
 800a0c0:	a31d      	add	r3, pc, #116	@ (adr r3, 800a138 <__ieee754_atan2+0x178>)
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	e016      	b.n	800a0f6 <__ieee754_atan2+0x136>
 800a0c8:	a51d      	add	r5, pc, #116	@ (adr r5, 800a140 <__ieee754_atan2+0x180>)
 800a0ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0ce:	e7ea      	b.n	800a0a6 <__ieee754_atan2+0xe6>
 800a0d0:	2400      	movs	r4, #0
 800a0d2:	2500      	movs	r5, #0
 800a0d4:	e7e7      	b.n	800a0a6 <__ieee754_atan2+0xe6>
 800a0d6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800a0da:	461d      	mov	r5, r3
 800a0dc:	e7ab      	b.n	800a036 <__ieee754_atan2+0x76>
 800a0de:	a314      	add	r3, pc, #80	@ (adr r3, 800a130 <__ieee754_atan2+0x170>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f7f6 f83e 	bl	8000168 <__aeabi_dsub>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	a111      	add	r1, pc, #68	@ (adr r1, 800a138 <__ieee754_atan2+0x178>)
 800a0f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0f6:	f7f6 f837 	bl	8000168 <__aeabi_dsub>
 800a0fa:	e782      	b.n	800a002 <__ieee754_atan2+0x42>
 800a0fc:	a50e      	add	r5, pc, #56	@ (adr r5, 800a138 <__ieee754_atan2+0x178>)
 800a0fe:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a102:	e798      	b.n	800a036 <__ieee754_atan2+0x76>
 800a104:	a510      	add	r5, pc, #64	@ (adr r5, 800a148 <__ieee754_atan2+0x188>)
 800a106:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a10a:	e794      	b.n	800a036 <__ieee754_atan2+0x76>
 800a10c:	a510      	add	r5, pc, #64	@ (adr r5, 800a150 <__ieee754_atan2+0x190>)
 800a10e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a112:	e790      	b.n	800a036 <__ieee754_atan2+0x76>
 800a114:	2400      	movs	r4, #0
 800a116:	2500      	movs	r5, #0
 800a118:	e78d      	b.n	800a036 <__ieee754_atan2+0x76>
 800a11a:	a509      	add	r5, pc, #36	@ (adr r5, 800a140 <__ieee754_atan2+0x180>)
 800a11c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a120:	e789      	b.n	800a036 <__ieee754_atan2+0x76>
 800a122:	bf00      	nop
 800a124:	f3af 8000 	nop.w
 800a128:	54442d18 	.word	0x54442d18
 800a12c:	bff921fb 	.word	0xbff921fb
 800a130:	33145c07 	.word	0x33145c07
 800a134:	3ca1a626 	.word	0x3ca1a626
 800a138:	54442d18 	.word	0x54442d18
 800a13c:	400921fb 	.word	0x400921fb
 800a140:	54442d18 	.word	0x54442d18
 800a144:	3ff921fb 	.word	0x3ff921fb
 800a148:	54442d18 	.word	0x54442d18
 800a14c:	c00921fb 	.word	0xc00921fb
 800a150:	54442d18 	.word	0x54442d18
 800a154:	3fe921fb 	.word	0x3fe921fb
 800a158:	7ff00000 	.word	0x7ff00000
 800a15c:	0800b538 	.word	0x0800b538
 800a160:	0800b520 	.word	0x0800b520
 800a164:	00000000 	.word	0x00000000

0800a168 <__ieee754_pow>:
 800a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	b091      	sub	sp, #68	@ 0x44
 800a16e:	e9cd 2300 	strd	r2, r3, [sp]
 800a172:	468b      	mov	fp, r1
 800a174:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a178:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a17c:	4682      	mov	sl, r0
 800a17e:	ea57 0001 	orrs.w	r0, r7, r1
 800a182:	d112      	bne.n	800a1aa <__ieee754_pow+0x42>
 800a184:	4653      	mov	r3, sl
 800a186:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a18a:	18db      	adds	r3, r3, r3
 800a18c:	4152      	adcs	r2, r2
 800a18e:	4298      	cmp	r0, r3
 800a190:	4b91      	ldr	r3, [pc, #580]	@ (800a3d8 <__ieee754_pow+0x270>)
 800a192:	4193      	sbcs	r3, r2
 800a194:	f080 84ce 	bcs.w	800ab34 <__ieee754_pow+0x9cc>
 800a198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a19c:	4650      	mov	r0, sl
 800a19e:	4659      	mov	r1, fp
 800a1a0:	f7f5 ffe4 	bl	800016c <__adddf3>
 800a1a4:	b011      	add	sp, #68	@ 0x44
 800a1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1aa:	4b8c      	ldr	r3, [pc, #560]	@ (800a3dc <__ieee754_pow+0x274>)
 800a1ac:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a1b0:	429e      	cmp	r6, r3
 800a1b2:	465d      	mov	r5, fp
 800a1b4:	46d1      	mov	r9, sl
 800a1b6:	d807      	bhi.n	800a1c8 <__ieee754_pow+0x60>
 800a1b8:	d102      	bne.n	800a1c0 <__ieee754_pow+0x58>
 800a1ba:	f1ba 0f00 	cmp.w	sl, #0
 800a1be:	d1eb      	bne.n	800a198 <__ieee754_pow+0x30>
 800a1c0:	429f      	cmp	r7, r3
 800a1c2:	d801      	bhi.n	800a1c8 <__ieee754_pow+0x60>
 800a1c4:	d10f      	bne.n	800a1e6 <__ieee754_pow+0x7e>
 800a1c6:	b171      	cbz	r1, 800a1e6 <__ieee754_pow+0x7e>
 800a1c8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a1cc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a1d0:	ea55 0509 	orrs.w	r5, r5, r9
 800a1d4:	d1e0      	bne.n	800a198 <__ieee754_pow+0x30>
 800a1d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a1da:	18db      	adds	r3, r3, r3
 800a1dc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a1e0:	4152      	adcs	r2, r2
 800a1e2:	429d      	cmp	r5, r3
 800a1e4:	e7d4      	b.n	800a190 <__ieee754_pow+0x28>
 800a1e6:	2d00      	cmp	r5, #0
 800a1e8:	4633      	mov	r3, r6
 800a1ea:	da39      	bge.n	800a260 <__ieee754_pow+0xf8>
 800a1ec:	4a7c      	ldr	r2, [pc, #496]	@ (800a3e0 <__ieee754_pow+0x278>)
 800a1ee:	4297      	cmp	r7, r2
 800a1f0:	d84e      	bhi.n	800a290 <__ieee754_pow+0x128>
 800a1f2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a1f6:	4297      	cmp	r7, r2
 800a1f8:	f240 84ab 	bls.w	800ab52 <__ieee754_pow+0x9ea>
 800a1fc:	153a      	asrs	r2, r7, #20
 800a1fe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a202:	2a14      	cmp	r2, #20
 800a204:	dd0f      	ble.n	800a226 <__ieee754_pow+0xbe>
 800a206:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a20a:	fa21 f402 	lsr.w	r4, r1, r2
 800a20e:	fa04 f202 	lsl.w	r2, r4, r2
 800a212:	428a      	cmp	r2, r1
 800a214:	f040 849d 	bne.w	800ab52 <__ieee754_pow+0x9ea>
 800a218:	f004 0401 	and.w	r4, r4, #1
 800a21c:	f1c4 0402 	rsb	r4, r4, #2
 800a220:	2900      	cmp	r1, #0
 800a222:	d15a      	bne.n	800a2da <__ieee754_pow+0x172>
 800a224:	e00e      	b.n	800a244 <__ieee754_pow+0xdc>
 800a226:	2900      	cmp	r1, #0
 800a228:	d156      	bne.n	800a2d8 <__ieee754_pow+0x170>
 800a22a:	f1c2 0214 	rsb	r2, r2, #20
 800a22e:	fa47 f402 	asr.w	r4, r7, r2
 800a232:	fa04 f202 	lsl.w	r2, r4, r2
 800a236:	42ba      	cmp	r2, r7
 800a238:	f040 8488 	bne.w	800ab4c <__ieee754_pow+0x9e4>
 800a23c:	f004 0401 	and.w	r4, r4, #1
 800a240:	f1c4 0402 	rsb	r4, r4, #2
 800a244:	4a67      	ldr	r2, [pc, #412]	@ (800a3e4 <__ieee754_pow+0x27c>)
 800a246:	4297      	cmp	r7, r2
 800a248:	d130      	bne.n	800a2ac <__ieee754_pow+0x144>
 800a24a:	f1b8 0f00 	cmp.w	r8, #0
 800a24e:	f280 8479 	bge.w	800ab44 <__ieee754_pow+0x9dc>
 800a252:	4652      	mov	r2, sl
 800a254:	465b      	mov	r3, fp
 800a256:	2000      	movs	r0, #0
 800a258:	4962      	ldr	r1, [pc, #392]	@ (800a3e4 <__ieee754_pow+0x27c>)
 800a25a:	f7f6 fa67 	bl	800072c <__aeabi_ddiv>
 800a25e:	e7a1      	b.n	800a1a4 <__ieee754_pow+0x3c>
 800a260:	2400      	movs	r4, #0
 800a262:	2900      	cmp	r1, #0
 800a264:	d139      	bne.n	800a2da <__ieee754_pow+0x172>
 800a266:	4a5d      	ldr	r2, [pc, #372]	@ (800a3dc <__ieee754_pow+0x274>)
 800a268:	4297      	cmp	r7, r2
 800a26a:	d1eb      	bne.n	800a244 <__ieee754_pow+0xdc>
 800a26c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800a270:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a274:	ea53 0309 	orrs.w	r3, r3, r9
 800a278:	f000 845c 	beq.w	800ab34 <__ieee754_pow+0x9cc>
 800a27c:	4b5a      	ldr	r3, [pc, #360]	@ (800a3e8 <__ieee754_pow+0x280>)
 800a27e:	429e      	cmp	r6, r3
 800a280:	d908      	bls.n	800a294 <__ieee754_pow+0x12c>
 800a282:	f1b8 0f00 	cmp.w	r8, #0
 800a286:	f2c0 8459 	blt.w	800ab3c <__ieee754_pow+0x9d4>
 800a28a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a28e:	e789      	b.n	800a1a4 <__ieee754_pow+0x3c>
 800a290:	2402      	movs	r4, #2
 800a292:	e7e6      	b.n	800a262 <__ieee754_pow+0xfa>
 800a294:	f1b8 0f00 	cmp.w	r8, #0
 800a298:	f04f 0000 	mov.w	r0, #0
 800a29c:	f04f 0100 	mov.w	r1, #0
 800a2a0:	da80      	bge.n	800a1a4 <__ieee754_pow+0x3c>
 800a2a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a2a6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a2aa:	e77b      	b.n	800a1a4 <__ieee754_pow+0x3c>
 800a2ac:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a2b0:	d106      	bne.n	800a2c0 <__ieee754_pow+0x158>
 800a2b2:	4652      	mov	r2, sl
 800a2b4:	465b      	mov	r3, fp
 800a2b6:	4650      	mov	r0, sl
 800a2b8:	4659      	mov	r1, fp
 800a2ba:	f7f6 f90d 	bl	80004d8 <__aeabi_dmul>
 800a2be:	e771      	b.n	800a1a4 <__ieee754_pow+0x3c>
 800a2c0:	4a4a      	ldr	r2, [pc, #296]	@ (800a3ec <__ieee754_pow+0x284>)
 800a2c2:	4590      	cmp	r8, r2
 800a2c4:	d109      	bne.n	800a2da <__ieee754_pow+0x172>
 800a2c6:	2d00      	cmp	r5, #0
 800a2c8:	db07      	blt.n	800a2da <__ieee754_pow+0x172>
 800a2ca:	4650      	mov	r0, sl
 800a2cc:	4659      	mov	r1, fp
 800a2ce:	b011      	add	sp, #68	@ 0x44
 800a2d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	f7ff bba0 	b.w	8009a18 <__ieee754_sqrt>
 800a2d8:	2400      	movs	r4, #0
 800a2da:	4650      	mov	r0, sl
 800a2dc:	4659      	mov	r1, fp
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	f7ff fb90 	bl	8009a04 <fabs>
 800a2e4:	9b02      	ldr	r3, [sp, #8]
 800a2e6:	f1b9 0f00 	cmp.w	r9, #0
 800a2ea:	d127      	bne.n	800a33c <__ieee754_pow+0x1d4>
 800a2ec:	4a3d      	ldr	r2, [pc, #244]	@ (800a3e4 <__ieee754_pow+0x27c>)
 800a2ee:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800a2f2:	4594      	cmp	ip, r2
 800a2f4:	d000      	beq.n	800a2f8 <__ieee754_pow+0x190>
 800a2f6:	bb0e      	cbnz	r6, 800a33c <__ieee754_pow+0x1d4>
 800a2f8:	f1b8 0f00 	cmp.w	r8, #0
 800a2fc:	da05      	bge.n	800a30a <__ieee754_pow+0x1a2>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	2000      	movs	r0, #0
 800a304:	4937      	ldr	r1, [pc, #220]	@ (800a3e4 <__ieee754_pow+0x27c>)
 800a306:	f7f6 fa11 	bl	800072c <__aeabi_ddiv>
 800a30a:	2d00      	cmp	r5, #0
 800a30c:	f6bf af4a 	bge.w	800a1a4 <__ieee754_pow+0x3c>
 800a310:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a314:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a318:	4326      	orrs	r6, r4
 800a31a:	d108      	bne.n	800a32e <__ieee754_pow+0x1c6>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4610      	mov	r0, r2
 800a322:	4619      	mov	r1, r3
 800a324:	f7f5 ff20 	bl	8000168 <__aeabi_dsub>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	e795      	b.n	800a25a <__ieee754_pow+0xf2>
 800a32e:	2c01      	cmp	r4, #1
 800a330:	f47f af38 	bne.w	800a1a4 <__ieee754_pow+0x3c>
 800a334:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a338:	4619      	mov	r1, r3
 800a33a:	e733      	b.n	800a1a4 <__ieee754_pow+0x3c>
 800a33c:	0fea      	lsrs	r2, r5, #31
 800a33e:	3a01      	subs	r2, #1
 800a340:	ea52 0c04 	orrs.w	ip, r2, r4
 800a344:	d102      	bne.n	800a34c <__ieee754_pow+0x1e4>
 800a346:	4652      	mov	r2, sl
 800a348:	465b      	mov	r3, fp
 800a34a:	e7e9      	b.n	800a320 <__ieee754_pow+0x1b8>
 800a34c:	f04f 0900 	mov.w	r9, #0
 800a350:	3c01      	subs	r4, #1
 800a352:	4314      	orrs	r4, r2
 800a354:	bf14      	ite	ne
 800a356:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a3e4 <__ieee754_pow+0x27c>
 800a35a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a3f0 <__ieee754_pow+0x288>
 800a35e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a362:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a366:	f240 8107 	bls.w	800a578 <__ieee754_pow+0x410>
 800a36a:	4b22      	ldr	r3, [pc, #136]	@ (800a3f4 <__ieee754_pow+0x28c>)
 800a36c:	429f      	cmp	r7, r3
 800a36e:	4b1e      	ldr	r3, [pc, #120]	@ (800a3e8 <__ieee754_pow+0x280>)
 800a370:	d913      	bls.n	800a39a <__ieee754_pow+0x232>
 800a372:	429e      	cmp	r6, r3
 800a374:	d808      	bhi.n	800a388 <__ieee754_pow+0x220>
 800a376:	f1b8 0f00 	cmp.w	r8, #0
 800a37a:	da08      	bge.n	800a38e <__ieee754_pow+0x226>
 800a37c:	2000      	movs	r0, #0
 800a37e:	b011      	add	sp, #68	@ 0x44
 800a380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	f000 be40 	b.w	800b008 <__math_oflow>
 800a388:	f1b8 0f00 	cmp.w	r8, #0
 800a38c:	dcf6      	bgt.n	800a37c <__ieee754_pow+0x214>
 800a38e:	2000      	movs	r0, #0
 800a390:	b011      	add	sp, #68	@ 0x44
 800a392:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a396:	f000 be32 	b.w	800affe <__math_uflow>
 800a39a:	429e      	cmp	r6, r3
 800a39c:	d20c      	bcs.n	800a3b8 <__ieee754_pow+0x250>
 800a39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f7f6 fb09 	bl	80009bc <__aeabi_dcmplt>
 800a3aa:	3800      	subs	r0, #0
 800a3ac:	bf18      	it	ne
 800a3ae:	2001      	movne	r0, #1
 800a3b0:	f1b8 0f00 	cmp.w	r8, #0
 800a3b4:	daec      	bge.n	800a390 <__ieee754_pow+0x228>
 800a3b6:	e7e2      	b.n	800a37e <__ieee754_pow+0x216>
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a3e4 <__ieee754_pow+0x27c>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	429e      	cmp	r6, r3
 800a3be:	d91b      	bls.n	800a3f8 <__ieee754_pow+0x290>
 800a3c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f7f6 faf9 	bl	80009bc <__aeabi_dcmplt>
 800a3ca:	3800      	subs	r0, #0
 800a3cc:	bf18      	it	ne
 800a3ce:	2001      	movne	r0, #1
 800a3d0:	f1b8 0f00 	cmp.w	r8, #0
 800a3d4:	dcd3      	bgt.n	800a37e <__ieee754_pow+0x216>
 800a3d6:	e7db      	b.n	800a390 <__ieee754_pow+0x228>
 800a3d8:	fff00000 	.word	0xfff00000
 800a3dc:	7ff00000 	.word	0x7ff00000
 800a3e0:	433fffff 	.word	0x433fffff
 800a3e4:	3ff00000 	.word	0x3ff00000
 800a3e8:	3fefffff 	.word	0x3fefffff
 800a3ec:	3fe00000 	.word	0x3fe00000
 800a3f0:	bff00000 	.word	0xbff00000
 800a3f4:	43f00000 	.word	0x43f00000
 800a3f8:	4b5b      	ldr	r3, [pc, #364]	@ (800a568 <__ieee754_pow+0x400>)
 800a3fa:	f7f5 feb5 	bl	8000168 <__aeabi_dsub>
 800a3fe:	a352      	add	r3, pc, #328	@ (adr r3, 800a548 <__ieee754_pow+0x3e0>)
 800a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a404:	4604      	mov	r4, r0
 800a406:	460d      	mov	r5, r1
 800a408:	f7f6 f866 	bl	80004d8 <__aeabi_dmul>
 800a40c:	a350      	add	r3, pc, #320	@ (adr r3, 800a550 <__ieee754_pow+0x3e8>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	4606      	mov	r6, r0
 800a414:	460f      	mov	r7, r1
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	f7f6 f85d 	bl	80004d8 <__aeabi_dmul>
 800a41e:	2200      	movs	r2, #0
 800a420:	4682      	mov	sl, r0
 800a422:	468b      	mov	fp, r1
 800a424:	4620      	mov	r0, r4
 800a426:	4629      	mov	r1, r5
 800a428:	4b50      	ldr	r3, [pc, #320]	@ (800a56c <__ieee754_pow+0x404>)
 800a42a:	f7f6 f855 	bl	80004d8 <__aeabi_dmul>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	a149      	add	r1, pc, #292	@ (adr r1, 800a558 <__ieee754_pow+0x3f0>)
 800a434:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a438:	f7f5 fe96 	bl	8000168 <__aeabi_dsub>
 800a43c:	4622      	mov	r2, r4
 800a43e:	462b      	mov	r3, r5
 800a440:	f7f6 f84a 	bl	80004d8 <__aeabi_dmul>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	2000      	movs	r0, #0
 800a44a:	4949      	ldr	r1, [pc, #292]	@ (800a570 <__ieee754_pow+0x408>)
 800a44c:	f7f5 fe8c 	bl	8000168 <__aeabi_dsub>
 800a450:	4622      	mov	r2, r4
 800a452:	4680      	mov	r8, r0
 800a454:	4689      	mov	r9, r1
 800a456:	462b      	mov	r3, r5
 800a458:	4620      	mov	r0, r4
 800a45a:	4629      	mov	r1, r5
 800a45c:	f7f6 f83c 	bl	80004d8 <__aeabi_dmul>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4640      	mov	r0, r8
 800a466:	4649      	mov	r1, r9
 800a468:	f7f6 f836 	bl	80004d8 <__aeabi_dmul>
 800a46c:	a33c      	add	r3, pc, #240	@ (adr r3, 800a560 <__ieee754_pow+0x3f8>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	f7f6 f831 	bl	80004d8 <__aeabi_dmul>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4650      	mov	r0, sl
 800a47c:	4659      	mov	r1, fp
 800a47e:	f7f5 fe73 	bl	8000168 <__aeabi_dsub>
 800a482:	2400      	movs	r4, #0
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4680      	mov	r8, r0
 800a48a:	4689      	mov	r9, r1
 800a48c:	4630      	mov	r0, r6
 800a48e:	4639      	mov	r1, r7
 800a490:	f7f5 fe6c 	bl	800016c <__adddf3>
 800a494:	4632      	mov	r2, r6
 800a496:	463b      	mov	r3, r7
 800a498:	4620      	mov	r0, r4
 800a49a:	460d      	mov	r5, r1
 800a49c:	f7f5 fe64 	bl	8000168 <__aeabi_dsub>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	f7f5 fe5e 	bl	8000168 <__aeabi_dsub>
 800a4ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	9304      	str	r3, [sp, #16]
 800a4b8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a4bc:	4606      	mov	r6, r0
 800a4be:	460f      	mov	r7, r1
 800a4c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	465b      	mov	r3, fp
 800a4c8:	f7f5 fe4e 	bl	8000168 <__aeabi_dsub>
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	462b      	mov	r3, r5
 800a4d0:	f7f6 f802 	bl	80004d8 <__aeabi_dmul>
 800a4d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4d8:	4680      	mov	r8, r0
 800a4da:	4689      	mov	r9, r1
 800a4dc:	4630      	mov	r0, r6
 800a4de:	4639      	mov	r1, r7
 800a4e0:	f7f5 fffa 	bl	80004d8 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4640      	mov	r0, r8
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	f7f5 fe3e 	bl	800016c <__adddf3>
 800a4f0:	4652      	mov	r2, sl
 800a4f2:	465b      	mov	r3, fp
 800a4f4:	4606      	mov	r6, r0
 800a4f6:	460f      	mov	r7, r1
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	f7f5 ffec 	bl	80004d8 <__aeabi_dmul>
 800a500:	460b      	mov	r3, r1
 800a502:	4602      	mov	r2, r0
 800a504:	4680      	mov	r8, r0
 800a506:	4689      	mov	r9, r1
 800a508:	4630      	mov	r0, r6
 800a50a:	4639      	mov	r1, r7
 800a50c:	f7f5 fe2e 	bl	800016c <__adddf3>
 800a510:	4b18      	ldr	r3, [pc, #96]	@ (800a574 <__ieee754_pow+0x40c>)
 800a512:	4604      	mov	r4, r0
 800a514:	4299      	cmp	r1, r3
 800a516:	460d      	mov	r5, r1
 800a518:	468a      	mov	sl, r1
 800a51a:	468b      	mov	fp, r1
 800a51c:	f340 82e0 	ble.w	800aae0 <__ieee754_pow+0x978>
 800a520:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a524:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a528:	4303      	orrs	r3, r0
 800a52a:	f000 81df 	beq.w	800a8ec <__ieee754_pow+0x784>
 800a52e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a532:	2200      	movs	r2, #0
 800a534:	2300      	movs	r3, #0
 800a536:	f7f6 fa41 	bl	80009bc <__aeabi_dcmplt>
 800a53a:	3800      	subs	r0, #0
 800a53c:	bf18      	it	ne
 800a53e:	2001      	movne	r0, #1
 800a540:	e71d      	b.n	800a37e <__ieee754_pow+0x216>
 800a542:	bf00      	nop
 800a544:	f3af 8000 	nop.w
 800a548:	60000000 	.word	0x60000000
 800a54c:	3ff71547 	.word	0x3ff71547
 800a550:	f85ddf44 	.word	0xf85ddf44
 800a554:	3e54ae0b 	.word	0x3e54ae0b
 800a558:	55555555 	.word	0x55555555
 800a55c:	3fd55555 	.word	0x3fd55555
 800a560:	652b82fe 	.word	0x652b82fe
 800a564:	3ff71547 	.word	0x3ff71547
 800a568:	3ff00000 	.word	0x3ff00000
 800a56c:	3fd00000 	.word	0x3fd00000
 800a570:	3fe00000 	.word	0x3fe00000
 800a574:	408fffff 	.word	0x408fffff
 800a578:	4ad3      	ldr	r2, [pc, #844]	@ (800a8c8 <__ieee754_pow+0x760>)
 800a57a:	402a      	ands	r2, r5
 800a57c:	2a00      	cmp	r2, #0
 800a57e:	f040 817a 	bne.w	800a876 <__ieee754_pow+0x70e>
 800a582:	4bd2      	ldr	r3, [pc, #840]	@ (800a8cc <__ieee754_pow+0x764>)
 800a584:	2200      	movs	r2, #0
 800a586:	f7f5 ffa7 	bl	80004d8 <__aeabi_dmul>
 800a58a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a58e:	460b      	mov	r3, r1
 800a590:	151a      	asrs	r2, r3, #20
 800a592:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a596:	4422      	add	r2, r4
 800a598:	920a      	str	r2, [sp, #40]	@ 0x28
 800a59a:	4acd      	ldr	r2, [pc, #820]	@ (800a8d0 <__ieee754_pow+0x768>)
 800a59c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5a0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a5aa:	dd08      	ble.n	800a5be <__ieee754_pow+0x456>
 800a5ac:	4ac9      	ldr	r2, [pc, #804]	@ (800a8d4 <__ieee754_pow+0x76c>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	f340 8163 	ble.w	800a87a <__ieee754_pow+0x712>
 800a5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5b6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5be:	2600      	movs	r6, #0
 800a5c0:	00f3      	lsls	r3, r6, #3
 800a5c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5c4:	4bc4      	ldr	r3, [pc, #784]	@ (800a8d8 <__ieee754_pow+0x770>)
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a5cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a5d6:	4623      	mov	r3, r4
 800a5d8:	4682      	mov	sl, r0
 800a5da:	f7f5 fdc5 	bl	8000168 <__aeabi_dsub>
 800a5de:	4652      	mov	r2, sl
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a5e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5ea:	f7f5 fdbf 	bl	800016c <__adddf3>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	49b9      	ldr	r1, [pc, #740]	@ (800a8dc <__ieee754_pow+0x774>)
 800a5f6:	f7f6 f899 	bl	800072c <__aeabi_ddiv>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a606:	f7f5 ff67 	bl	80004d8 <__aeabi_dmul>
 800a60a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a60e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a612:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a616:	2300      	movs	r3, #0
 800a618:	2200      	movs	r2, #0
 800a61a:	46ab      	mov	fp, r5
 800a61c:	106d      	asrs	r5, r5, #1
 800a61e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a622:	9304      	str	r3, [sp, #16]
 800a624:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a628:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a62c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a630:	4640      	mov	r0, r8
 800a632:	4649      	mov	r1, r9
 800a634:	4614      	mov	r4, r2
 800a636:	461d      	mov	r5, r3
 800a638:	f7f5 ff4e 	bl	80004d8 <__aeabi_dmul>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a644:	f7f5 fd90 	bl	8000168 <__aeabi_dsub>
 800a648:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a64c:	4606      	mov	r6, r0
 800a64e:	460f      	mov	r7, r1
 800a650:	4620      	mov	r0, r4
 800a652:	4629      	mov	r1, r5
 800a654:	f7f5 fd88 	bl	8000168 <__aeabi_dsub>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4650      	mov	r0, sl
 800a65e:	4659      	mov	r1, fp
 800a660:	f7f5 fd82 	bl	8000168 <__aeabi_dsub>
 800a664:	4642      	mov	r2, r8
 800a666:	464b      	mov	r3, r9
 800a668:	f7f5 ff36 	bl	80004d8 <__aeabi_dmul>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4630      	mov	r0, r6
 800a672:	4639      	mov	r1, r7
 800a674:	f7f5 fd78 	bl	8000168 <__aeabi_dsub>
 800a678:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a67c:	f7f5 ff2c 	bl	80004d8 <__aeabi_dmul>
 800a680:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a684:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a688:	4610      	mov	r0, r2
 800a68a:	4619      	mov	r1, r3
 800a68c:	f7f5 ff24 	bl	80004d8 <__aeabi_dmul>
 800a690:	a37b      	add	r3, pc, #492	@ (adr r3, 800a880 <__ieee754_pow+0x718>)
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	4604      	mov	r4, r0
 800a698:	460d      	mov	r5, r1
 800a69a:	f7f5 ff1d 	bl	80004d8 <__aeabi_dmul>
 800a69e:	a37a      	add	r3, pc, #488	@ (adr r3, 800a888 <__ieee754_pow+0x720>)
 800a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a4:	f7f5 fd62 	bl	800016c <__adddf3>
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	462b      	mov	r3, r5
 800a6ac:	f7f5 ff14 	bl	80004d8 <__aeabi_dmul>
 800a6b0:	a377      	add	r3, pc, #476	@ (adr r3, 800a890 <__ieee754_pow+0x728>)
 800a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b6:	f7f5 fd59 	bl	800016c <__adddf3>
 800a6ba:	4622      	mov	r2, r4
 800a6bc:	462b      	mov	r3, r5
 800a6be:	f7f5 ff0b 	bl	80004d8 <__aeabi_dmul>
 800a6c2:	a375      	add	r3, pc, #468	@ (adr r3, 800a898 <__ieee754_pow+0x730>)
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	f7f5 fd50 	bl	800016c <__adddf3>
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	462b      	mov	r3, r5
 800a6d0:	f7f5 ff02 	bl	80004d8 <__aeabi_dmul>
 800a6d4:	a372      	add	r3, pc, #456	@ (adr r3, 800a8a0 <__ieee754_pow+0x738>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f5 fd47 	bl	800016c <__adddf3>
 800a6de:	4622      	mov	r2, r4
 800a6e0:	462b      	mov	r3, r5
 800a6e2:	f7f5 fef9 	bl	80004d8 <__aeabi_dmul>
 800a6e6:	a370      	add	r3, pc, #448	@ (adr r3, 800a8a8 <__ieee754_pow+0x740>)
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f7f5 fd3e 	bl	800016c <__adddf3>
 800a6f0:	4622      	mov	r2, r4
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460f      	mov	r7, r1
 800a6f6:	462b      	mov	r3, r5
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f7f5 feec 	bl	80004d8 <__aeabi_dmul>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4630      	mov	r0, r6
 800a706:	4639      	mov	r1, r7
 800a708:	f7f5 fee6 	bl	80004d8 <__aeabi_dmul>
 800a70c:	4604      	mov	r4, r0
 800a70e:	460d      	mov	r5, r1
 800a710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a714:	4642      	mov	r2, r8
 800a716:	464b      	mov	r3, r9
 800a718:	f7f5 fd28 	bl	800016c <__adddf3>
 800a71c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a720:	f7f5 feda 	bl	80004d8 <__aeabi_dmul>
 800a724:	4622      	mov	r2, r4
 800a726:	462b      	mov	r3, r5
 800a728:	f7f5 fd20 	bl	800016c <__adddf3>
 800a72c:	4642      	mov	r2, r8
 800a72e:	4682      	mov	sl, r0
 800a730:	468b      	mov	fp, r1
 800a732:	464b      	mov	r3, r9
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	f7f5 fece 	bl	80004d8 <__aeabi_dmul>
 800a73c:	2200      	movs	r2, #0
 800a73e:	4b68      	ldr	r3, [pc, #416]	@ (800a8e0 <__ieee754_pow+0x778>)
 800a740:	4606      	mov	r6, r0
 800a742:	460f      	mov	r7, r1
 800a744:	f7f5 fd12 	bl	800016c <__adddf3>
 800a748:	4652      	mov	r2, sl
 800a74a:	465b      	mov	r3, fp
 800a74c:	f7f5 fd0e 	bl	800016c <__adddf3>
 800a750:	2400      	movs	r4, #0
 800a752:	460d      	mov	r5, r1
 800a754:	4622      	mov	r2, r4
 800a756:	460b      	mov	r3, r1
 800a758:	4640      	mov	r0, r8
 800a75a:	4649      	mov	r1, r9
 800a75c:	f7f5 febc 	bl	80004d8 <__aeabi_dmul>
 800a760:	2200      	movs	r2, #0
 800a762:	4680      	mov	r8, r0
 800a764:	4689      	mov	r9, r1
 800a766:	4620      	mov	r0, r4
 800a768:	4629      	mov	r1, r5
 800a76a:	4b5d      	ldr	r3, [pc, #372]	@ (800a8e0 <__ieee754_pow+0x778>)
 800a76c:	f7f5 fcfc 	bl	8000168 <__aeabi_dsub>
 800a770:	4632      	mov	r2, r6
 800a772:	463b      	mov	r3, r7
 800a774:	f7f5 fcf8 	bl	8000168 <__aeabi_dsub>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4650      	mov	r0, sl
 800a77e:	4659      	mov	r1, fp
 800a780:	f7f5 fcf2 	bl	8000168 <__aeabi_dsub>
 800a784:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a788:	f7f5 fea6 	bl	80004d8 <__aeabi_dmul>
 800a78c:	4622      	mov	r2, r4
 800a78e:	4606      	mov	r6, r0
 800a790:	460f      	mov	r7, r1
 800a792:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a796:	462b      	mov	r3, r5
 800a798:	f7f5 fe9e 	bl	80004d8 <__aeabi_dmul>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	f7f5 fce2 	bl	800016c <__adddf3>
 800a7a8:	2400      	movs	r4, #0
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	460f      	mov	r7, r1
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	f7f5 fcd9 	bl	800016c <__adddf3>
 800a7ba:	a33d      	add	r3, pc, #244	@ (adr r3, 800a8b0 <__ieee754_pow+0x748>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	460d      	mov	r5, r1
 800a7c4:	f7f5 fe88 	bl	80004d8 <__aeabi_dmul>
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	464b      	mov	r3, r9
 800a7cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	f7f5 fcc8 	bl	8000168 <__aeabi_dsub>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4630      	mov	r0, r6
 800a7de:	4639      	mov	r1, r7
 800a7e0:	f7f5 fcc2 	bl	8000168 <__aeabi_dsub>
 800a7e4:	a334      	add	r3, pc, #208	@ (adr r3, 800a8b8 <__ieee754_pow+0x750>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	f7f5 fe75 	bl	80004d8 <__aeabi_dmul>
 800a7ee:	a334      	add	r3, pc, #208	@ (adr r3, 800a8c0 <__ieee754_pow+0x758>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	460f      	mov	r7, r1
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	f7f5 fe6c 	bl	80004d8 <__aeabi_dmul>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4630      	mov	r0, r6
 800a806:	4639      	mov	r1, r7
 800a808:	f7f5 fcb0 	bl	800016c <__adddf3>
 800a80c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a80e:	4b35      	ldr	r3, [pc, #212]	@ (800a8e4 <__ieee754_pow+0x77c>)
 800a810:	2400      	movs	r4, #0
 800a812:	4413      	add	r3, r2
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	f7f5 fca8 	bl	800016c <__adddf3>
 800a81c:	4682      	mov	sl, r0
 800a81e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a820:	468b      	mov	fp, r1
 800a822:	f7f5 fdef 	bl	8000404 <__aeabi_i2d>
 800a826:	4606      	mov	r6, r0
 800a828:	460f      	mov	r7, r1
 800a82a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a82c:	4b2e      	ldr	r3, [pc, #184]	@ (800a8e8 <__ieee754_pow+0x780>)
 800a82e:	4413      	add	r3, r2
 800a830:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a834:	4652      	mov	r2, sl
 800a836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a83a:	465b      	mov	r3, fp
 800a83c:	f7f5 fc96 	bl	800016c <__adddf3>
 800a840:	4642      	mov	r2, r8
 800a842:	464b      	mov	r3, r9
 800a844:	f7f5 fc92 	bl	800016c <__adddf3>
 800a848:	4632      	mov	r2, r6
 800a84a:	463b      	mov	r3, r7
 800a84c:	f7f5 fc8e 	bl	800016c <__adddf3>
 800a850:	4632      	mov	r2, r6
 800a852:	463b      	mov	r3, r7
 800a854:	4620      	mov	r0, r4
 800a856:	460d      	mov	r5, r1
 800a858:	f7f5 fc86 	bl	8000168 <__aeabi_dsub>
 800a85c:	4642      	mov	r2, r8
 800a85e:	464b      	mov	r3, r9
 800a860:	f7f5 fc82 	bl	8000168 <__aeabi_dsub>
 800a864:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a868:	f7f5 fc7e 	bl	8000168 <__aeabi_dsub>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4650      	mov	r0, sl
 800a872:	4659      	mov	r1, fp
 800a874:	e618      	b.n	800a4a8 <__ieee754_pow+0x340>
 800a876:	2400      	movs	r4, #0
 800a878:	e68a      	b.n	800a590 <__ieee754_pow+0x428>
 800a87a:	2601      	movs	r6, #1
 800a87c:	e6a0      	b.n	800a5c0 <__ieee754_pow+0x458>
 800a87e:	bf00      	nop
 800a880:	4a454eef 	.word	0x4a454eef
 800a884:	3fca7e28 	.word	0x3fca7e28
 800a888:	93c9db65 	.word	0x93c9db65
 800a88c:	3fcd864a 	.word	0x3fcd864a
 800a890:	a91d4101 	.word	0xa91d4101
 800a894:	3fd17460 	.word	0x3fd17460
 800a898:	518f264d 	.word	0x518f264d
 800a89c:	3fd55555 	.word	0x3fd55555
 800a8a0:	db6fabff 	.word	0xdb6fabff
 800a8a4:	3fdb6db6 	.word	0x3fdb6db6
 800a8a8:	33333303 	.word	0x33333303
 800a8ac:	3fe33333 	.word	0x3fe33333
 800a8b0:	e0000000 	.word	0xe0000000
 800a8b4:	3feec709 	.word	0x3feec709
 800a8b8:	dc3a03fd 	.word	0xdc3a03fd
 800a8bc:	3feec709 	.word	0x3feec709
 800a8c0:	145b01f5 	.word	0x145b01f5
 800a8c4:	be3e2fe0 	.word	0xbe3e2fe0
 800a8c8:	7ff00000 	.word	0x7ff00000
 800a8cc:	43400000 	.word	0x43400000
 800a8d0:	0003988e 	.word	0x0003988e
 800a8d4:	000bb679 	.word	0x000bb679
 800a8d8:	0800b570 	.word	0x0800b570
 800a8dc:	3ff00000 	.word	0x3ff00000
 800a8e0:	40080000 	.word	0x40080000
 800a8e4:	0800b550 	.word	0x0800b550
 800a8e8:	0800b560 	.word	0x0800b560
 800a8ec:	a39a      	add	r3, pc, #616	@ (adr r3, 800ab58 <__ieee754_pow+0x9f0>)
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	f7f5 fc39 	bl	800016c <__adddf3>
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	e9cd 0100 	strd	r0, r1, [sp]
 800a900:	464b      	mov	r3, r9
 800a902:	4620      	mov	r0, r4
 800a904:	4629      	mov	r1, r5
 800a906:	f7f5 fc2f 	bl	8000168 <__aeabi_dsub>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a912:	f7f6 f871 	bl	80009f8 <__aeabi_dcmpgt>
 800a916:	2800      	cmp	r0, #0
 800a918:	f47f ae09 	bne.w	800a52e <__ieee754_pow+0x3c6>
 800a91c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a920:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a924:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a928:	fa43 fa0a 	asr.w	sl, r3, sl
 800a92c:	44da      	add	sl, fp
 800a92e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a932:	489b      	ldr	r0, [pc, #620]	@ (800aba0 <__ieee754_pow+0xa38>)
 800a934:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a938:	4108      	asrs	r0, r1
 800a93a:	ea00 030a 	and.w	r3, r0, sl
 800a93e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a942:	f1c1 0114 	rsb	r1, r1, #20
 800a946:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a94a:	4640      	mov	r0, r8
 800a94c:	fa4a fa01 	asr.w	sl, sl, r1
 800a950:	f1bb 0f00 	cmp.w	fp, #0
 800a954:	4649      	mov	r1, r9
 800a956:	f04f 0200 	mov.w	r2, #0
 800a95a:	bfb8      	it	lt
 800a95c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a960:	f7f5 fc02 	bl	8000168 <__aeabi_dsub>
 800a964:	4680      	mov	r8, r0
 800a966:	4689      	mov	r9, r1
 800a968:	2400      	movs	r4, #0
 800a96a:	4632      	mov	r2, r6
 800a96c:	463b      	mov	r3, r7
 800a96e:	4640      	mov	r0, r8
 800a970:	4649      	mov	r1, r9
 800a972:	f7f5 fbfb 	bl	800016c <__adddf3>
 800a976:	a37a      	add	r3, pc, #488	@ (adr r3, 800ab60 <__ieee754_pow+0x9f8>)
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	4620      	mov	r0, r4
 800a97e:	460d      	mov	r5, r1
 800a980:	f7f5 fdaa 	bl	80004d8 <__aeabi_dmul>
 800a984:	4642      	mov	r2, r8
 800a986:	464b      	mov	r3, r9
 800a988:	e9cd 0100 	strd	r0, r1, [sp]
 800a98c:	4620      	mov	r0, r4
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f5 fbea 	bl	8000168 <__aeabi_dsub>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	f7f5 fbe4 	bl	8000168 <__aeabi_dsub>
 800a9a0:	a371      	add	r3, pc, #452	@ (adr r3, 800ab68 <__ieee754_pow+0xa00>)
 800a9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a6:	f7f5 fd97 	bl	80004d8 <__aeabi_dmul>
 800a9aa:	a371      	add	r3, pc, #452	@ (adr r3, 800ab70 <__ieee754_pow+0xa08>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	4680      	mov	r8, r0
 800a9b2:	4689      	mov	r9, r1
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	f7f5 fd8e 	bl	80004d8 <__aeabi_dmul>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4640      	mov	r0, r8
 800a9c2:	4649      	mov	r1, r9
 800a9c4:	f7f5 fbd2 	bl	800016c <__adddf3>
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9d4:	f7f5 fbca 	bl	800016c <__adddf3>
 800a9d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9dc:	4680      	mov	r8, r0
 800a9de:	4689      	mov	r9, r1
 800a9e0:	f7f5 fbc2 	bl	8000168 <__aeabi_dsub>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	f7f5 fbbc 	bl	8000168 <__aeabi_dsub>
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	460f      	mov	r7, r1
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	4649      	mov	r1, r9
 800a9fc:	f7f5 fd6c 	bl	80004d8 <__aeabi_dmul>
 800aa00:	a35d      	add	r3, pc, #372	@ (adr r3, 800ab78 <__ieee754_pow+0xa10>)
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	4604      	mov	r4, r0
 800aa08:	460d      	mov	r5, r1
 800aa0a:	f7f5 fd65 	bl	80004d8 <__aeabi_dmul>
 800aa0e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ab80 <__ieee754_pow+0xa18>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	f7f5 fba8 	bl	8000168 <__aeabi_dsub>
 800aa18:	4622      	mov	r2, r4
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	f7f5 fd5c 	bl	80004d8 <__aeabi_dmul>
 800aa20:	a359      	add	r3, pc, #356	@ (adr r3, 800ab88 <__ieee754_pow+0xa20>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f7f5 fba1 	bl	800016c <__adddf3>
 800aa2a:	4622      	mov	r2, r4
 800aa2c:	462b      	mov	r3, r5
 800aa2e:	f7f5 fd53 	bl	80004d8 <__aeabi_dmul>
 800aa32:	a357      	add	r3, pc, #348	@ (adr r3, 800ab90 <__ieee754_pow+0xa28>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f7f5 fb96 	bl	8000168 <__aeabi_dsub>
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	462b      	mov	r3, r5
 800aa40:	f7f5 fd4a 	bl	80004d8 <__aeabi_dmul>
 800aa44:	a354      	add	r3, pc, #336	@ (adr r3, 800ab98 <__ieee754_pow+0xa30>)
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	f7f5 fb8f 	bl	800016c <__adddf3>
 800aa4e:	4622      	mov	r2, r4
 800aa50:	462b      	mov	r3, r5
 800aa52:	f7f5 fd41 	bl	80004d8 <__aeabi_dmul>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	f7f5 fb83 	bl	8000168 <__aeabi_dsub>
 800aa62:	4604      	mov	r4, r0
 800aa64:	460d      	mov	r5, r1
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	4649      	mov	r1, r9
 800aa6e:	f7f5 fd33 	bl	80004d8 <__aeabi_dmul>
 800aa72:	2200      	movs	r2, #0
 800aa74:	e9cd 0100 	strd	r0, r1, [sp]
 800aa78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f5 fb72 	bl	8000168 <__aeabi_dsub>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa8c:	f7f5 fe4e 	bl	800072c <__aeabi_ddiv>
 800aa90:	4632      	mov	r2, r6
 800aa92:	4604      	mov	r4, r0
 800aa94:	460d      	mov	r5, r1
 800aa96:	463b      	mov	r3, r7
 800aa98:	4640      	mov	r0, r8
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	f7f5 fd1c 	bl	80004d8 <__aeabi_dmul>
 800aaa0:	4632      	mov	r2, r6
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	f7f5 fb62 	bl	800016c <__adddf3>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4620      	mov	r0, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	f7f5 fb5a 	bl	8000168 <__aeabi_dsub>
 800aab4:	4642      	mov	r2, r8
 800aab6:	464b      	mov	r3, r9
 800aab8:	f7f5 fb56 	bl	8000168 <__aeabi_dsub>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	2000      	movs	r0, #0
 800aac2:	4938      	ldr	r1, [pc, #224]	@ (800aba4 <__ieee754_pow+0xa3c>)
 800aac4:	f7f5 fb50 	bl	8000168 <__aeabi_dsub>
 800aac8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800aacc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800aad0:	da2e      	bge.n	800ab30 <__ieee754_pow+0x9c8>
 800aad2:	4652      	mov	r2, sl
 800aad4:	f000 fa00 	bl	800aed8 <scalbn>
 800aad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aadc:	f7ff bbed 	b.w	800a2ba <__ieee754_pow+0x152>
 800aae0:	4c31      	ldr	r4, [pc, #196]	@ (800aba8 <__ieee754_pow+0xa40>)
 800aae2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aae6:	42a3      	cmp	r3, r4
 800aae8:	d91a      	bls.n	800ab20 <__ieee754_pow+0x9b8>
 800aaea:	4b30      	ldr	r3, [pc, #192]	@ (800abac <__ieee754_pow+0xa44>)
 800aaec:	440b      	add	r3, r1
 800aaee:	4303      	orrs	r3, r0
 800aaf0:	d009      	beq.n	800ab06 <__ieee754_pow+0x99e>
 800aaf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f7f5 ff5f 	bl	80009bc <__aeabi_dcmplt>
 800aafe:	3800      	subs	r0, #0
 800ab00:	bf18      	it	ne
 800ab02:	2001      	movne	r0, #1
 800ab04:	e444      	b.n	800a390 <__ieee754_pow+0x228>
 800ab06:	4642      	mov	r2, r8
 800ab08:	464b      	mov	r3, r9
 800ab0a:	f7f5 fb2d 	bl	8000168 <__aeabi_dsub>
 800ab0e:	4632      	mov	r2, r6
 800ab10:	463b      	mov	r3, r7
 800ab12:	f7f5 ff67 	bl	80009e4 <__aeabi_dcmpge>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d1eb      	bne.n	800aaf2 <__ieee754_pow+0x98a>
 800ab1a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800abb0 <__ieee754_pow+0xa48>
 800ab1e:	e6fd      	b.n	800a91c <__ieee754_pow+0x7b4>
 800ab20:	469a      	mov	sl, r3
 800ab22:	4b24      	ldr	r3, [pc, #144]	@ (800abb4 <__ieee754_pow+0xa4c>)
 800ab24:	459a      	cmp	sl, r3
 800ab26:	f63f aef9 	bhi.w	800a91c <__ieee754_pow+0x7b4>
 800ab2a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ab2e:	e71b      	b.n	800a968 <__ieee754_pow+0x800>
 800ab30:	4621      	mov	r1, r4
 800ab32:	e7d1      	b.n	800aad8 <__ieee754_pow+0x970>
 800ab34:	2000      	movs	r0, #0
 800ab36:	491b      	ldr	r1, [pc, #108]	@ (800aba4 <__ieee754_pow+0xa3c>)
 800ab38:	f7ff bb34 	b.w	800a1a4 <__ieee754_pow+0x3c>
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	2100      	movs	r1, #0
 800ab40:	f7ff bb30 	b.w	800a1a4 <__ieee754_pow+0x3c>
 800ab44:	4650      	mov	r0, sl
 800ab46:	4659      	mov	r1, fp
 800ab48:	f7ff bb2c 	b.w	800a1a4 <__ieee754_pow+0x3c>
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	f7ff bb79 	b.w	800a244 <__ieee754_pow+0xdc>
 800ab52:	2400      	movs	r4, #0
 800ab54:	f7ff bb64 	b.w	800a220 <__ieee754_pow+0xb8>
 800ab58:	652b82fe 	.word	0x652b82fe
 800ab5c:	3c971547 	.word	0x3c971547
 800ab60:	00000000 	.word	0x00000000
 800ab64:	3fe62e43 	.word	0x3fe62e43
 800ab68:	fefa39ef 	.word	0xfefa39ef
 800ab6c:	3fe62e42 	.word	0x3fe62e42
 800ab70:	0ca86c39 	.word	0x0ca86c39
 800ab74:	be205c61 	.word	0xbe205c61
 800ab78:	72bea4d0 	.word	0x72bea4d0
 800ab7c:	3e663769 	.word	0x3e663769
 800ab80:	c5d26bf1 	.word	0xc5d26bf1
 800ab84:	3ebbbd41 	.word	0x3ebbbd41
 800ab88:	af25de2c 	.word	0xaf25de2c
 800ab8c:	3f11566a 	.word	0x3f11566a
 800ab90:	16bebd93 	.word	0x16bebd93
 800ab94:	3f66c16c 	.word	0x3f66c16c
 800ab98:	5555553e 	.word	0x5555553e
 800ab9c:	3fc55555 	.word	0x3fc55555
 800aba0:	fff00000 	.word	0xfff00000
 800aba4:	3ff00000 	.word	0x3ff00000
 800aba8:	4090cbff 	.word	0x4090cbff
 800abac:	3f6f3400 	.word	0x3f6f3400
 800abb0:	4090cc00 	.word	0x4090cc00
 800abb4:	3fe00000 	.word	0x3fe00000

0800abb8 <atan>:
 800abb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abbc:	4bbc      	ldr	r3, [pc, #752]	@ (800aeb0 <atan+0x2f8>)
 800abbe:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800abc2:	429e      	cmp	r6, r3
 800abc4:	4604      	mov	r4, r0
 800abc6:	460d      	mov	r5, r1
 800abc8:	468b      	mov	fp, r1
 800abca:	d918      	bls.n	800abfe <atan+0x46>
 800abcc:	4bb9      	ldr	r3, [pc, #740]	@ (800aeb4 <atan+0x2fc>)
 800abce:	429e      	cmp	r6, r3
 800abd0:	d801      	bhi.n	800abd6 <atan+0x1e>
 800abd2:	d109      	bne.n	800abe8 <atan+0x30>
 800abd4:	b140      	cbz	r0, 800abe8 <atan+0x30>
 800abd6:	4622      	mov	r2, r4
 800abd8:	462b      	mov	r3, r5
 800abda:	4620      	mov	r0, r4
 800abdc:	4629      	mov	r1, r5
 800abde:	f7f5 fac5 	bl	800016c <__adddf3>
 800abe2:	4604      	mov	r4, r0
 800abe4:	460d      	mov	r5, r1
 800abe6:	e006      	b.n	800abf6 <atan+0x3e>
 800abe8:	f1bb 0f00 	cmp.w	fp, #0
 800abec:	f340 8123 	ble.w	800ae36 <atan+0x27e>
 800abf0:	a593      	add	r5, pc, #588	@ (adr r5, 800ae40 <atan+0x288>)
 800abf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800abf6:	4620      	mov	r0, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfe:	4bae      	ldr	r3, [pc, #696]	@ (800aeb8 <atan+0x300>)
 800ac00:	429e      	cmp	r6, r3
 800ac02:	d811      	bhi.n	800ac28 <atan+0x70>
 800ac04:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ac08:	429e      	cmp	r6, r3
 800ac0a:	d80a      	bhi.n	800ac22 <atan+0x6a>
 800ac0c:	a38e      	add	r3, pc, #568	@ (adr r3, 800ae48 <atan+0x290>)
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	f7f5 faab 	bl	800016c <__adddf3>
 800ac16:	2200      	movs	r2, #0
 800ac18:	4ba8      	ldr	r3, [pc, #672]	@ (800aebc <atan+0x304>)
 800ac1a:	f7f5 feed 	bl	80009f8 <__aeabi_dcmpgt>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d1e9      	bne.n	800abf6 <atan+0x3e>
 800ac22:	f04f 3aff 	mov.w	sl, #4294967295
 800ac26:	e027      	b.n	800ac78 <atan+0xc0>
 800ac28:	f7fe feec 	bl	8009a04 <fabs>
 800ac2c:	4ba4      	ldr	r3, [pc, #656]	@ (800aec0 <atan+0x308>)
 800ac2e:	4604      	mov	r4, r0
 800ac30:	429e      	cmp	r6, r3
 800ac32:	460d      	mov	r5, r1
 800ac34:	f200 80b8 	bhi.w	800ada8 <atan+0x1f0>
 800ac38:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ac3c:	429e      	cmp	r6, r3
 800ac3e:	f200 809c 	bhi.w	800ad7a <atan+0x1c2>
 800ac42:	4602      	mov	r2, r0
 800ac44:	460b      	mov	r3, r1
 800ac46:	f7f5 fa91 	bl	800016c <__adddf3>
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	4b9b      	ldr	r3, [pc, #620]	@ (800aebc <atan+0x304>)
 800ac4e:	f7f5 fa8b 	bl	8000168 <__aeabi_dsub>
 800ac52:	2200      	movs	r2, #0
 800ac54:	4606      	mov	r6, r0
 800ac56:	460f      	mov	r7, r1
 800ac58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	4629      	mov	r1, r5
 800ac60:	f7f5 fa84 	bl	800016c <__adddf3>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4630      	mov	r0, r6
 800ac6a:	4639      	mov	r1, r7
 800ac6c:	f7f5 fd5e 	bl	800072c <__aeabi_ddiv>
 800ac70:	f04f 0a00 	mov.w	sl, #0
 800ac74:	4604      	mov	r4, r0
 800ac76:	460d      	mov	r5, r1
 800ac78:	4622      	mov	r2, r4
 800ac7a:	462b      	mov	r3, r5
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	4629      	mov	r1, r5
 800ac80:	f7f5 fc2a 	bl	80004d8 <__aeabi_dmul>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4680      	mov	r8, r0
 800ac8a:	4689      	mov	r9, r1
 800ac8c:	f7f5 fc24 	bl	80004d8 <__aeabi_dmul>
 800ac90:	a36f      	add	r3, pc, #444	@ (adr r3, 800ae50 <atan+0x298>)
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	4606      	mov	r6, r0
 800ac98:	460f      	mov	r7, r1
 800ac9a:	f7f5 fc1d 	bl	80004d8 <__aeabi_dmul>
 800ac9e:	a36e      	add	r3, pc, #440	@ (adr r3, 800ae58 <atan+0x2a0>)
 800aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca4:	f7f5 fa62 	bl	800016c <__adddf3>
 800aca8:	4632      	mov	r2, r6
 800acaa:	463b      	mov	r3, r7
 800acac:	f7f5 fc14 	bl	80004d8 <__aeabi_dmul>
 800acb0:	a36b      	add	r3, pc, #428	@ (adr r3, 800ae60 <atan+0x2a8>)
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f7f5 fa59 	bl	800016c <__adddf3>
 800acba:	4632      	mov	r2, r6
 800acbc:	463b      	mov	r3, r7
 800acbe:	f7f5 fc0b 	bl	80004d8 <__aeabi_dmul>
 800acc2:	a369      	add	r3, pc, #420	@ (adr r3, 800ae68 <atan+0x2b0>)
 800acc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc8:	f7f5 fa50 	bl	800016c <__adddf3>
 800accc:	4632      	mov	r2, r6
 800acce:	463b      	mov	r3, r7
 800acd0:	f7f5 fc02 	bl	80004d8 <__aeabi_dmul>
 800acd4:	a366      	add	r3, pc, #408	@ (adr r3, 800ae70 <atan+0x2b8>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fa47 	bl	800016c <__adddf3>
 800acde:	4632      	mov	r2, r6
 800ace0:	463b      	mov	r3, r7
 800ace2:	f7f5 fbf9 	bl	80004d8 <__aeabi_dmul>
 800ace6:	a364      	add	r3, pc, #400	@ (adr r3, 800ae78 <atan+0x2c0>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f7f5 fa3e 	bl	800016c <__adddf3>
 800acf0:	4642      	mov	r2, r8
 800acf2:	464b      	mov	r3, r9
 800acf4:	f7f5 fbf0 	bl	80004d8 <__aeabi_dmul>
 800acf8:	a361      	add	r3, pc, #388	@ (adr r3, 800ae80 <atan+0x2c8>)
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	4680      	mov	r8, r0
 800ad00:	4689      	mov	r9, r1
 800ad02:	4630      	mov	r0, r6
 800ad04:	4639      	mov	r1, r7
 800ad06:	f7f5 fbe7 	bl	80004d8 <__aeabi_dmul>
 800ad0a:	a35f      	add	r3, pc, #380	@ (adr r3, 800ae88 <atan+0x2d0>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f7f5 fa2a 	bl	8000168 <__aeabi_dsub>
 800ad14:	4632      	mov	r2, r6
 800ad16:	463b      	mov	r3, r7
 800ad18:	f7f5 fbde 	bl	80004d8 <__aeabi_dmul>
 800ad1c:	a35c      	add	r3, pc, #368	@ (adr r3, 800ae90 <atan+0x2d8>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	f7f5 fa21 	bl	8000168 <__aeabi_dsub>
 800ad26:	4632      	mov	r2, r6
 800ad28:	463b      	mov	r3, r7
 800ad2a:	f7f5 fbd5 	bl	80004d8 <__aeabi_dmul>
 800ad2e:	a35a      	add	r3, pc, #360	@ (adr r3, 800ae98 <atan+0x2e0>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f7f5 fa18 	bl	8000168 <__aeabi_dsub>
 800ad38:	4632      	mov	r2, r6
 800ad3a:	463b      	mov	r3, r7
 800ad3c:	f7f5 fbcc 	bl	80004d8 <__aeabi_dmul>
 800ad40:	a357      	add	r3, pc, #348	@ (adr r3, 800aea0 <atan+0x2e8>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f7f5 fa0f 	bl	8000168 <__aeabi_dsub>
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	f7f5 fbc3 	bl	80004d8 <__aeabi_dmul>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	4640      	mov	r0, r8
 800ad58:	4649      	mov	r1, r9
 800ad5a:	f7f5 fa07 	bl	800016c <__adddf3>
 800ad5e:	4622      	mov	r2, r4
 800ad60:	462b      	mov	r3, r5
 800ad62:	f7f5 fbb9 	bl	80004d8 <__aeabi_dmul>
 800ad66:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	d144      	bne.n	800adfa <atan+0x242>
 800ad70:	4620      	mov	r0, r4
 800ad72:	4629      	mov	r1, r5
 800ad74:	f7f5 f9f8 	bl	8000168 <__aeabi_dsub>
 800ad78:	e733      	b.n	800abe2 <atan+0x2a>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	4b4f      	ldr	r3, [pc, #316]	@ (800aebc <atan+0x304>)
 800ad7e:	f7f5 f9f3 	bl	8000168 <__aeabi_dsub>
 800ad82:	2200      	movs	r2, #0
 800ad84:	4606      	mov	r6, r0
 800ad86:	460f      	mov	r7, r1
 800ad88:	4620      	mov	r0, r4
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	4b4b      	ldr	r3, [pc, #300]	@ (800aebc <atan+0x304>)
 800ad8e:	f7f5 f9ed 	bl	800016c <__adddf3>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4630      	mov	r0, r6
 800ad98:	4639      	mov	r1, r7
 800ad9a:	f7f5 fcc7 	bl	800072c <__aeabi_ddiv>
 800ad9e:	f04f 0a01 	mov.w	sl, #1
 800ada2:	4604      	mov	r4, r0
 800ada4:	460d      	mov	r5, r1
 800ada6:	e767      	b.n	800ac78 <atan+0xc0>
 800ada8:	4b46      	ldr	r3, [pc, #280]	@ (800aec4 <atan+0x30c>)
 800adaa:	429e      	cmp	r6, r3
 800adac:	d21a      	bcs.n	800ade4 <atan+0x22c>
 800adae:	2200      	movs	r2, #0
 800adb0:	4b45      	ldr	r3, [pc, #276]	@ (800aec8 <atan+0x310>)
 800adb2:	f7f5 f9d9 	bl	8000168 <__aeabi_dsub>
 800adb6:	2200      	movs	r2, #0
 800adb8:	4606      	mov	r6, r0
 800adba:	460f      	mov	r7, r1
 800adbc:	4620      	mov	r0, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	4b41      	ldr	r3, [pc, #260]	@ (800aec8 <atan+0x310>)
 800adc2:	f7f5 fb89 	bl	80004d8 <__aeabi_dmul>
 800adc6:	2200      	movs	r2, #0
 800adc8:	4b3c      	ldr	r3, [pc, #240]	@ (800aebc <atan+0x304>)
 800adca:	f7f5 f9cf 	bl	800016c <__adddf3>
 800adce:	4602      	mov	r2, r0
 800add0:	460b      	mov	r3, r1
 800add2:	4630      	mov	r0, r6
 800add4:	4639      	mov	r1, r7
 800add6:	f7f5 fca9 	bl	800072c <__aeabi_ddiv>
 800adda:	f04f 0a02 	mov.w	sl, #2
 800adde:	4604      	mov	r4, r0
 800ade0:	460d      	mov	r5, r1
 800ade2:	e749      	b.n	800ac78 <atan+0xc0>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	2000      	movs	r0, #0
 800adea:	4938      	ldr	r1, [pc, #224]	@ (800aecc <atan+0x314>)
 800adec:	f7f5 fc9e 	bl	800072c <__aeabi_ddiv>
 800adf0:	f04f 0a03 	mov.w	sl, #3
 800adf4:	4604      	mov	r4, r0
 800adf6:	460d      	mov	r5, r1
 800adf8:	e73e      	b.n	800ac78 <atan+0xc0>
 800adfa:	4b35      	ldr	r3, [pc, #212]	@ (800aed0 <atan+0x318>)
 800adfc:	4e35      	ldr	r6, [pc, #212]	@ (800aed4 <atan+0x31c>)
 800adfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	f7f5 f9af 	bl	8000168 <__aeabi_dsub>
 800ae0a:	4622      	mov	r2, r4
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	f7f5 f9ab 	bl	8000168 <__aeabi_dsub>
 800ae12:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ae1e:	f7f5 f9a3 	bl	8000168 <__aeabi_dsub>
 800ae22:	f1bb 0f00 	cmp.w	fp, #0
 800ae26:	4604      	mov	r4, r0
 800ae28:	460d      	mov	r5, r1
 800ae2a:	f6bf aee4 	bge.w	800abf6 <atan+0x3e>
 800ae2e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae32:	461d      	mov	r5, r3
 800ae34:	e6df      	b.n	800abf6 <atan+0x3e>
 800ae36:	a51c      	add	r5, pc, #112	@ (adr r5, 800aea8 <atan+0x2f0>)
 800ae38:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae3c:	e6db      	b.n	800abf6 <atan+0x3e>
 800ae3e:	bf00      	nop
 800ae40:	54442d18 	.word	0x54442d18
 800ae44:	3ff921fb 	.word	0x3ff921fb
 800ae48:	8800759c 	.word	0x8800759c
 800ae4c:	7e37e43c 	.word	0x7e37e43c
 800ae50:	e322da11 	.word	0xe322da11
 800ae54:	3f90ad3a 	.word	0x3f90ad3a
 800ae58:	24760deb 	.word	0x24760deb
 800ae5c:	3fa97b4b 	.word	0x3fa97b4b
 800ae60:	a0d03d51 	.word	0xa0d03d51
 800ae64:	3fb10d66 	.word	0x3fb10d66
 800ae68:	c54c206e 	.word	0xc54c206e
 800ae6c:	3fb745cd 	.word	0x3fb745cd
 800ae70:	920083ff 	.word	0x920083ff
 800ae74:	3fc24924 	.word	0x3fc24924
 800ae78:	5555550d 	.word	0x5555550d
 800ae7c:	3fd55555 	.word	0x3fd55555
 800ae80:	2c6a6c2f 	.word	0x2c6a6c2f
 800ae84:	bfa2b444 	.word	0xbfa2b444
 800ae88:	52defd9a 	.word	0x52defd9a
 800ae8c:	3fadde2d 	.word	0x3fadde2d
 800ae90:	af749a6d 	.word	0xaf749a6d
 800ae94:	3fb3b0f2 	.word	0x3fb3b0f2
 800ae98:	fe231671 	.word	0xfe231671
 800ae9c:	3fbc71c6 	.word	0x3fbc71c6
 800aea0:	9998ebc4 	.word	0x9998ebc4
 800aea4:	3fc99999 	.word	0x3fc99999
 800aea8:	54442d18 	.word	0x54442d18
 800aeac:	bff921fb 	.word	0xbff921fb
 800aeb0:	440fffff 	.word	0x440fffff
 800aeb4:	7ff00000 	.word	0x7ff00000
 800aeb8:	3fdbffff 	.word	0x3fdbffff
 800aebc:	3ff00000 	.word	0x3ff00000
 800aec0:	3ff2ffff 	.word	0x3ff2ffff
 800aec4:	40038000 	.word	0x40038000
 800aec8:	3ff80000 	.word	0x3ff80000
 800aecc:	bff00000 	.word	0xbff00000
 800aed0:	0800b580 	.word	0x0800b580
 800aed4:	0800b5a0 	.word	0x0800b5a0

0800aed8 <scalbn>:
 800aed8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800aedc:	4616      	mov	r6, r2
 800aede:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aee2:	4683      	mov	fp, r0
 800aee4:	468c      	mov	ip, r1
 800aee6:	460b      	mov	r3, r1
 800aee8:	b982      	cbnz	r2, 800af0c <scalbn+0x34>
 800aeea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aeee:	4303      	orrs	r3, r0
 800aef0:	d039      	beq.n	800af66 <scalbn+0x8e>
 800aef2:	4b2f      	ldr	r3, [pc, #188]	@ (800afb0 <scalbn+0xd8>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	f7f5 faef 	bl	80004d8 <__aeabi_dmul>
 800aefa:	4b2e      	ldr	r3, [pc, #184]	@ (800afb4 <scalbn+0xdc>)
 800aefc:	4683      	mov	fp, r0
 800aefe:	429e      	cmp	r6, r3
 800af00:	468c      	mov	ip, r1
 800af02:	da0d      	bge.n	800af20 <scalbn+0x48>
 800af04:	a326      	add	r3, pc, #152	@ (adr r3, 800afa0 <scalbn+0xc8>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	e01b      	b.n	800af44 <scalbn+0x6c>
 800af0c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800af10:	42ba      	cmp	r2, r7
 800af12:	d109      	bne.n	800af28 <scalbn+0x50>
 800af14:	4602      	mov	r2, r0
 800af16:	f7f5 f929 	bl	800016c <__adddf3>
 800af1a:	4683      	mov	fp, r0
 800af1c:	468c      	mov	ip, r1
 800af1e:	e022      	b.n	800af66 <scalbn+0x8e>
 800af20:	460b      	mov	r3, r1
 800af22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800af26:	3a36      	subs	r2, #54	@ 0x36
 800af28:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800af2c:	428e      	cmp	r6, r1
 800af2e:	dd0c      	ble.n	800af4a <scalbn+0x72>
 800af30:	a31d      	add	r3, pc, #116	@ (adr r3, 800afa8 <scalbn+0xd0>)
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	461c      	mov	r4, r3
 800af38:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800af3c:	f361 74df 	bfi	r4, r1, #31, #1
 800af40:	4621      	mov	r1, r4
 800af42:	481d      	ldr	r0, [pc, #116]	@ (800afb8 <scalbn+0xe0>)
 800af44:	f7f5 fac8 	bl	80004d8 <__aeabi_dmul>
 800af48:	e7e7      	b.n	800af1a <scalbn+0x42>
 800af4a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800af4e:	4432      	add	r2, r6
 800af50:	428a      	cmp	r2, r1
 800af52:	dced      	bgt.n	800af30 <scalbn+0x58>
 800af54:	2a00      	cmp	r2, #0
 800af56:	dd0a      	ble.n	800af6e <scalbn+0x96>
 800af58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800af5c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800af60:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af64:	46ac      	mov	ip, r5
 800af66:	4658      	mov	r0, fp
 800af68:	4661      	mov	r1, ip
 800af6a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800af6e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800af72:	da09      	bge.n	800af88 <scalbn+0xb0>
 800af74:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800af78:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800af7c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800af80:	480e      	ldr	r0, [pc, #56]	@ (800afbc <scalbn+0xe4>)
 800af82:	f041 011f 	orr.w	r1, r1, #31
 800af86:	e7bd      	b.n	800af04 <scalbn+0x2c>
 800af88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800af8c:	3236      	adds	r2, #54	@ 0x36
 800af8e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800af92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af96:	4658      	mov	r0, fp
 800af98:	4629      	mov	r1, r5
 800af9a:	2200      	movs	r2, #0
 800af9c:	4b08      	ldr	r3, [pc, #32]	@ (800afc0 <scalbn+0xe8>)
 800af9e:	e7d1      	b.n	800af44 <scalbn+0x6c>
 800afa0:	c2f8f359 	.word	0xc2f8f359
 800afa4:	01a56e1f 	.word	0x01a56e1f
 800afa8:	8800759c 	.word	0x8800759c
 800afac:	7e37e43c 	.word	0x7e37e43c
 800afb0:	43500000 	.word	0x43500000
 800afb4:	ffff3cb0 	.word	0xffff3cb0
 800afb8:	8800759c 	.word	0x8800759c
 800afbc:	c2f8f359 	.word	0xc2f8f359
 800afc0:	3c900000 	.word	0x3c900000

0800afc4 <with_errno>:
 800afc4:	b570      	push	{r4, r5, r6, lr}
 800afc6:	4604      	mov	r4, r0
 800afc8:	460d      	mov	r5, r1
 800afca:	4616      	mov	r6, r2
 800afcc:	f7fb f9a2 	bl	8006314 <__errno>
 800afd0:	4629      	mov	r1, r5
 800afd2:	6006      	str	r6, [r0, #0]
 800afd4:	4620      	mov	r0, r4
 800afd6:	bd70      	pop	{r4, r5, r6, pc}

0800afd8 <xflow>:
 800afd8:	b513      	push	{r0, r1, r4, lr}
 800afda:	4604      	mov	r4, r0
 800afdc:	4619      	mov	r1, r3
 800afde:	4610      	mov	r0, r2
 800afe0:	b10c      	cbz	r4, 800afe6 <xflow+0xe>
 800afe2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800afe6:	e9cd 2300 	strd	r2, r3, [sp]
 800afea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afee:	f7f5 fa73 	bl	80004d8 <__aeabi_dmul>
 800aff2:	2222      	movs	r2, #34	@ 0x22
 800aff4:	b002      	add	sp, #8
 800aff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800affa:	f7ff bfe3 	b.w	800afc4 <with_errno>

0800affe <__math_uflow>:
 800affe:	2200      	movs	r2, #0
 800b000:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b004:	f7ff bfe8 	b.w	800afd8 <xflow>

0800b008 <__math_oflow>:
 800b008:	2200      	movs	r2, #0
 800b00a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800b00e:	f7ff bfe3 	b.w	800afd8 <xflow>
	...

0800b014 <_init>:
 800b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b016:	bf00      	nop
 800b018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01a:	bc08      	pop	{r3}
 800b01c:	469e      	mov	lr, r3
 800b01e:	4770      	bx	lr

0800b020 <_fini>:
 800b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b022:	bf00      	nop
 800b024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b026:	bc08      	pop	{r3}
 800b028:	469e      	mov	lr, r3
 800b02a:	4770      	bx	lr
