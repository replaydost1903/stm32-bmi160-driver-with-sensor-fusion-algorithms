#include "bmi160.h"

extern I2C_HandleTypeDef hi2c1;

#if defined(BMI160_I2C_IT)
/*
 * I2C Read and Write Interrupt Function Declarations
 */
static void bmi160_i2c_write_it(uint8_t*,uint16_t,uint16_t);
static void bmi160_i2c_read_it(uint8_t*,uint16_t,uint16_t);
/*
 * I2C Read and Write Interrupt Function Definitions
 */
static inline void bmi160_i2c_read_it(uint8_t *pData,uint16_t MemAddr,uint16_t Size)
{
	BMI160_I2C_STATUS(HAL_I2C_Mem_Read_IT(&hi2c1, BMI160_READ_ADDR, MemAddr, 1U, pData, Size));
}

static void bmi160_i2c_write_it(uint8_t *pData,uint16_t MemAddr,uint16_t Size)
{
	BMI160_I2C_STATUS(HAL_I2C_Mem_Write_IT(&hi2c1, BMI160_WRITE_ADDR, MemAddr, 1U, pData, Size));
}
#else
/*
 * I2C Read and Write Polling Function Declarations
 */
static void bmi160_i2c_read_poll(uint8_t*,uint16_t,uint16_t, uint32_t);
static void bmi160_i2c_write_poll(uint8_t*,uint16_t,uint16_t,uint32_t);
/*
 * I2C Read and Write Polling Function Definitions
 */
static void bmi160_i2c_read_poll(uint8_t *pData,uint16_t MemAddr,uint16_t Size, uint32_t Timeout)
{
	BMI160_I2C_STATUS(HAL_I2C_Mem_Read(&hi2c1,BMI160_READ_ADDR, MemAddr,1U, pData,Size, Timeout));
}
static void bmi160_i2c_write_poll(uint8_t *pData,uint16_t MemAddr,uint16_t Size, uint32_t Timeout)
{
	BMI160_I2C_STATUS(HAL_I2C_Mem_Write(&hi2c1,BMI160_WRITE_ADDR, MemAddr,1U, pData, Size, Timeout));
}
#endif

/*
 * The bmi160_s data structure must be set before calling this function in main.c.
 */
void bmi160_init(bmi160_s *bmi160)
{
	/* BMI160 Is ready */
	if(HAL_OK != HAL_I2C_IsDeviceReady(&hi2c1, BMI160_WRITE_ADDR, 10, HAL_MAX_DELAY))
	{
		bmi160->status.IS_READY = BMI160_ERROR;
		printf("BMI160 IS READY ERROR\n");
		Error_Handler();
	}

	bmi160->status.IS_READY = BMI160_OK;
	printf("BMI160 IS READY OK\n");

	/* BMI160 Init Assignments */
	bmi160->i2c_read = bmi160_i2c_read_poll;

	bmi160->i2c_write = bmi160_i2c_write_poll;

	/*	Read One Byte */
	uint8_t rx_buff[1]={0};

	/*	Read Chip-ID Value */
	bmi160->i2c_read((uint8_t*)&rx_buff[0],(uint16_t)BMI160_CHIP_ID,(uint16_t)1U,(uint32_t)HAL_MAX_DELAY);

	/*	CHIP-ID Register Mask Operation */
	if(BMI160_AND_OPER(rx_buff[0],BMI160_CHIP_ID_Mask) != BMI160_CHIP_ID_VAL)
	{
		bmi160->status.CHIP_ID = BMI160_ERROR;
		printf("BMI160 CHIP_ID ERROR\n");
		Error_Handler();
	}

	bmi160->status.CHIP_ID = BMI160_OK;
	printf("BMI160 CHIP_ID OK\n");

	/* Accelerometer Self-Test Operation */
	bmi160_acc_self_test_init(bmi160);
}


void bmi160_acc_self_test_init(bmi160_s *bmi160)
{
/*
Kendini test etkinleştirilmeden önce, **g-aralığının 8 g'ye** ayarlanması gerekir.
 (0x40)** kaydının değeri **0x2C** olarak ayarlanmalıdır
 (**acc_odr=1600Hz; acc_bwp=2; acc_us=0**). Aksi takdirde,
 ivmeölçer kendini test modu** doğru şekilde çalışmayacaktır.
 */

	uint8_t tx_data[1] = {0x14};
	bmi160->i2c_write((uint8_t*)&tx_data[0],(uint16_t)BMI160_PMU_STATUS,(uint16_t)1U,(uint32_t)HAL_MAX_DELAY);

	tx_data[0] = 0x08;
	bmi160->i2c_write((uint8_t*)&tx_data[0],(uint16_t)BMI160_ACC_RANGE,(uint16_t)1U,(uint32_t)HAL_MAX_DELAY);

	tx_data[0] = 0x2C;
	bmi160->i2c_write((uint8_t*)&tx_data[0],(uint16_t)BMI160_ACC_CONF,(uint16_t)1U,(uint32_t)HAL_MAX_DELAY);

	tx_data[0] = 0x1DU;
	bmi160->i2c_write((uint8_t*)&tx_data[0],(uint16_t)BMI160_SELF_TEST,(uint16_t)1U,(uint32_t)HAL_MAX_DELAY);

	HAL_Delay(50);

	uint16_t accel_x=0,accel_y=0,accel_z=0;
	while(1)
	{
		uint8_t rx_data[2] = {0};
		bmi160->i2c_read((uint8_t*)&rx_data[0],(uint16_t)BMI160_STATUS,(uint16_t)1U,(uint32_t)HAL_MAX_DELAY);

		if(BMI160_AND_OPER(rx_data[0],BMI160_STATUS_FocRdy_Mask) == BMI160_STATUS_FocRdy_Mask)
		{
			printf("acc calibrated\n");
		}
		if(BMI160_AND_OPER(rx_data[0],BMI160_STATUS_GyrSelfTest_Mask) == BMI160_STATUS_GyrSelfTest_Mask)
		{
			printf("gyro calibrated\n");
		}
		printf("%d\n",rx_data[0]);

//		bmi160->i2c_read((uint8_t*)&rx_data[0],(uint16_t)BMI160_DATA_14,(uint16_t)2U,(uint32_t)HAL_MAX_DELAY);
//		accel_x = (int16_t)((rx_data[1] << 8U) | rx_data[0]);
//		printf("acc_x %d \n",accel_x);
//		HAL_Delay(50);
//
//		bmi160->i2c_read((uint8_t*)&rx_data[0],(uint16_t)BMI160_DATA_16,(uint16_t)2U,(uint32_t)HAL_MAX_DELAY);
//		accel_y = (int16_t)((rx_data[1] << 8U) | rx_data[0]);
//		printf("acc_y %d \n",accel_y);
//		HAL_Delay(50);
//
//		bmi160->i2c_read((uint8_t*)&rx_data[0],(uint16_t)BMI160_DATA_18,(uint16_t)2U,(uint32_t)HAL_MAX_DELAY);
//		accel_z = (int16_t)((rx_data[1] << 8U) | rx_data[0]);
//		printf("acc_z %d \n",accel_z);

		HAL_Delay(500);

	}


}



























